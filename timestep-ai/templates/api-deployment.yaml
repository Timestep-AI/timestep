apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert --chart --file docker-compose.yml --out timestep-ai --secrets-as-files --verbose
    kompose.image-pull-policy: Always
    kompose.image-pull-secret: regcred
    kompose.service.healthcheck.readiness.http_get_path: /ready
    kompose.service.healthcheck.readiness.http_get_port: "5000"
    kompose.version: 1.30.0 (HEAD)
    rollme: '{{ randAlphaNum 5 | quote }}'
  creationTimestamp: null
  labels:
    io.kompose.service: api
  name: api
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: api
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert --chart --file docker-compose.yml --out timestep-ai --secrets-as-files --verbose
        kompose.image-pull-policy: Always
        kompose.image-pull-secret: regcred
        kompose.service.healthcheck.readiness.http_get_path: /ready
        kompose.service.healthcheck.readiness.http_get_port: "5000"
        kompose.version: 1.30.0 (HEAD)
        rollme: '{{ randAlphaNum 5 | quote }}'
      creationTimestamp: null
      labels:
        io.kompose.network/timestep-default: "true"
        io.kompose.service: api
    spec:
      containers:
        - args:
            - poetry
            - run
            - uvicorn
            - app.main:app
            - --proxy-headers
            - --host
            - 0.0.0.0
            - --port
            - "5000"
          env:
            - name: PREFECT_API_URL
              value: http://prefect-server.default.svc.cluster.local:4200/api
          image: registry.gitlab.com/timestep-ai/timestep/api:{{ .Chart.AppVersion }}
          imagePullPolicy: Always
          name: api
          ports:
            - containerPort: 5000
              hostPort: 5000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 5000
          resources: {}
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
status: {}
