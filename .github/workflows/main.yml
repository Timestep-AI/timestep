name: GitHub CI/CD

on:
  push:
    # branches: [ "main" ]
#   pull_request:
    # branches: [ "main" ]

# env:
#   ARGO_CD_GITHUB_API_TOKEN: ${{ secrets.ARGO_CD_GITHUB_API_TOKEN }}
#   CI_COMMIT_SHA: ${{ github.sha }}
#   CI_REGISTRY_IMAGE: registry.gitlab.com/timestep-ai/timestep
#   CLOUD_INSTANCE_PROVIDER: ${{ vars.CLOUD_INSTANCE_PROVIDER }}
#   DOCKER_REGISTRY_USERNAME: ${{ vars.DOCKER_REGISTRY_USERNAME }}
#   DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
#   DOCKER_REGISTRY_SERVER: ${{ vars.DOCKER_REGISTRY_SERVER }}
#   DOMAIN_NAME_REGISTRAR_PROVIDER: ${{ vars.DOMAIN_NAME_REGISTRAR_PROVIDER }}
#   DO_TOKEN: ${{ secrets.DO_TOKEN }}
#   HTPASSWD: ${{ secrets.HTPASSWD }}
#   INGRESS_CONTROLLER_ACME_CA: ${{ vars.INGRESS_CONTROLLER_ACME_CA }}
#   INGRESS_CONTROLLER_DEBUG: ${{ vars.INGRESS_CONTROLLER_DEBUG }}
#   INGRESS_CONTROLLER_EMAIL: ${{ vars.INGRESS_CONTROLLER_EMAIL }}
#   KUBECONFIG: ${{ vars.KUBECONFIG }}
#   KUBECONTEXT: ${{ vars.KUBECONTEXT }}
#   PRIMARY_DOMAIN_NAME: ${{ vars.PRIMARY_DOMAIN_NAME }}
#   NAMECHEAP_API_KEY: ${{ secrets.NAMECHEAP_API_KEY }}
#   NAMECHEAP_API_USER: ${{ secrets.NAMECHEAP_API_USER }}
#   NAMECHEAP_USER_NAME: ${{ secrets.NAMECHEAP_USER_NAME }}
#   SSH_PUBLIC_KEY: ${{ vars.SSH_PUBLIC_KEY }}
#   TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
#   TF_USERNAME: ${{ vars.TF_USERNAME }}

jobs:
  env-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create secrets folder
        run: mkdir secrets

      - name: Save Secrets to Files
        run: |
          for key in ${{ toJson(secrets) }}; do
            lowercase_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            echo "${{ secrets[key] }}" > "secrets/$lowercase_key"
          done

      - name: Display saved secrets
        run: ls -R secrets

  # build-base:
  #   runs-on: ubuntu-latest
  #   # runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Build base image
  #     run: |
  #       ./src/timestep/infra/cicd/build.sh

  # build-cicd:
  #   needs: build-base
  #   runs-on: ubuntu-latest
  #   # runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Build cicd image
  #     env:
  #       IMAGE_NAME: cicd
  #     run: |
  #       ./src/timestep/infra/cicd/build.sh

  # build-postgresql-repmgr:
  #   needs: build-base
  #   runs-on: ubuntu-latest
  #   # runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Build postgresql-repmgr image
  #     env:
  #       IMAGE_NAME: postgresql-repmgr
  #     run: |
  #       ./src/timestep/infra/cicd/build.sh

  # build:
  #   needs: build-base
  #   strategy:
  #     matrix:
  #      image_name: [ "caddy", "frontend", "web" ]
  #   runs-on: ubuntu-latest
  #   # runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - name: Build ${{ matrix.image_name }} image
  #     env:
  #       IMAGE_NAME: ${{ matrix.image_name }}
  #     run: |
  #       ./src/timestep/infra/cicd/build.sh

  # deploy:
  #   runs-on: ubuntu-latest
  #   # runs-on: self-hosted
  #   needs: [build-cicd, build-postgresql-repmgr, build]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Deploy
  #     env:
  #       POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
  #       SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #     run: |
  #       mkdir -p secrets
  #       echo "$ARGO_CD_GITHUB_API_TOKEN" > secrets/github_api_token
  #       echo "$POSTGRESQL_PASSWORD" > secrets/postgresql_password
  #       echo "$SSH_PRIVATE_KEY" > secrets/ssh_private_key
  #       ./src/timestep/infra/cicd/deploy.sh

  # test:
  #   runs-on: ubuntu-latest
  #   needs: [deploy]
  #   steps:
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Validate agent protocol compliance
  #       run: |
  #         URL=https://www.timestep.ai/envs/default/agents/default bash -c "$(curl -fsSL https://agentprotocol.ai/test.sh)"
