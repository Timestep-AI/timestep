name: "Comment a Plan on a PR"

on: [pull_request]

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: "Terraform CDK Diff"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Installing anyenv and **envs...
      run: |
        git clone https://github.com/anyenv/anyenv ~/.anyenv
        echo "" >> $HOME/.bashrc
        echo export PATH=\$HOME/.anyenv/bin:\$PATH >> $HOME/.bashrc
        echo "eval \"\$(anyenv init -)\"" >> $HOME/.bashrc
        $HOME/.anyenv/bin/anyenv install --force-init
        $HOME/.anyenv/bin/anyenv install jenv
        $HOME/.anyenv/bin/anyenv install nodenv
        $HOME/.anyenv/bin/anyenv install goenv
        exec $SHELL -l

    - name: Check versions
      run: |
        anyenv versions
        jenv versions
        nodenv versions
        goenv versions

    # - name: Install poetry
    #   run: pipx install poetry
    # - uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.9'
    #     cache: 'poetry' # cache virtualenv directories -- one for each poetry project found
    # # - run: python my_script.py

    # - name: Configure poetry
    #   run: poetry config virtualenvs.create true

    # - name: Install dependencies
    #   run: poetry install

    # - name: List poetry config
    #   run: poetry config --list

    # - name: Generate module and provider bindings
    #   # run: poetry run cdktf get
    #   run: poetry run cdktf get

    # # Remove this step if you don't have any
    # - name: Run unit tests
    #   # run: poetry run pytest
    #   run: poetry run toml-sort -ai --check pyproject.toml

    - name: Run Terraform CDK
      uses: hashicorp/terraform-cdk-action@v0.1.0
      with:
        terraformVersion: 1.4.1
        cdktfVersion: 0.16.1
        stackName: timestep
        mode: plan-only
        terraformCloudToken: ${{ secrets.TF_API_TOKEN }}
        githubToken: ${{ secrets.GITHUB_TOKEN }}

# name: deploy
# on:
#   push:
#     branches:
#     - "**"  # run for branches
#     tags:
#     - "*"  # run for tags

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     strategy:
#       fail-fast: false
#       matrix:
#         environment:
#         # - ops
#         # - apps
#         # - apps-prod  # uncomment if you have three environments
#         - development
#         - production

#     concurrency:
#       group: terraform-${{ matrix.environment }}
#       cancel-in-progress: false

#     env:
#       # KBST_DOCKER_ARGS: --rm -v ${{ github.workspace }}:/infra -e AWS_EC2_METADATA_DISABLED=true -e TF_IN_AUTOMATION=true
#       # KBST_DOCKER_IMAGE: kbst:${{ github.sha }}
#       DO_TOKEN: ${{ secrets.DO_TOKEN }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#     #
#     #
#     # Build image
#     # - name: Build image
#     #   env:
#     #     DOCKER_BUILDKIT: 1
#     #   run: docker build -t $KBST_DOCKER_IMAGE .

#       - uses: actions/setup-node@v2
#         with:
#           node-version: "18"

#       # - name: Install dependencies
#       #   run: yarn install

#       - name: Generate module and provider bindings
#         run: npx cdktf-cli get

#       # Remove this step if you don't have any
#       # - name: Run unit tests
#       #   run: yarn test

#     #
#     #
#     # Terraform init
#     # - name: Terraform init
#     #   env:
#     #     KBST_AUTH_AWS: ${{ secrets.KBST_AUTH_AWS }}
#     #     KBST_AUTH_AZ: ${{ secrets.KBST_AUTH_AZ }}
#     #     KBST_AUTH_GCLOUD: ${{ secrets.KBST_AUTH_GCLOUD }}
#     #   run: |
#     #     docker run \
#     #         $KBST_DOCKER_ARGS \
#     #         -e KBST_AUTH_AWS \
#     #         -e KBST_AUTH_AZ \
#     #         -e KBST_AUTH_GCLOUD \
#     #         $KBST_DOCKER_IMAGE \
#     #       terraform init

#     #
#     #
#     # Select workspace based on matrix environment
#     # - name: Select ${{ matrix.environment }} workspace
#     #   run: |
#     #     docker run \
#     #         $KBST_DOCKER_ARGS \
#     #         $KBST_DOCKER_IMAGE \
#     #       terraform workspace select ${{ matrix.environment }}

#     #
#     #
#     # Terraform plan against current workspace
#     # - name: Terraform plan
#     #   run: |
#     #     docker run \
#     #         $KBST_DOCKER_ARGS \
#     #         $KBST_DOCKER_IMAGE \
#     #       terraform plan --out=tfplan --input=false

#     - name: Run Terraform CDK
#       uses: hashicorp/terraform-cdk-action@v0.1.0
#       with:
#         terraformVersion: 1.3.0
#         cdktfVersion: 0.12.2
#         stackName: my-stack
#         mode: plan-only
#         terraformCloudToken: ${{ secrets.TF_API_TOKEN }}
#         githubToken: ${{ secrets.GITHUB_TOKEN }}

#     #
#     #
#     # Terraform apply against current workspace
#     # if trigger matches environment
#     # - name: Terraform apply
#     #   if: |
#     #     (github.ref == 'refs/heads/main' && matrix.environment == 'ops') || 
#     #     (startsWith(github.ref, 'refs/tags/apps-deploy-') && matrix.environment == 'apps') ||
#     #     (startsWith(github.ref, 'refs/tags/apps-prod-deploy-') && matrix.environment == 'apps-prod')
#     #   run: |
#     #     docker run \
#     #         $KBST_DOCKER_ARGS \
#     #         $KBST_DOCKER_IMAGE \
#     #       terraform apply --input=false tfplan
