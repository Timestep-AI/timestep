# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Prepare environment
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
        VARS_CONTEXT: ${{ toJson(vars) }}
      run: |
        secret_keys=$(echo "$SECRETS_CONTEXT" | jq -r 'keys[]')
        var_keys=$(echo "$VARS_CONTEXT" | jq -r 'keys[]')

        for key in $secret_keys; do
          if [ "$key" != "github_token" ]; then
            lowercase_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
            secret_value=$(echo "$SECRETS_CONTEXT" | jq -r ".$key")
            echo "$secret_value" > "secrets/$lowercase_key"
          fi
        done

        for key in $var_keys; do
          var_value=$(echo "$VARS_CONTEXT" | jq -r ".$key")
          echo "$key=$var_value" >> .env
        done
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --user pipx
        python3 -m pipx ensurepath
        pipx install poetry==1.8.3 # TODO: Put the version in the environment
        cp .env.example .env
        ./scripts/build.sh
        poetry run pytest
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish --build --repository=testpypi
    #     sudo apt-get update -y
    #     sudo apt-get install direnv -y
    #     eval "$(direnv hook bash)"
    #     direnv allow
    #     echo $POETRY_VIRTUALENVS_IN_PROJECT
    #     echo $POETRY_VIRTUALENVS_IN_PROJECT_TEST
    #     # make
    #     # make up
        # make instal
    # - name: Test with pytest
    #   run: |
    #     pytest
    # - name: Publish to PyPI
    #   uses: JRubics/poetry-publish@v2.0
    #   with:
    #     pypi_token: ${{ secrets.PYPI_TOKEN }}

  verify:
    needs: build
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ timestep==12.0.1
      - name: Verify
        run: |
          python -c "import timestep; print(timestep.__version__)"
          timestep up
