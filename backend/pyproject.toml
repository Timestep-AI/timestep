[dependency-groups]
dev = [
  "coverage[toml]>=7.4.0",
  "ipykernel>=6.30.0",
  "monkeytype>=23.3.0",
  "mypy>=1.17.0",
  "nbval>=0.11.0",
  "psutil>=5.9.0",
  "pylint>=3.3.7",
  "pytest-cov>=5.0.0",
  "pytest-mypy>=1.0.1",
  "pytest-ruff>=0.5",
  "pytest==8.3.5",
  "ruff>=0.12.5",
  "tensorboardx>=2.6.4",
  "toml-sort>=0.24.2",
  "types-psutil>=7.0.0.20250601",
  "types-pyyaml>=6.0.12.20250516",
  "types-requests>=2.32.4.20250611",
  "types-tqdm>=4.67.0.20250516"
]

[project]
dependencies = [
  "av>=15.0.0",
  "bitsandbytes>=0.46.1",
  "diffusers>=0.34.0",
  "fastapi[standard]>=0.115.14",
  "mlflow>=3.1.1",
  "num2words>=0.5.14",
  "numpy>=1.24.0",
  "openai-agents[litellm,realtime,viz,voice]",
  "openai>=1.93.3",
  "peft>=0.16.0",
  "pillow>=11.3.0",
  "pytest-asyncio>=1.0.0",
  "pyyaml>=6.0.2",
  "requests>=2.32.4",
  "scikit-learn>=1.5.0",
  "sentence-transformers>=5.0.0",
  "sentencepiece>=0.2.0",
  "soundfile>=0.13.1",
  "tokenizers>=0.21.2",
  "torch>=2.7.1",
  "torchvision>=0.22.1",
  "transformers>=4.53.1",
  "trl>=0.19.1",
  "uvicorn>=0.35.0",
  "librosa>=0.10.1",
  "scipy>=1.11.0",
  "matplotlib>=3.7.0"
]
name = "backend"
requires-python = ">=3.11"
version = "0.1.0"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.report]
exclude_lines = [
  "def __repr__",
  "if __name__ == .__main__.:",
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError"
]
fail_under = 42

[tool.coverage.run]
concurrency = ["multiprocessing"]
parallel = true
source = ["src"]

[tool.mypy]
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
mypy_path = "src"
no_implicit_optional = false
python_version = "3.11"
show_error_codes = true
strict = false
strict_equality = false
warn_no_return = false
warn_redundant_casts = false
warn_return_any = false
warn_unreachable = false
warn_unused_configs = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "av.*",
  "bitsandbytes.*",
  "datasets.*",
  "diffusers.*",
  "mlflow.*",
  "num2words.*",
  "openai_agents.*",
  "peft.*",
  "sentence_transformers.*",
  "sentencepiece.*",
  "sklearn.*",
  "soundfile.*",
  "tokenizers.*",
  "torchvision.*",
  "transformers.*",
  "trl.*"
]

[tool.pytest.ini_options]
addopts = [
  "--ruff",
  "--ruff-format",
  "-x"
]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
  "ignore::UserWarning"
]
markers = [
  "notebook: marks tests as notebook integration tests (deselect with '-m \"not notebook\"')",
  "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]
# nbval specific settings for notebook testing
nbval_lax = true
nbval_skip_compare = [
  "application/vnd.jupyter.widget-view+json",
  "text/plain"
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "E501" # line too long (handled by formatter)
]
select = [
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "C901", # cyclomatic complexity
  "E", # pycodestyle errors
  "F", # pyflakes
  "I", # isort (import sorting)
  "N", # pep8-naming
  "S", # bandit security
  "UP", # pyupgrade
  "W" # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"] # Allow assert in tests

[tool.uv.sources]
openai-agents = {git = "https://github.com/openai/openai-agents-python.git"}
