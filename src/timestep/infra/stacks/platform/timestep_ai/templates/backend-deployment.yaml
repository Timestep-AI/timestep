apiVersion: apps/v1
kind: Deployment
# kind: StatefulSet
metadata:
  # annotations:
    # rollme: '{{ randAlphaNum 5 | quote }}'
  # creationTimestamp: null
  labels:
    app: backend
  name: backend
  namespace: default
spec:
  # replicas: {{ .Values.replicaCount }}
  replicas: 1
  selector:
    matchLabels:
      app: backend
  serviceName: backend
  # strategy: {}
  template:
    metadata:
      # annotations:
        # rollme: {{ randAlphaNum 5 | quote }}
      # creationTimestamp: null
      labels:
        # io.kompose.network/timestep-default: "true"
        app: backend
    spec:
      containers:
        # - command:
        #     - /home/ubuntu/app/docker-entrypoint.sh
        #     - poetry
        #     - run
        #     - uvicorn
        #     - src.backend.main:app
        #     - --proxy-headers
        #     - --host
        #     - 0.0.0.0
        #     - --port
        #     - "5000"
        - envFrom:
            - configMapRef:
                name: backend-config-map
            - secretRef:
                name: backend-secret
          image: registry.gitlab.com/timestep-ai/timestep/backend:{{ .Chart.AppVersion }}
          imagePullPolicy: Always
          name: backend
          ports:
            - containerPort: 8000
              # hostPort: 5000
              # protocol: TCP
            # - containerPort: 5678 # TODO: only expose this if debug is enabled in the environment
              # hostPort: 5678
              # protocol: TCP
          # readinessProbe:
          #   httpGet:
          #     path: /ready
          #     port: 8000
          resources:
            limits:
              cpu: 2000m
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 128Mi
          # resources: {}
          # volumeMounts:
          #  - mountPath: /dev/shm
          #    name: dshm
          # volumeMounts:
          #   - mountPath: /home/ubuntu/.sky
          #     name: sky-volume
          # volumeMounts:
          # - name: sky-volume
          #   mountPath: /home/ubuntu/.sky
          # - name: ssh-volume
          #   mountPath: /home/ubuntu/.ssh

        # - name: litestream
        #   image: litestream/litestream:0.3
        #   args: ['replicate']
        #   volumeMounts:
        #   - name: sky-volume
        #     mountPath: /home/ubuntu/.sky
        #   - name: litestream-config-map-volume
        #     mountPath: /etc/litestream.yml
        #     subPath: litestream.yml
        #   env:
        #   - name: LITESTREAM_ACCESS_KEY_ID
        #     valueFrom:
        #       # secretKeyRef:
        #         # name: litestream
        #         # key: LITESTREAM_ACCESS_KEY_ID
        #       configMapKeyRef:
        #         name: backend-config-map
        #         key: LITESTREAM_ACCESS_KEY_ID
        #   - name: LITESTREAM_SECRET_ACCESS_KEY
        #     valueFrom:
        #       secretKeyRef:
        #         # name: litestream
        #         name: backend-secret
        #         key: LITESTREAM_SECRET_ACCESS_KEY
        #   ports:
        #   - name: metrics
        #     containerPort: 9090
        #   securityContext:
        #     runAsUser: 1001 # ubuntu
        #     runAsGroup: 123 # ubuntu
        #     fsGroup: 123 # ubuntu

      imagePullSecrets:
        - name: regcred
      # restartPolicy: Always
# status: {}

      # Initialize using Litestream to restore data automatically
      # before starting the application.
      # initContainers:
      # - name: init-minio-default-bucket
      #   image: bitnami/minio-client:latest
      #   command: ["/bin/sh"]
      #   args: ["-c", "mc config host add minio http://$MINIO_ENDPOINT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; mc mb --ignore-existing minio/sky-bucket;"]
      #   env:
      #   - name: MINIO_ENDPOINT
      #     valueFrom:
      #       configMapKeyRef:
      #         name: backend-config-map
      #         key: MINIO_ENDPOINT
      #   - name: MINIO_ROOT_USER
      #     valueFrom:
      #       configMapKeyRef:
      #         name: backend-config-map
      #         key: MINIO_ROOT_USER
      #   - name: MINIO_ROOT_PASSWORD
      #     valueFrom:
      #       secretKeyRef:
      #         name: backend-secret
      #         key: MINIO_ROOT_PASSWORD

      # - name: init-litestream
      #   image: litestream/litestream:0.3
      #   # args: ['restore', '-if-db-not-exists', '-if-replica-exists', '/home/ubuntu/.sky/benchmark.db']
      #   command: ["/bin/sh"]
      #   args: ["-c", "litestream restore -if-db-not-exists -if-replica-exists /home/ubuntu/.sky/benchmark.db; litestream restore -if-db-not-exists -if-replica-exists /home/ubuntu/.sky/jobs.db; litestream restore -if-db-not-exists -if-replica-exists /home/ubuntu/.sky/spot_jobs.db; litestream restore -if-db-not-exists -if-replica-exists /home/ubuntu/.sky/state.db;"]
      #   volumeMounts:
      #   - name: sky-volume
      #     mountPath: /home/ubuntu/.sky
      #   - name: litestream-config-map-volume
      #     mountPath: /etc/litestream.yml
      #     subPath: litestream.yml
      #   env:
      #   - name: LITESTREAM_ACCESS_KEY_ID
      #     valueFrom:
      #       # secretKeyRef:
      #       #   name: litestream
      #       #   key: LITESTREAM_ACCESS_KEY_ID
      #       configMapKeyRef:
      #         name: backend-config-map
      #         key: LITESTREAM_ACCESS_KEY_ID
      #   - name: LITESTREAM_SECRET_ACCESS_KEY
      #     valueFrom:
      #       secretKeyRef:
      #         # name: litestream
      #         # key: LITESTREAM_SECRET_ACCESS_KEY
      #         name: backend-secret
      #         key: LITESTREAM_SECRET_ACCESS_KEY
      #   securityContext:
      #     runAsUser: 1001 # ubuntu
      #     runAsGroup: 123 # ubuntu
      #     fsGroup: 123 # ubuntu

      # volumes:
      # - name: litestream-config-map-volume
      #   configMap:
      #     # name: litestream
      #     name: litestream-config-map
      # volumes:
      #  - name: dshm
      #    emptyDir:
      #       medium: Memory
      #       # sizeLimit: 1.2Gi # TODO: set this to > 30% of available RAM, e.g. int(0.3 * MEMORY_SIZE_GB)GB
      # volumes:
      #   - name: sky-volume
      #     persistentVolumeClaim:
      #       claimName: sky-pvc
  # volumeClaimTemplates:
  # - metadata:
  #     name: sky-volume
  #   spec:
  #     accessModes: ["ReadWriteOnce"]
  #     resources:
  #       requests:
  #         storage: 100Mi
  # - metadata:
  #     name: ssh-volume
  #   spec:
  #     accessModes: ["ReadWriteOnce"]
  #     resources:
  #       requests:
  #         storage: 1Mi
