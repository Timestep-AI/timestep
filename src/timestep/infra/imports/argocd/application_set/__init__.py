'''
# `argocd_application_set`

Refer to the Terraform Registory for docs: [`argocd_application_set`](https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set).
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class ApplicationSet(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSet",
):
    '''Represents a {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set argocd_application_set}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id_: builtins.str,
        *,
        metadata: typing.Union["ApplicationSetMetadata", typing.Dict[builtins.str, typing.Any]],
        spec: typing.Union["ApplicationSetSpec", typing.Dict[builtins.str, typing.Any]],
        id: typing.Optional[builtins.str] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set argocd_application_set} Resource.

        :param scope: The scope in which to define this construct.
        :param id_: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#id ApplicationSet#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37accf080b635ae7d022e37a2502786aaf7af8bbde822f588149c846a2ecc5a7)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id_", value=id_, expected_type=type_hints["id_"])
        config = ApplicationSetConfig(
            metadata=metadata,
            spec=spec,
            id=id,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id_, config])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetMetadata(
            annotations=annotations, labels=labels, name=name, namespace=namespace
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGenerator", typing.Dict[builtins.str, typing.Any]]]],
        template: typing.Union["ApplicationSetSpecTemplate", typing.Dict[builtins.str, typing.Any]],
        go_template: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        strategy: typing.Optional[typing.Union["ApplicationSetSpecStrategy", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param generator: generator block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        :param go_template: Enable use of `Go Text Template <https://pkg.go.dev/text/template>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#go_template ApplicationSet#go_template}
        :param strategy: strategy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#strategy ApplicationSet#strategy}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpec(
            generator=generator,
            template=template,
            go_template=go_template,
            strategy=strategy,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetId")
    def reset_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetId", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(self) -> "ApplicationSetMetadataOutputReference":
        return typing.cast("ApplicationSetMetadataOutputReference", jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecOutputReference":
        return typing.cast("ApplicationSetSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(self) -> typing.Optional["ApplicationSetMetadata"]:
        return typing.cast(typing.Optional["ApplicationSetMetadata"], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(self) -> typing.Optional["ApplicationSetSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61eb4b146a41ffe20e75f95f41a6b272e7db96e094685f106b35be870d26d4d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "metadata": "metadata",
        "spec": "spec",
        "id": "id",
    },
)
class ApplicationSetConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        metadata: typing.Union["ApplicationSetMetadata", typing.Dict[builtins.str, typing.Any]],
        spec: typing.Union["ApplicationSetSpec", typing.Dict[builtins.str, typing.Any]],
        id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#id ApplicationSet#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if isinstance(metadata, dict):
            metadata = ApplicationSetMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6488100d5708480b97efe90a1ddfd05a0301f97c878b6f0d5cb60aa99d3c5d73)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "metadata": metadata,
            "spec": spec,
        }
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if id is not None:
            self._values["id"] = id

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def metadata(self) -> "ApplicationSetMetadata":
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        assert result is not None, "Required property 'metadata' is missing"
        return typing.cast("ApplicationSetMetadata", result)

    @builtins.property
    def spec(self) -> "ApplicationSetSpec":
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        assert result is not None, "Required property 'spec' is missing"
        return typing.cast("ApplicationSetSpec", result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#id ApplicationSet#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0dbd043024bf9674af9a9ac8c09139a08e436108c0a343d61b5e021a4a8727c8)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbe5245b0e6e7e493b385cfec03fc24ad8c925e96d77abeb802a93987e1b51cb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="generation")
    def generation(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "generation"))

    @builtins.property
    @jsii.member(jsii_name="resourceVersion")
    def resource_version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "resourceVersion"))

    @builtins.property
    @jsii.member(jsii_name="uid")
    def uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uid"))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06a2f36ad8faa8983870e88c7db759e7d31fc92c46387a60db9c3ce5a163ba1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c27ca23c7729c08322a503a1e8b45df193a426d8eddc516f819bded8d5ed0a2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82dc8e2bcd49cde38c40a135aa401c8a3b1d80e015e53089d603368b0858d7fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8885fca70e3a863d0babc56a9dbcbcb99a18de48ba5552a357d133f6fceb75fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetMetadata]:
        return typing.cast(typing.Optional[ApplicationSetMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(self, value: typing.Optional[ApplicationSetMetadata]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e2fe742fed44d89227fe2ea980d88e06505527f21a27d439579b570b19225a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpec",
    jsii_struct_bases=[],
    name_mapping={
        "generator": "generator",
        "template": "template",
        "go_template": "goTemplate",
        "strategy": "strategy",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpec:
    def __init__(
        self,
        *,
        generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGenerator", typing.Dict[builtins.str, typing.Any]]]],
        template: typing.Union["ApplicationSetSpecTemplate", typing.Dict[builtins.str, typing.Any]],
        go_template: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        strategy: typing.Optional[typing.Union["ApplicationSetSpecStrategy", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param generator: generator block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        :param go_template: Enable use of `Go Text Template <https://pkg.go.dev/text/template>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#go_template ApplicationSet#go_template}
        :param strategy: strategy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#strategy ApplicationSet#strategy}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(template, dict):
            template = ApplicationSetSpecTemplate(**template)
        if isinstance(strategy, dict):
            strategy = ApplicationSetSpecStrategy(**strategy)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ede94e758422f01449a1d604c076aa4d4c86da885b1a7c9eaa327aa70683159)
            check_type(argname="argument generator", value=generator, expected_type=type_hints["generator"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
            check_type(argname="argument go_template", value=go_template, expected_type=type_hints["go_template"])
            check_type(argname="argument strategy", value=strategy, expected_type=type_hints["strategy"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "generator": generator,
            "template": template,
        }
        if go_template is not None:
            self._values["go_template"] = go_template
        if strategy is not None:
            self._values["strategy"] = strategy
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def generator(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGenerator"]]:
        '''generator block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        '''
        result = self._values.get("generator")
        assert result is not None, "Required property 'generator' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGenerator"]], result)

    @builtins.property
    def template(self) -> "ApplicationSetSpecTemplate":
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        assert result is not None, "Required property 'template' is missing"
        return typing.cast("ApplicationSetSpecTemplate", result)

    @builtins.property
    def go_template(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enable use of `Go Text Template <https://pkg.go.dev/text/template>`_.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#go_template ApplicationSet#go_template}
        '''
        result = self._values.get("go_template")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def strategy(self) -> typing.Optional["ApplicationSetSpecStrategy"]:
        '''strategy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#strategy ApplicationSet#strategy}
        '''
        result = self._values.get("strategy")
        return typing.cast(typing.Optional["ApplicationSetSpecStrategy"], result)

    @builtins.property
    def sync_policy(self) -> typing.Optional["ApplicationSetSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGenerator",
    jsii_struct_bases=[],
    name_mapping={
        "cluster_decision_resource": "clusterDecisionResource",
        "clusters": "clusters",
        "git": "git",
        "list": "list",
        "matrix": "matrix",
        "merge": "merge",
        "pull_request": "pullRequest",
        "scm_provider": "scmProvider",
        "selector": "selector",
    },
)
class ApplicationSetSpecGenerator:
    def __init__(
        self,
        *,
        cluster_decision_resource: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        clusters: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusters", typing.Dict[builtins.str, typing.Any]]]]] = None,
        git: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGit", typing.Dict[builtins.str, typing.Any]]]]] = None,
        list: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListStruct", typing.Dict[builtins.str, typing.Any]]]]] = None,
        matrix: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrix", typing.Dict[builtins.str, typing.Any]]]]] = None,
        merge: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMerge", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pull_request: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequest", typing.Dict[builtins.str, typing.Any]]]]] = None,
        scm_provider: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProvider", typing.Dict[builtins.str, typing.Any]]]]] = None,
        selector: typing.Optional[typing.Union["ApplicationSetSpecGeneratorSelector", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param cluster_decision_resource: cluster_decision_resource block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#cluster_decision_resource ApplicationSet#cluster_decision_resource}
        :param clusters: clusters block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#clusters ApplicationSet#clusters}
        :param git: git block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#git ApplicationSet#git}
        :param list: list block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#list ApplicationSet#list}
        :param matrix: matrix block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#matrix ApplicationSet#matrix}
        :param merge: merge block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#merge ApplicationSet#merge}
        :param pull_request: pull_request block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pull_request ApplicationSet#pull_request}
        :param scm_provider: scm_provider block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#scm_provider ApplicationSet#scm_provider}
        :param selector: selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#selector ApplicationSet#selector}
        '''
        if isinstance(selector, dict):
            selector = ApplicationSetSpecGeneratorSelector(**selector)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18f27778356d7bc45d903e37ac24c027253dd9307c3e4eedd46eb8f00f6b69a2)
            check_type(argname="argument cluster_decision_resource", value=cluster_decision_resource, expected_type=type_hints["cluster_decision_resource"])
            check_type(argname="argument clusters", value=clusters, expected_type=type_hints["clusters"])
            check_type(argname="argument git", value=git, expected_type=type_hints["git"])
            check_type(argname="argument list", value=list, expected_type=type_hints["list"])
            check_type(argname="argument matrix", value=matrix, expected_type=type_hints["matrix"])
            check_type(argname="argument merge", value=merge, expected_type=type_hints["merge"])
            check_type(argname="argument pull_request", value=pull_request, expected_type=type_hints["pull_request"])
            check_type(argname="argument scm_provider", value=scm_provider, expected_type=type_hints["scm_provider"])
            check_type(argname="argument selector", value=selector, expected_type=type_hints["selector"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if cluster_decision_resource is not None:
            self._values["cluster_decision_resource"] = cluster_decision_resource
        if clusters is not None:
            self._values["clusters"] = clusters
        if git is not None:
            self._values["git"] = git
        if list is not None:
            self._values["list"] = list
        if matrix is not None:
            self._values["matrix"] = matrix
        if merge is not None:
            self._values["merge"] = merge
        if pull_request is not None:
            self._values["pull_request"] = pull_request
        if scm_provider is not None:
            self._values["scm_provider"] = scm_provider
        if selector is not None:
            self._values["selector"] = selector

    @builtins.property
    def cluster_decision_resource(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResource"]]]:
        '''cluster_decision_resource block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#cluster_decision_resource ApplicationSet#cluster_decision_resource}
        '''
        result = self._values.get("cluster_decision_resource")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResource"]]], result)

    @builtins.property
    def clusters(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusters"]]]:
        '''clusters block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#clusters ApplicationSet#clusters}
        '''
        result = self._values.get("clusters")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusters"]]], result)

    @builtins.property
    def git(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGit"]]]:
        '''git block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#git ApplicationSet#git}
        '''
        result = self._values.get("git")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGit"]]], result)

    @builtins.property
    def list(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListStruct"]]]:
        '''list block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#list ApplicationSet#list}
        '''
        result = self._values.get("list")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListStruct"]]], result)

    @builtins.property
    def matrix(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrix"]]]:
        '''matrix block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#matrix ApplicationSet#matrix}
        '''
        result = self._values.get("matrix")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrix"]]], result)

    @builtins.property
    def merge(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMerge"]]]:
        '''merge block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#merge ApplicationSet#merge}
        '''
        result = self._values.get("merge")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMerge"]]], result)

    @builtins.property
    def pull_request(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequest"]]]:
        '''pull_request block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pull_request ApplicationSet#pull_request}
        '''
        result = self._values.get("pull_request")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequest"]]], result)

    @builtins.property
    def scm_provider(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProvider"]]]:
        '''scm_provider block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#scm_provider ApplicationSet#scm_provider}
        '''
        result = self._values.get("scm_provider")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProvider"]]], result)

    @builtins.property
    def selector(self) -> typing.Optional["ApplicationSetSpecGeneratorSelector"]:
        '''selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#selector ApplicationSet#selector}
        '''
        result = self._values.get("selector")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorSelector"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGenerator(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResource",
    jsii_struct_bases=[],
    name_mapping={
        "config_map_ref": "configMapRef",
        "label_selector": "labelSelector",
        "name": "name",
        "requeue_after_seconds": "requeueAfterSeconds",
        "template": "template",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResource:
    def __init__(
        self,
        *,
        config_map_ref: builtins.str,
        label_selector: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector", typing.Dict[builtins.str, typing.Any]]] = None,
        name: typing.Optional[builtins.str] = None,
        requeue_after_seconds: typing.Optional[builtins.str] = None,
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
        values: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param config_map_ref: ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#config_map_ref ApplicationSet#config_map_ref}
        :param label_selector: label_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#label_selector ApplicationSet#label_selector}
        :param name: Resource name of the kind, group and version, defined in the ``config_map_ref``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param requeue_after_seconds: How often to check for changes (in seconds). Default: 3min. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        :param values: Arbitrary string key-value pairs which are passed directly as parameters to the template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if isinstance(label_selector, dict):
            label_selector = ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector(**label_selector)
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorClusterDecisionResourceTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13ae9c9570cd36c050eabda61034f61257365556cef8215fdbc8b5fe179fabbb)
            check_type(argname="argument config_map_ref", value=config_map_ref, expected_type=type_hints["config_map_ref"])
            check_type(argname="argument label_selector", value=label_selector, expected_type=type_hints["label_selector"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument requeue_after_seconds", value=requeue_after_seconds, expected_type=type_hints["requeue_after_seconds"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "config_map_ref": config_map_ref,
        }
        if label_selector is not None:
            self._values["label_selector"] = label_selector
        if name is not None:
            self._values["name"] = name
        if requeue_after_seconds is not None:
            self._values["requeue_after_seconds"] = requeue_after_seconds
        if template is not None:
            self._values["template"] = template
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def config_map_ref(self) -> builtins.str:
        '''ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#config_map_ref ApplicationSet#config_map_ref}
        '''
        result = self._values.get("config_map_ref")
        assert result is not None, "Required property 'config_map_ref' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def label_selector(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector"]:
        '''label_selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#label_selector ApplicationSet#label_selector}
        '''
        result = self._values.get("label_selector")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector"], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Resource name of the kind, group and version, defined in the ``config_map_ref``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def requeue_after_seconds(self) -> typing.Optional[builtins.str]:
        '''How often to check for changes (in seconds). Default: 3min.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        '''
        result = self._values.get("requeue_after_seconds")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplate"], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Arbitrary string key-value pairs which are passed directly as parameters to the template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector",
    jsii_struct_bases=[],
    name_mapping={
        "match_expressions": "matchExpressions",
        "match_labels": "matchLabels",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector:
    def __init__(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92d2004933491779511724ec945dc94e4494aeafd523edc75ef43cfd84b53bba)
            check_type(argname="argument match_expressions", value=match_expressions, expected_type=type_hints["match_expressions"])
            check_type(argname="argument match_labels", value=match_labels, expected_type=type_hints["match_labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if match_expressions is not None:
            self._values["match_expressions"] = match_expressions
        if match_labels is not None:
            self._values["match_labels"] = match_labels

    @builtins.property
    def match_expressions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions"]]]:
        '''match_expressions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        '''
        result = self._values.get("match_expressions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions"]]], result)

    @builtins.property
    def match_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''A map of {key,value} pairs.

        A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        result = self._values.get("match_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "operator": "operator", "values": "values"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions:
    def __init__(
        self,
        *,
        key: typing.Optional[builtins.str] = None,
        operator: typing.Optional[builtins.str] = None,
        values: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param key: The label key that the selector applies to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param operator: A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        :param values: An array of string values. If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b358f5100b3b8a15d6309b61ebbae0d14314c94f33af85e06cea2474642e00a3)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument operator", value=operator, expected_type=type_hints["operator"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if key is not None:
            self._values["key"] = key
        if operator is not None:
            self._values["operator"] = operator
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def key(self) -> typing.Optional[builtins.str]:
        '''The label key that the selector applies to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def operator(self) -> typing.Optional[builtins.str]:
        '''A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        '''
        result = self._values.get("operator")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of string values.

        If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cb7a8462034012b1e72693a6ea643830969d0bfd76ca19a318346e31632f894)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4da6a5366ed77282aa4b23f0071b7cc517d88a9bed701ba138b14e1955bb9761)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b415e633013bbe094e88fc820fcc7a2a43f90814c53b154a6a5475810fad91bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cba2d3d26b25c570a0db2a5aeefb75557c6fde0b0e97f426183fa6ec650acc9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94a7c2fa4505442f2dcaad57fce9e6590ce6101ed88b5537723ae222726a9cae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__271dcd7c5629e0e3ccdc6cdb31356e81aba3730a4605602e5147dc1c3c06b5fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d0963c193cf6b0946e0ca8b79ea4fcd35dcb8e02c42811bd0d6f2916489b4b1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetKey")
    def reset_key(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKey", []))

    @jsii.member(jsii_name="resetOperator")
    def reset_operator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOperator", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="operatorInput")
    def operator_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "operatorInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f5e2de8bdf6fc6d8f0b062daee81ddf94c54be02ddf569bd522afe020a3a522)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="operator")
    def operator(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "operator"))

    @operator.setter
    def operator(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b340a2d60d76321b318aa0e28628a7e4734ec49fcf5f104611a77c966fe0d74)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "operator", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c83bcf9de8ab75d9c8a7d40c60c6017446e1ce75eb22fa5b557f3f4cc3a87858)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__941c4942354141376c5e19fd9bc75f0ad633533d22396da20a5cb27506ae3814)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12e3504963cbc84e0ab4f5aec094760195fff13b3942daacf2367df7dfe0d7ee)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMatchExpressions")
    def put_match_expressions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5e607c420bc90a369907a9fe45bce83ed437a6b0d4367b1ff08654673c30a2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMatchExpressions", [value]))

    @jsii.member(jsii_name="resetMatchExpressions")
    def reset_match_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchExpressions", []))

    @jsii.member(jsii_name="resetMatchLabels")
    def reset_match_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchLabels", []))

    @builtins.property
    @jsii.member(jsii_name="matchExpressions")
    def match_expressions(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsList, jsii.get(self, "matchExpressions"))

    @builtins.property
    @jsii.member(jsii_name="matchExpressionsInput")
    def match_expressions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]], jsii.get(self, "matchExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabelsInput")
    def match_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "matchLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabels")
    def match_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "matchLabels"))

    @match_labels.setter
    def match_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e707ca0372a9394f0426b5a5af7be451665058fd55c74254f31cbc7f4e560ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "matchLabels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a14e65e4db35f2c786e680c366b39f8fc1a48d6ae7a99008adfcf2cf6dec88d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f22edca681079c46ff084a1595fa521816455d74b8c8a1935c980a32a58bf6a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa75213c387c9318b08f26a00c6564d8a7e30aa20111339ede8477825b2eef05)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__132b12600c361bc42ff982f1af544f0171265e60f7579eedb7bf965bf945df2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1677726511ca8632d7926f5bb329946e56b91a6998af3e7339b04c145aa55e87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e686b811a0eb35800a1da4bcd1b3e136ad2cadec10f40d2bccceec7682e022fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd4e337448cc797fccf7d0f163eacea57b9da9dbc4e60a9040701ca719ab1962)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__826463df23d08019a3298eb2897ad675af3df8317a59f1b9db0117f051e42ac7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putLabelSelector")
    def put_label_selector(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector(
            match_expressions=match_expressions, match_labels=match_labels
        )

        return typing.cast(None, jsii.invoke(self, "putLabelSelector", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplate(
            metadata=metadata, spec=spec
        )

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetLabelSelector")
    def reset_label_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabelSelector", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetRequeueAfterSeconds")
    def reset_requeue_after_seconds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequeueAfterSeconds", []))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="labelSelector")
    def label_selector(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorOutputReference, jsii.get(self, "labelSelector"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="configMapRefInput")
    def config_map_ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "configMapRefInput"))

    @builtins.property
    @jsii.member(jsii_name="labelSelectorInput")
    def label_selector_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector], jsii.get(self, "labelSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSecondsInput")
    def requeue_after_seconds_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "requeueAfterSecondsInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="configMapRef")
    def config_map_ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "configMapRef"))

    @config_map_ref.setter
    def config_map_ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7796d7bbd8017653e4451feb08de71ab6d9cb8d48c5767bd49f829cf10bbbffc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "configMapRef", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f12c0e488279e3bdfa580c8ac11ac58c3b74ea1ddbef28ef4d66e95afcf0b43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "requeueAfterSeconds"))

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__393b8b1c963631b0d46acf7f9d34f0b919b6b762e9a0c253143d7c302df36dbf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "requeueAfterSeconds", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__500dacbf08d1d63de53d2e4346103bcb49615c4babb51c576d8561a43a04d4c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2332f89fc1b6a6b4876d2692df79cbdd62872f628711aa54105a0f59a0dede53)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19b2d7e36999068309ec7e05a29efe88cc26e82d3037224da6144a0a4a4ccd0c)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata"], result)

    @builtins.property
    def spec(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52e815b1e4d32e23c697d8313be5697514812341512efed213fe585cbd72b008)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34c5a36647a3c089b567b6c70d9495d33255406eda359e0d2bdf39868111a44e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83897102553048d1db74ab5d894ff6c904dc508452aa3159bd4df8115b8cc82a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae8d3c5aa9d047080045ef200b0a6b1b434b20904c92319fecf0268e7abe8332)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a1d6102a65b730929ab16a952d4ca8d54a24e822d1ae1caef1fe387cba30d02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf2b4bd51da229bd3458944528151cf38078e10e372a518e79d8e6125112b7c7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0953ebf51f42d170acaae0527d7cf93d1c76c5ddce54e597f40c96bea1f0bcc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d593c003bb19f15d4476270f6a6425f5eadc73bbb76147aea167f7771a23e074)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b17504741556e6f1099c3476719eb95aa2bbff0eb0c3f17d8beac6cd076d652d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__282dc7f8f00db608185e19ca8a5d74f1f0ca24c6226384b55ff937803eceb074)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3227befa4d6641ee08514854c5f95dc7274c3ec549e945da1c9bfa100136045)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdae4eb34ec2c7353fc62876f687d9557b09af362c0e944088f74c4e13afe447)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7994f734bdf4fb0aa37839f80f4a1c70a9b0ab9314dd282be65bd4a4c48fc946)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a84921063efdbd9537365602337f094643f2b2ac1455144a819f11e5e546c6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ca708fc910d3f1deac24c2263f4afa4c2c7a1dae91b68517e221b66560c402a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43a2a0102c3b9cbb9d7f35ad23a683756c8cf29686c847cfedda18bd413d0c6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a88948bc2ddbbf3f087d759362808664540809b02e1c2eb9ca50c1893e5b0d1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b761666bfc8773c369aa9227c9fe9090a6980657994340f4ca5a63f078258486)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__999715d5d1a4372bb1b6015b1a44e42c1f2d6b1641a9f66a45642a601c5aabe1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf56a525a6a831e66dd5903b27a70584ddb54891b41b47a3a9e619069ed91e8f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__caa29a72371b8a6ff641f0785961009981518319626015edf1a936394f7fc0dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94a6ba83572d6d5cb233513ff26b6bcf5311b0f4d5f0fb1b937ceb8376d682c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4cabd6a563cae345ca955d41e1593b2de7f94ad3370169281132f1a9442851f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d1811d252bfbba6da049e63be6789010035a8fc94917a1706b94d6d6894baab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18c20e214e9912dbf1933ffaa5712a8048ff3e7b84cb4b8685f07f933fbbcccf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d88b4632b14fc33d728590cc63360f9a418b885831229c21350943e617196e26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d4b7f7777854eedc5d98b22428272703e5198389c1dce702adfbc44f31281a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24f23b40b2d0cf6ef6a56fb53627e53bbb3a3f493a7c03b27c81c15de834cd23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__640feb5ef2af1fbebfce8ca9248ad6b4e61127735eb4d95a4b8de65093ca76c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c23968c4fd52f67e471b7a0058d20b58bdb03e6bd97399d0ebee6176cf1993b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65603ef14ffce208363eee94695c3c6b75b1dee2829c4aac7845e72c18500d75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cb25a1bac1419190356deb53b13c8add963cd5ae6730adae047b7ef89a7fec9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c926f526de6085b4c4ceaca6f71d56ed1a025ce2a305f5e84f50d963449491c)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56a3e3ce2b9024f1c688c692337247e582aaffb8e7b0674b45b0590e0370a66d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6777bef9548ef3545c3cd10663afb8a02893e02f9d1549ddb4323a2ed15a5c85)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07f059fcc3afe41a8f9e8d565cbae5ea94e9752fe5a731fbb7a4e75eff224435)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01082f7fd56b52dfee69657755b7e2f8207b54f9175589eac1b5952b3a7df21c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da82716d454e75be1a565758d9505f2674c46a46240eee7cc25cc1d0caeb389f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aabe7ca79f18169710c3fa3efb1e2d3527e16e44070ff2f2d5a1e35420e31c84)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f63ded7ecce3ddc500412e340af9f136ff966c8f4fa63cb6cf9cc7b736063d16)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27c766c1e3d5a4c197cc622c68053cd25e3e667ce4f2a2c2000459fff4261770)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d69b1c7e892acf98b1a58ebc8502b4a7e3ced9f48af109511af0d6be46f63d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c899c43c4ead44f8766d9c6db0f7e7998bb8735efacfae258f7acabd93fcdd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc97c429e27c0139d416ec47e7cf1c0e0a2983cb49a2c9ed039a196068055083)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee7cf8b4e7b55ad06d9b0406c155b93ed2d639f455f2b7abcd5815e84c055458)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4335cdea6d527a38b49f0173147c8c7d39df8f5808ff93a8736636b7697683f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d889776854ad650645afa62c5654d000942b5781d91ceda30d1279321fc24ac3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53501073eb03dd23cbff1191722b1a9d1c421732fa67d0d67346175ce0b26b63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ee44495e3ea8438d626b49d3d117b6898ad0321a5a4f60582a9eb81842de319)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__303dc7bf35140957e4b5c2d011f5c85e458c7cb961b9dc94515f01e37fce7ba1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c12357726790385801bbccb1d0f4e8e49cc11eb5e40c55bc224ba8b4afbfe235)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfcd473ab25e96ca4ce6811dbb8b08aaf9665d3b7b3638a598f8eb1d00235048)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d30519d2172896f7ce81cf0ee8827872086365e43ac19e8ae9703b2ea32ced64)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ca9ad1f6f1db9376924e3f85ab9aa62c2f238e571a7ae63a677b8ddea39a599)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bc7648f4140687e1a92e1fae86f07d7a58611b59a4a6e6c08d66a68cf4a99d5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ed29c09aaa90f33677f3159de481599417903d9892d13209dc3f1f10015080c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc5a75231530c8d8b5656e73e30a62910215560eef2a6fbabda540f7fcc0cece)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48a33720a40e9f13ab03d746d4fd16d7f1f4028cc7d9cc35d384ee7120eb063b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ab0ec8ec6d71b695351fdbd61c04d6990f724e1b0d07bfa5f803fd385987674)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcb1f0b218e873ba84d61ac822eed02d23234e7b785e5aeba48d5975d12f3fd5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe23b0c90f7601c5a834b249001a18eadff22151ffed5bab4b26fd7cecac4729)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8717eea364a08f01855f54dccb53c47bba55ff98c78034881af61382ce8cb87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03eb441e157f40fa069c687fc2e8cf636b170448885dc3f23c8546cb00a3ea88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__641dfb34c22632246784915536b151cfd407b53cc65498543bbb70d94f5026ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__092d45c1db07d12ec33bbd31ffcbfdf7046bbd16a7124ccd8dd0248d66080e09)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc2ea81ba648850b9f72479771a7af2b427ab6a658b44362b543633a5349391e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__748a508b018063a71b6b8ac22eeefe798fa135c98c9e5540c4bcea55ce2a748a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f401093fadb2a201a5c9f99ba39f659c2c75fd5e0dc95d4863af1ec985284852)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a190aa886bc06dc23fb4abe467c62863b04ff69b7b2c7a2b8e812e395f15439)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c406564b19fc46b923e4f6ed81f6f81920f07ccc9e9a40bd1f69c5ceb827b37)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4bfb1ff2a37843e3ef0fab2258c68492c7d0608e9736efdd526ed1a7e21df67)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f940ac9e6b26483f5443609f4b189073dfe011a6ff9d731cc4dbcc22b39599b4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8ebc1ae485a85e1fcb40c7cda1d522d5a83384ea0e0c6522a71e31d9a0546e6)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6281493b7a172d0009950f5d95f7e25a3af6e311116653bc0343b978b0eb5e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dd64af1da515615f471d1af54b8bf512e2dd8088aa2e4c6347c0dce010232b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33fa597ddec07e065db10211875a3645e37d9ecb2576a8f5644decccf254a8bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e502ae76843fdf8297bd5d66cc82e7d14d4aa78387232517b216d6975c7c77b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__535e68d2ac5d732b69d2f5f2fd6389d4bd18f0d79233fca5a3f2a0e7747b94db)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aeab63461dd8c839fbbddf3dc73d682415976c83f4e5bb92bcce169dee6d8649)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26993b461b8a944fc6ff549fedb8ef2ab723800eff2d7dc658cccdc5d718cb9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2edcfc840a5f6c9ea685babe6a1d5bbe0c6ac229ae9518ee65256e94d886314)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d568d10e63f0b1b79b9d18f24bd6cc095c49081cc2c56f09a63a00d6e7b97346)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb66e33a5c66f4483c2db4925d77be83e5c3fe0c6a76ee51fcaabd861e0b28b7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ac0fcf9e9ed4a0ff7adad182af87e2a18557bc5d7e9dc17f743a6465fa52e29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba03c2388ebb57b395529453878ab989763ba9beea06769f6aa85f47b0534a9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__282e1bc5d89c8efa2abce0f9aed018f55640fac5103a1aded8f45d72cb13eecf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__508082b24ceaf69e3482266476b14da3c1ccb2cf85584122ab85e323ae4c7067)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87a4ab827f8bd7c10879f65efe73f24cc6c2b86733a304c06c541ac0e661ea01)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1fa6251881ffdc9d2fd8ccdc88b1017a0fcd872de3fabf7c6d4482a55314c8e)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7df4fa01b7c7ebcc8e921aaffa51b3afeaf1c74813eed6d974fbeaa79d1e0d3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1acf95dbe5a50ac58fc61c6facdf6063096856b652b59f2b37a9df2648b50ec7)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efb51d46f0254c00653eb5e9b912e798e5e931b42c689f197c2dfd45403d173e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9d35365e4033f991ea008692efb8aec3cc201e68dc715d4f95d3d8a462df161)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__407a633125acb4b46c41f07bc43a32e5abbd0c7bb1e87c1150dfcb26dcf1526c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7debc38719b59bf29979d3877019477eb6d6dc166c88333c66de073e0024f1d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e32ef244f1a0f0a3fc7d7a205ddb9bb796ba0a3e931d80cf335cd03a189cb2ce)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fac7ef4da7f5f85714e4f4091d5efbd91f374b0efa4b50f57c4c2da55d3ee92)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acef3d14c6206f0a9a75b720378712054cada41c9f0a7e94cea39ed0311b0214)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1505725acd2af99f3ade9739434806b913f0fdb302583b37be8dd7af8fd88ecf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d7b7ee1b19078a0bc71f69bcdfc4a2a4cbc6706d4ef71183b5a5126f48adafa)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca2ed3fcc92344e176fa275d5ea90aa2a7a0e963c60a1b0f16718da9a7079806)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d09edf97f0cae689437b28ffa7113ad305210613d2c8481ae17aca6bd677510)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__322c59e9c914c2bc2bb03e95041b88cc51006e4b8df68a49b3f6227115eeba1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5633cc204cdb7b7ac0e72cf26646e593dea8d04e0aa2f68221fe770307c820d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1906085b0aca31d57913c36aa22dd0422a533b19bc60699c8688b530f3f4c319)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7463bd4a7233ac408d9f534c34e7b9436f131f0e193ecb136069a6f4e70030c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3930f0481099b9bce4fb09e978a6ef637f07efe892938ef43683862935bcae4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a41652fdb7f93257b86eb161e342f42e7ca5cb1788fe9c883aa93ae88c1ce40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f22bc04872031862f3350235ef11fb2e8cedaf775d5679546cad1cd7e037a15d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a562d8018f89d4d3110101b387fafb856eb9a216af86f06cb7fb18dfdeec38b)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__605f92c62a9de68737f6d7d4d64ffe29382d305506c0347f095fa4a1906b8a23)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0df24b378da624480222509fdf3291e93972f75fdd2e6ae310cb7aab16c9fdf)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f556a6454348d9dc52daae545215292d643332e26c816499c4872e6c5295b46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ddc17e09ebf06fd741ee2433b476d7bc2628f214296b24a4e7767beab9eaa26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__add9137b9f9d316a052ad6d4921c9220cbef539fe333c2c9c41992eda1fbfc3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9135bb78d082362eae0b66eaa4f86820988a82d3c9418e19b80748f2bc87ea33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88c4f71e0a8ee4a776ece959866377eacdcee62e79409223cf74c77e2fbdf8d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcf17da1134c211e863774edbcd4be8243189b51d1ba2c10e537291ffc1673de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5319f196cd7c160832893ffc6321e70603858af5bae81203e4213cc1e436f90)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fb82a5662883799a100235f299963f267ce4e55b29b92683cdc9259edc83823)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__907c03b8d8182bfe95ac0abf0f5f7f2848bf2b75c93e42a9dd0c5eaa335c61b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf4a7ad7782ee7f7c011a51f34767720dded77f4298a933b9a52f0a0fd1db727)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__716c685d163bf1c5ea5240336d4097d36af97df71a474bab8703e16e6be77a21)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12add44af06e5ab3ba72e56c8c434c4f50f21de11dcd182699b82bbceb5262b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbf828cb126baeb8250cee9a62e786cee5bf762a5432e4d32d4a0f0a3b92d823)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__728344cb93b680701e3835662f77d7e536de9890491d625a0eb93e5427de51e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3208ca6f949851e8873a9a064552a98da9d5936b735dae7db4b1374dca954b6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da57095569b8a9de87b47ee1f4b15aeca13c2432da866e9b4508be6d4b32f0e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62950d5664c76c892767fb133cbe2b472442b11a7f98e74a4ff74d329c92c497)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dfaa94ccf1c197054e70924297ab6273219047500ed42025d74c3aa8f624c0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19d68d49437a0d556eb9a2a6ecba8130ae0a41033353b44cd20162a5d97e4c60)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a628c53677b10a6e93dabba1a18e9351f84bd78312dedf5e4937b3bda06add4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a146a7fa815b9643164637ff0bad60111415cb17e8f4fd9d4e465f54e8204718)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19f92935000edb8f959b350e5fdbbf75847c75d67a01749f7fc6834115272164)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2016e1d748d97a84212f5294f1890fdb7cd6eda8ed7b068e10c577af21da03e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c537abeaae57e10dcd6ce8b485b80898ee71855e00350fa84f565eb62397fc60)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5de37d831738e1612dcf62e9dbd51fecd968c9e28e8498efa05ed7a377546ed8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b42582f1c3cc5f367c2dfbcd53169cb2eb345f0578d47f36a174b309dd439ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c468f628b68f9e31cc7f585b393f3c37ad4f075d9ae5394c3f9a89f21854ac3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5f99ff9326430882136678a4ae92bc9a4647ef9b6489e40ac7c3633bba3d5fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d50c59c9d6d3a70341d695bf6c2c83e40490151338b80387174aa25d4ad1757a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c78939a05fe5fb17485a03cd372b6a801803f0056c4336182b8a28f46b1857d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3017ad83393e1821ca0a72bcd5352c15f1120d7d1add2f5ade0cf267327e039)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a9ccb8e03cb5abed1ab890041ef96b6a131c613a859d1be051cd2e742f0d3af)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__258394ba2e7cf5159d4e18d41d6c9e24c7e32cf1421056235539c9d6c78cf612)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae7fbfd7eeea1a6e387069809154613b40d6fec76b2a57db9b1f39dbf649cbeb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1df1346e7ea4c01f2a3145560020a39e0a44dd816757147dfc0d250b04e1c116)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7dd517c33ec81d21ab7f6ce01642403758d96b38197b86ed7e95cf5ec887f9af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c03aee7f0e05d35552c0c446dbf010b168cf6d16041728a1a43c0e09e722fe7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4aa39f649c3ac5b21bc4cc8cc77791f4729d791298043ba6c195f9fa5e48af5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__805575ea73af5403ce8c87ef919598f72d528ff9894d00130752d0358cd2a04f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a62d53bd4e957b15e427c33e38e84013d89c25b314db4c59b4d20149fe0dea76)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46fbf4487347f9cd5c6d50e4546e8e174e680d9eba55ad5062b740a99cf6b51e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__501b93da881ab300ffc4e36414ff284dd275347cf5d78b00cedba17e0ed51029)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b38f66c95ab866c708943cba86b802d5d2ea65c9259c4161f68fd07b9082d2da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9811cd64fc260bd94b2b7bcae2dba89b554be0fb2e4c95e4a554eb5c60f13af)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37420fe2af22f6b6bd314035f377c5086dcfa3059a467deea04f827ef1b83e89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1120fa37ee01b88df9c0dd09355d68263a25484ea8ef6ca5fed137df6255d813)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e41c5fa4945484ea9b2cfc20519286b7e3722b88f7dc8d6693dd5eee66668ff9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c286cb90601d7d074cb66f54d86c085403f671060c0ee6297e09aa7be2e80025)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a322769a119dcf461a69f3e71b69b1497dfe4ef3f875e04fb03910abe01b14ec)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3d5a742532fb3b705a41ce79f50077e52c372c69912573dd9bbf574faf9ca8c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e94169d1e15996d25902d03126d29388a1e866cd4e5181b62c75e2b0b7c4997)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88015c62b6f82bbbc6e6c63a0aaec294b81807c61fcbcc2f93bfb0b813406f97)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44e3968828ec6d9ae256f685e0c1491d8bf4d480da8c1f54efbdb226b1b0a46a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ecd5a90d3e88b40f2407265129e5c5511b30f46de4112a8f9381e92ab8cf7ff4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a72bf2094f6c7a19c62f606ce6051f1b8f5378230c6d532aa0c8d75d24971a33)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfc415608b11a197e723406cea65101e49974dcf069a7cc9648124913605e882)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72d9f746a7c7a784f1bc257fe3d11d34b5f34a55625058058de4dc8ecab09e70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9e15f8881d4743f0b298e19d7d7a0b81cae9bb2abf641cbdb9a66351a2ddd26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e92423e3473153d2c0951030555f4c3823c1021ccef027c3e6af21585fca64de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5b94a82e129547479f4b12efa4d2056eaaa1e75e8a7e18e9f13e1d8073bd943)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5544e2c6a73a00f4383bb18abe38d0eace62a5d46515fa4d4d51f7c78138b46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53fe3df28d39ab353c462734932424fb63207e0c53239d14d4c3c275aab418f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f97dcd96c217c0354854b4512b1bc2e7885c81d9d3cac4f5fa4ef29a5a30dd3)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fee4dd18e590e43ff7315313dd056dd1ddd209c4934f55ffbde889bfc422f24a)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d5a42fe7d017b8841eb4f549967622adeea1605aef2c4dd13dac53fb17bad55)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0614bd03b41b87ef1f3e882a1445dcb974ec29bc40bad1227d93b995e805c05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__626e508d48e304c2e184e062d24e28f1381bf3c5d3af8ea36bf64091c04abc9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9f973cb55d7a1b430b41f3c24f7641191a8d26a1d3259af023ea4d8ef7e53df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ab85bc3da5c1f51a178828a5d806e5a157fdee26739505340b372511aa5e70b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8dba350f94fb0dda973deb068de2c7e2ce5c69a2efb32b44b9d48b4d2bfdf1c9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77897ae77c79b40c76116079a2c677cbcab64670c036eb6286b6c60afc0380a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24e2aa6212f01f6423b8b6c302f5da8fa956cd43734d771f15913cbefaeeedba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClusters",
    jsii_struct_bases=[],
    name_mapping={
        "enabled": "enabled",
        "selector": "selector",
        "template": "template",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorClusters:
    def __init__(
        self,
        *,
        enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        selector: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersSelector", typing.Dict[builtins.str, typing.Any]]] = None,
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
        values: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param enabled: Boolean value defaulting to ``true`` to indicate that this block has been added thereby allowing all other attributes to be optional. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#enabled ApplicationSet#enabled}
        :param selector: selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#selector ApplicationSet#selector}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        :param values: Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if isinstance(selector, dict):
            selector = ApplicationSetSpecGeneratorClustersSelector(**selector)
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorClustersTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec98e1ea0caa6ad565396a471155fdbf64759a9274bc45dc9618958e449ee6e7)
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument selector", value=selector, expected_type=type_hints["selector"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if enabled is not None:
            self._values["enabled"] = enabled
        if selector is not None:
            self._values["selector"] = selector
        if template is not None:
            self._values["template"] = template
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Boolean value defaulting to ``true`` to indicate that this block has been added thereby allowing all other attributes to be optional.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#enabled ApplicationSet#enabled}
        '''
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def selector(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersSelector"]:
        '''selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#selector ApplicationSet#selector}
        '''
        result = self._values.get("selector")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersSelector"], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplate"], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClusters(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe8a642c3fc7950aa7454c1849ce7f5243befe8089ef68b3c269f98dab53a289)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57288c15f52a92d0ee330c31a77e6c4f79f276c4e0ad88195224733ed9cace04)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0a1cc4b71cd563f0f994b2190e21df597343bd93ca8d40d3f075bdba0af13b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa20281b0062691a1dd5105b6eaeefaec481378952d22d5456a754345f301ef1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__514324460866e9fa7bdf3851e5a4bb018ea00e4d6b245b098fc23c203d8989d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d98a5ae9c8c864debb48ae03d0c1c399b9d32927ab1be3e1ee604e389eb9785)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1dca7e4e366db8fe862531b7ad53f2ea08998e6b3719f9694d3c8aef3b1b0ab)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSelector")
    def put_selector(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersSelectorMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        value = ApplicationSetSpecGeneratorClustersSelector(
            match_expressions=match_expressions, match_labels=match_labels
        )

        return typing.cast(None, jsii.invoke(self, "putSelector", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplate(
            metadata=metadata, spec=spec
        )

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetEnabled")
    def reset_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnabled", []))

    @jsii.member(jsii_name="resetSelector")
    def reset_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelector", []))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="selector")
    def selector(self) -> "ApplicationSetSpecGeneratorClustersSelectorOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersSelectorOutputReference", jsii.get(self, "selector"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecGeneratorClustersTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="enabledInput")
    def enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "enabledInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorInput")
    def selector_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersSelector"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersSelector"], jsii.get(self, "selectorInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="enabled")
    def enabled(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "enabled"))

    @enabled.setter
    def enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa9f37c88302f928db0393410cf44e2105ea1c6611e2be5f4b053cd9818f2d6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enabled", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84264cde8b57b353f67e6999262c26eb94f4576bd0f08c7a77387a5f3ef837a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusters]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusters]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusters]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cf7f56c39c9ba5bc08f3e0a24d9e8b62ca11e5e94ccb26ea47a80df1fab9d61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersSelector",
    jsii_struct_bases=[],
    name_mapping={
        "match_expressions": "matchExpressions",
        "match_labels": "matchLabels",
    },
)
class ApplicationSetSpecGeneratorClustersSelector:
    def __init__(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersSelectorMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c856793268fc9b82863ea74a2b3f9545fefeb3f395eef2cf60f23e0739d8239)
            check_type(argname="argument match_expressions", value=match_expressions, expected_type=type_hints["match_expressions"])
            check_type(argname="argument match_labels", value=match_labels, expected_type=type_hints["match_labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if match_expressions is not None:
            self._values["match_expressions"] = match_expressions
        if match_labels is not None:
            self._values["match_labels"] = match_labels

    @builtins.property
    def match_expressions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersSelectorMatchExpressions"]]]:
        '''match_expressions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        '''
        result = self._values.get("match_expressions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersSelectorMatchExpressions"]]], result)

    @builtins.property
    def match_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''A map of {key,value} pairs.

        A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        result = self._values.get("match_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersSelectorMatchExpressions",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "operator": "operator", "values": "values"},
)
class ApplicationSetSpecGeneratorClustersSelectorMatchExpressions:
    def __init__(
        self,
        *,
        key: typing.Optional[builtins.str] = None,
        operator: typing.Optional[builtins.str] = None,
        values: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param key: The label key that the selector applies to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param operator: A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        :param values: An array of string values. If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c04a200d8aec4b283986d501cd304bf72f85bfc1c806a593b7de66a6e8e6bee)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument operator", value=operator, expected_type=type_hints["operator"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if key is not None:
            self._values["key"] = key
        if operator is not None:
            self._values["operator"] = operator
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def key(self) -> typing.Optional[builtins.str]:
        '''The label key that the selector applies to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def operator(self) -> typing.Optional[builtins.str]:
        '''A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        '''
        result = self._values.get("operator")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of string values.

        If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersSelectorMatchExpressions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0f92e55402ff9cb1e878e2391079cbdad10419ddb340799b8c559a9760da794)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f207978b425ad1259698eb68acd556f7b505e6c2f95838872316097f0c5017d8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3acd0e4337aa3e9271809d2ac501c2dd0bd49eb0cf251ca957665e88301180f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18db6e33810d909a608ea9238c1fb23d709386ee0a4d47c612839e98bcbdb46a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4230b25f07cc988193a779472ba66b097f813c0a908ff9d2c93c0fa9b1f76021)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc6640080d42e34a69618715a58d9f55b352bb9aef48f76ac45b007baa099b1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34ea4cbe6bc33b274022fa6ba3e3e0deeca6933d0615ee13ca856249f5e7c417)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetKey")
    def reset_key(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKey", []))

    @jsii.member(jsii_name="resetOperator")
    def reset_operator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOperator", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="operatorInput")
    def operator_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "operatorInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18f64a4a448a347bf91fde07e55377b05ba096388badee4adf39caa3c33bbe3e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="operator")
    def operator(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "operator"))

    @operator.setter
    def operator(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52ce8967f10da98b7efc1c70d1abfeaeefbb1b439273b4fa6d99a04aab870726)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "operator", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8826855a45aa609170dd549c9042db0ae086fab357dd4d620557c26a6f7e5d43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c007837d871c18c97cb244755eb6ae3bf04edee900afac3cc84548722a27605a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ad5c5f2c3cb58826fc1cd220f05f9f48a16986235c712086689abeef53de958)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMatchExpressions")
    def put_match_expressions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1aa706556b4ccc115dfa563e83b39147c916f9bfa0322b06d7c6289390c17d91)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMatchExpressions", [value]))

    @jsii.member(jsii_name="resetMatchExpressions")
    def reset_match_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchExpressions", []))

    @jsii.member(jsii_name="resetMatchLabels")
    def reset_match_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchLabels", []))

    @builtins.property
    @jsii.member(jsii_name="matchExpressions")
    def match_expressions(
        self,
    ) -> ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsList:
        return typing.cast(ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsList, jsii.get(self, "matchExpressions"))

    @builtins.property
    @jsii.member(jsii_name="matchExpressionsInput")
    def match_expressions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]], jsii.get(self, "matchExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabelsInput")
    def match_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "matchLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabels")
    def match_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "matchLabels"))

    @match_labels.setter
    def match_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f100c4eb9344e60fc54e9b1bbdb5da0a0fe6881a26f984dc113600fb992b1fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "matchLabels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersSelector]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersSelector], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersSelector],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b281875083010f98ed128ee591e312bd098a4234bbedd28ef7da903acfe01d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorClustersTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorClustersTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorClustersTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d7fc271c3d6532954df739aa82929f37f73dba3eb4c0c0f6e6a765287e87abf)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateMetadata"], result)

    @builtins.property
    def spec(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc896ed89f16289580d158d82d4338b0db09d20fb5019aa92ccd101b221065ce)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f1b3186d8638089e00b47f566f34c6a758958645d25af37eba3db7d3667fb07)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cab16af8b783f6d59a9c84757098cb267d9c08b53cdf4307bb871c8cb6f19605)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c78cf95831daffc6c3ef2c6c06a278b833ee422271726ffecad772c7bf8c7ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa9cf997b8866c94d82f74decdb0768e3c66000c80714f3dc24cb1f72aa75a45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43d21b4f5cb6a30783540f93ec94a39c4a8e73cd2928c8649c0666a1c916fd1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1478bc4e23a9acebd003522d17037463d8d553408de5a2b7bb1ffe913e41541b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60565c2c215d62ad75027ef35251aa5fbd9fc50a88841506e7d4bdd136935b47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f6854b845169d5b770786de19ea1c5d243050b46e260dab791ec1d5ccccebba)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecGeneratorClustersTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31642cbc0d361f510693bedf3999341b5b299c715898795dfae4e101b02394ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorClustersTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78e361edd06ac633945ef29c1ee04735517f0c4140707bc3b6f73cf629ed85e2)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3491b80a5e45ae5b1e9b9d7c4a6f2420247ab75b8af56c2321acb287ce3985be)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ecdc5202abe31c414cf639612e3a7472e8c54026a239c8be5fbc057077f8c1c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__619df85c839b8a6b45c39a3848bcf1aa9f0dd080991ad8c846ea9a077640c5ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f2006a21a1515e066046c5c83497fa49d981d5d9b79c180c0c0fe28f7145832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f008f931db49a7d4eecde637b2f06975024c7c8ba45060621faec5dead965f1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7268188f38f5f862e0918f869ab06e0989188f97dcc2573251285910447d4f86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3a1bf6adf7fe08c3e9f26600a1f8bcdcf8f740b73d0cdb9b807a8bce7464886)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5414a3b11b56fb3053792708161f0f5c80506db5ffe7049b952bf8f0d86b325f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ad93fcd0a5e5dda4dd0886ee87d517f664f8dda45ece11953908ce1a4f5aef2)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3c020cfff1172ef56b71ef4dd73062c8394517f6e6759ec63be4c46fd935618)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06b86631b1effbea1bea0930b68352b28f5cc85e2b32ba8a3d570075c8c42847)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07efef27759c61f464f95e0e987d79eda8050aa93a9e5b4d409fec4ea1c10253)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2431910c4c9426f22dfd7d351de2127aeb838d5ab1fbf3fb170d70345ad2a05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dea59e7e047d096a23b44cfe37d9803129e4db5846137d7f2d8582b7057ae9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02c1428591162ddbb174371dc935cec71a60f86522720644237ad018c608bc3e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85e9aea0a4b8ba93aa314ea197afcc0a81c3dec94ae518ca8ff2aaa8c42de8de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__850c35c1a42846a6686925f66fd0e1d67545853a284b5649b4b9e5697029c532)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__918aeaa709e919672cfa26754bd024de867f18dab4bec94cfce7158ade5fad70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a163584f81426794da04debe98e5d1366730344540e326a5d1c9c033176e529d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6927317a20cfb9e1a293a5b031e777bfcf73723dd232a8fbd1e612c4232470a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a55eb791cf9f985574a0ff00412fb6de6bc0c7ba3461df917bcfb9b2b830d02f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1b3dc155c403deb52c724ed27fb5745bbeb14008f3bd0cb1872eb64309bf7ee)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d1cde93ace2752b82adc7e48d3e38cb69c943479e208c3bb23271876f14a987)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b52469d07024d4a5807bc484f5beb32408fbb7877a890898a9470bbe877aa99f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26e0895b90b8e66b30ed9bfd21f1c7d7dfdf968e2bc8655b484f45bc866b233e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b85ed052e3883702e4ffaae965813d564e6e1b558e687f929b16d4350b5a26c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__472188bb055b58513ee5e03ae05fcc16dbf03275916e66964a361020c57221aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f212479867dcdc75d15b5a007d66078eae711e3bb363ee184def55cbb003c8d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7203830454f45961ea74c9a85006dc3b2591534e1308bc410100cb88ba739271)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4b3110e002514bd64e6d7cba6b2ce64f26603eac392d5d43be824bc64fa4b86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b31687c02512a08627fc431a9a6edfaf4a7a326f26977dd2a6c66063b823b29d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ac5bd773af6b9deca522849061d24ce56e668b625313f115fe1a849d224f570)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1f4393785c9d48482657ba982b99cc913a256411e3a650c826e4914bb66398d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__254f1af9b8d6e8b62421b519e5a4c414d5c81cc432f5b3004876a4038d343dff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28466beff9ddc31dbfd10170a511120d184e73d98f476d3dbd775f85ad22eb56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0817b8818e4da3307d7fb74b4cfeebb95876e6fddb21dc5fc3e0aaf259a7d32d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorClustersTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e32742f4c2f6d6d7e85055bc0008e0045a35ce85a233633e0bfa785d4a44be0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b2384eb8505838e8d32d28d45b5fcde3dc40d98027d6f9f1ccb60266a00dca9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e2cc54b713c2ce5da4eb60d4606c0d6027b80c522a7878a33485dc240af3694)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77ab5d44dc515392c5f278dd3af7c7948a7e13931b76912d907ec7beecf07c8)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3d86b41cb312c007ba40c52190e1f71b441cdf9a8b5f8a605b068965f43e881)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a5e487951d0b8ce0326b6991cefaf5899a3b9f423d64f63bd44b0fd381d33dd)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__123d8201875cb4ab0bda1bb801af2a90acf86cb60e85b43f8399ad891d94494c)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad9b574b85c293a775f7339f8748180dedbc6ace21a25c17998b579d43388092)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__023980a85c0a3c42ef2bb55944e6460102670007086f3586f6de34915f5abe7c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6982b1a44afbbe5232f902d07c33c6921125e57545fdbda9db5a0d81db602d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3e925270517b8f299506aaef26d725fc70110afeed0477a13fb2c1bc1d556c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdddf8801f7ae2ff33972df0a227928f9704424d5723604b1a7a6dd9c831cda9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8083cc797de1e6513ec6a50e4a5aa53b3243cc9f143e132cf17ce3908f7f74f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c4b82649dd95cdb0cd0939c66c969a45dbb0bfc6eb36592d1b280b5d4e58257)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea18320ee6af3f5b07e8316af27ae90faed3ec00acc3151a96c82340d2f489aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faafae9cad0246d07f64d12846cd55da8383ba9d2c7cde739dadcc00c3e48595)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7238d7886ef06132ece26cd5e4e43f4afa16863bac4fb6e9142e09eb68d0fa4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77c9165f823ad668ea21393299d0e9d5771f149140c1d48cfd469176146257b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f5b924024a2fe2fb61789b1dbfb2dfc6348df982a48ab1d74aacf7fca91c559)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db672a325b848b87d3250d59c3ce596e4247d08e8a08e3981da0be58429156df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45962963b18442e4b646dff625b177bd95bbea155250732ba9a58342e3419105)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__168ed651030dc42c1d07bd1d6126c57c6122e0b0c30c4037774d885693d1d191)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d95792e78418cbb8a0c5b925449f4da45a559b0b6c5029d200d289fc0f8b4b2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2ee86cc6a1de2044cb69f72c94ed614b18ee0956502ba725f0499683d761148)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__674c65a784cc0c52f26bc07e08638069b2eaf8c26f448ce9eb7c60d8b2d42b2c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70f152ace30ba20dbf6cb8ee2f25a24fca1f339a34593077ceb102c79b7caf8b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2505d87551bc8a253ec2a7d77a4bc92ead830c74fcb5f5140910b49f9e1d3e2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10518511fa508739b5efa636824c5291c557acd580e7b6d3dede6d9c6c2ae2cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fa2c26eae143af38ba51abb4952cdbc7e39fec27d50a0230e78cb20b3889b3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23b86a321b32b92fd469efa21bc7d42934764189148a77a7ef1f489aec4d30f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cf517506a57fe7d2b54ae43fef1a62f4dd65da335c2a5a930b6881378c3452a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b134ac43576755e6accf2b34851132a345b308f4c75ecd62caa5afc279103b1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d13d99fadc58ea28ea252cf4ff6f46fb1eb321aa3b6a006a3ec09b0d8836d2ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77d69ef6d9c553de9f19d837e279dc8f65f08dddf7407c8eaa859965beb53ab7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e48259d1f7583b0d5f8a19708fe55a946c5d674b4c368e649600e455c0faa2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab72a1acc81ed749ae2f63625f64c3db092abc4a2abeb96e63d31cc699c61221)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a29527dc7aec99ad8f9f195fe71f2ecccbf6a47e73527f2b4f97b7596b6d505)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2115ed35b46930ef2e1f43310d4f83704f099ddca0136bdbbbedb8ae22bc4837)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2a428e1304805f002e44d3a9efbac2e159094bd0c9b0acdb9152e6d25116793)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5dc4ff595eb9ca936face0acfba663a36cabe5c524b6ede6739ca09a2459a5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d733658ce57f5370c4492082271231f02edfb7cdbabaa5dfb28d64a236a7a077)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__179da913b4aeeab082a2112a9c9c0c749e08d82c41023bad35182a64525147c7)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cf33e4d27826ba7716430b24179403839f48593ba44007d20de25a1d996ccbc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97906841fe4681cd51d80adf7b70317f55eb6369540974bbd93e267f6e9bd30c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e201d756a17abc9c7720192fd8effbd86dabbc016b64ffb05e166513dbc8f0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd47cfbc2737ccaf8b6a89feb2570ca7c11237452fc8877fc8380f74ab109765)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__615eaac752d76041ed811c379299036fa9dd631c31e48b4ad520fcd0206550fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f97ab78e33c0c96eb0fcc971cdf501e6cb2bbe0646471d4461cdb03bfcda5148)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f87b41b184ed22d95b76c75fa9f0f0ff74ee423bd2d666284e055ed9ddfe7766)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d82efdb23a6af198b38d50f3f845816869b3ea700dc3df62f20b126422afef5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b0604dab2c6783b05cac2e75970007dacbcb734a66cad447fc8466e5fe9d8af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cbc4ee6544dc024eb52f913c335a968a8d2d6dcaf81b7f977c07d3b85d2bfe9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7721b0832d06b7d46a829812eacf4320eaa71b9715246b835c8efe1fb3d5383a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__345afd2a0c2fb5db340fa14f0f3e6cc8b017081883330b37586e2373281df8c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__584fa98dfabb152cbdb5d2a0e36d4406a2c6bd7c815aaeaa1000d3dbb2c3ee47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b97892242a503a1f21ea541c9e5066086cc015c79a37f034b1ee922e29e16b42)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1129cbcc80a721ecbdc0739a342d5eb235cb18954a21d6649bbf683da41165db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4019bb30ac104e14e9d491e395b6bd9005037a147d388d84f4ebc9fadda941b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a2e33008e4784f6a240a899ce3fc288d9ea28c868acdd02ed7eb3e70ab83de4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9af13b15207710aa060f3af5127533c941756f9616569af4f8eae08f016b59a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89e3df03d9a653c714c8b3c271d82a28a34a4ed98a765437671e0f99dcbf71a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b3584c8fc8c824ecd0556bc335d4f769ccd6dd2eaa17c26d2ed079f68ebd253)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d48635012384a742478783f547d06de9346c0c1b703a3f8ee595715b7950a18b)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62ffc1aa2bcba6a79a555eb798de79ff05c205b28cf8a7cf13dcc3468e0eb07d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__505b890624ba44e2e9de22b01cdf5ade5e5ae199becc3097eba1c4a223e406cd)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7415390e249815e12ac1dd76a9794d6e5b6dce8ecaacda2309a33cf0bb0a818d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e02b351c6269dd77484831deae0abb0c10f630d536731da170fc8e881d9d6f24)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a729a93d5cc41fb6fd65c821b1a5b1f2b3b59fbd2e61ea819dfa2203cc15afe7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__addfa95d5fc90adcd5d75eb80ce89504b760c1d6658cda8f1915fb03ea0c423f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a2d6e06a231a1d66034928ad7e273d088c08f3c6378159f4ebb76f1428cfdda)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2af6e2b6130870c7c53652da89745f6a4bd4ac4265afb18707413311410612a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d96eb1d4548d7c0791e4ba8519033cbddd2536884ef65d290a877cd28358b5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1149692fea49cd9ab8f4f5b8d5ee241a3deee13f1690ce72b6b1992c7349e4a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a5eae0033294d971930c76e3148bf27cfbbb5cf47c05a8423ca3859223ad08d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b5a79374b72d5b84cf49bbcf37bc8ec471a1f188c260c4ed89792bd7d45254f)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45084c9d03b3a5c40e40df679bdcd0519cf5fae94b961fff8b7d5a52a1aebf11)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a3a0d6a760066ecfee566228391b157a1d41c6713339c914c5062d9998e656e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4b7a0411049064b2934924d8e226e8c1861df8c34a5f453629a5d4b8c93758d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f40e24cfbdf7fa5344b058d7db9988942a2c702f4f1ad81cd0d9bd1a784a48a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a107a980db9ef935cc2962b2b324ee82d10b5d09d0a65344715c2df86f97cdf7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6928e0313e43a40d7bd00cc05fe2312c576630db6dbeadc51774c9fbc717f2b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aff4d457052392f7e0bcd37746bbb71403469953a85edf11a81453a2abdec705)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e4c6608a8c5ce0e0371c9e57538dd3f7b557ab2a20d8d2c4858df637b852f0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02f193007ba75416250530f322577bf536f97c5bb6dbfaeade49b45c5bdb6ee6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__209933d3060386b1277fa4c56656ab5cfea31f097fc4b01f8baa16ec0d2214c8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6c04a94f966599aaf0901e154d1df02c43206147025fe974bc1c4a5731d04f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5c02632716dcefc781989cc7f21179ce2365be94e5b1ce5f4f478a440cc28db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94e0b01a53883b55b44b64a294e1ee1bd792759aae63d65480bd825984f4b999)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__899d337e3ae3053ca4e002569b87fdd40b49d2854e67b710dd5f3bf7f6355726)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b037a9e8ac1af4a3327edb3c455ff34276b113a2dec6e07b0b8611dac001cb74)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4bf2e2311327036beabd3e3f577bdce4562139af2da053e588426e1a2bd7367)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f4052bcb2c001ef02435b1820c309ac121ccd9c247387553d5bd4e01e66d3fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5480d256671f1080dbc2446d383cbee067198fb9c0f17105de6fe9254b8ab61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e3d151c21fbd04a299c323f897cb1a8cca94c067f899f7914b06ae36c935b7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae1e5cf190c41c55733a406f9213579c597d7d83afa34d6064df5e4c2d6375a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__358b3c40910fa4375c79eb43efe620445634381cae69d32696454f4893cf453e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ffdf9965117df9eeebbcf1701ac91e1b257c0603fd8d8e98fc147108b1326d0)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a0054579afca29c19f1b29bff51fd4b47bb7f6065a7056500e0803087c49ce9)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c19ce20f20f7b693d6217134ea0d5186219db5f33737d75ff12e43be109a84e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c5cdac0a0692005419eed9b531a9b12fb3a61df6f4088cc48b9147685f37e90)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc1d4f128b74cde134ee5b778b595321db88600ef5f3e2e813b689d6a38fd125)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7dcac4aa8784caff9538123e664880aaac5c8e3272122591f80ea5278cc32dec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e734d584b8de0d0bbec5d08beba76c56de27ef6c769c1fba742f61596cf015b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17d4c0601c9c494397c93aa111a6bd2f69f381d1704173d641a4e72077c636f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72a70075eff613d642055f1e20da210336ec5fbf10d5910707142e0a82c26140)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7fa947ae8b8e480b2b394f57654a37d024296d57ad9904eea2dc1f95394a615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6addd91d63cda921d191f72b4ceffe91d81a78751174252f4c2bb33c79da75a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03ced5b5d6745ebbd27996fe5294b4397ad813565e9578878ff6e3e3f4bda24a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3702d8f9eb00b12a5667d427ad0032b21c471a4cb19f5214a9c55b8e783223e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c0007629d8d11b04aeea14b8373bf10cf1b3db1b0566420b5fcaadacd2191ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__276257e1d76fb19e7657a1fcdd65c8ff96e5f33f77de6f1259d1ee8b5ed4b807)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__835f01c25f7719bd89b3704dec2eeb4b064e823e532d0c9cfa2fa9afbf7af973)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0c7b32f55bc552fb1ca76eb8740f41bbc57aa4757b243a377f4659772328aa1)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84141babbe4612589d17a3639dcb754dd3ba995efbf18998c7120873407d1c89)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7148c71c4ceeec36859dd99447f21da01c7beab1c5894004c267cf2af0572d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d7884a59de898092acc8c08df26bfb83c444761d976018aea1e722e0485138a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79315c1ce102626c9a76b6cd69646307855a2704b1939efe1cd5db103a69fddb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a58d64a675f242cc440d4fd37459e538942010764579bccd3f29b2cb8227e80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4a9527e2e7a7cc037330f6d57865d479ac64c412eba508ce4461aa8110d3ce8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bae1356e395848aea2a043703b5f39e3de17ee853553550c82860b208afb8599)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c8e5cdd36dbd37a7b72755e0fe3ed1d424a2ba30e237d5f014c08fcf695afc6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02b8ec66d5e4a90b7b32a888b5497b6e25bed42bb721765d35191c4424e52abf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fbee24019a16b1dc94bc4ab5f3114cd966c2b74f2e9e35daccbaa43cb3689fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7dc3505c35f2e6adea95807a842140102508b33f8d0e0e74b96e10c290a9df66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d5d84b139a08d87dc764a2911815384e5ee17f7cc77c1115f74712cfc4acc08)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3f55d6b3ddfa046497342acd079ce148868513ec64a1c2303b793182d0b467f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07f868e122b173ff411568dba3e12d2e9b2bfb0007ce0846afc711f03d68a41c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27c5d42ad21621a563d95b94a8616b9d86f42a768d8c1fb268d98908896e2e87)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e66a25417652dd79c77545d7ff71627f801c4977ba3a7382adb32346b6fe32be)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a255d9f563dee144ee7954a90ac7e006497013ce77717cba5d60973fc8e8fb8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4064405c7abc46db37f4cd89cea38d11584767ef71ee6a2d4b1da8748bc16406)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffaea07da3a571236724f61acfa87af0b373d77e0c77da08f7ffad6fd3981a1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca84493d58266535d382932a47ba6d56dcf1a032553b36d79d061c3966382574)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31688538190aa81067b3a18a9b6e196021b7da87175e4b81ba51499e74322ccf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__686012fea61ea0ae330dd3809f37b2ad7a8af18f082ce0baecb19349c9aa54de)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d991b6ef259a226e6aacf4ac9c702be683b3f419a383578927cafeb7e4d3c936)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2f5b84bdeaaeb1dce1f94df9d62b31379761b02e21feef7afdcdb5ef159bae7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGit",
    jsii_struct_bases=[],
    name_mapping={
        "repo_url": "repoUrl",
        "directory": "directory",
        "file": "file",
        "revision": "revision",
        "template": "template",
    },
)
class ApplicationSetSpecGeneratorGit:
    def __init__(
        self,
        *,
        repo_url: builtins.str,
        directory: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitDirectory", typing.Dict[builtins.str, typing.Any]]]]] = None,
        file: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitFile", typing.Dict[builtins.str, typing.Any]]]]] = None,
        revision: typing.Optional[builtins.str] = None,
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param repo_url: URL to the repository to use. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param file: file block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file ApplicationSet#file}
        :param revision: Revision of the source repository to use. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision ApplicationSet#revision}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorGitTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12652b66b0a199e4f7f1532a00f3de80ded425e7b02c5218cdd9e263f8134982)
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument file", value=file, expected_type=type_hints["file"])
            check_type(argname="argument revision", value=revision, expected_type=type_hints["revision"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "repo_url": repo_url,
        }
        if directory is not None:
            self._values["directory"] = directory
        if file is not None:
            self._values["file"] = file
        if revision is not None:
            self._values["revision"] = revision
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def repo_url(self) -> builtins.str:
        '''URL to the repository to use.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        assert result is not None, "Required property 'repo_url' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitDirectory"]]]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitDirectory"]]], result)

    @builtins.property
    def file(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitFile"]]]:
        '''file block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file ApplicationSet#file}
        '''
        result = self._values.get("file")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitFile"]]], result)

    @builtins.property
    def revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source repository to use.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision ApplicationSet#revision}
        '''
        result = self._values.get("revision")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def template(self) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGit(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitDirectory",
    jsii_struct_bases=[],
    name_mapping={"path": "path", "exclude": "exclude"},
)
class ApplicationSetSpecGeneratorGitDirectory:
    def __init__(
        self,
        *,
        path: builtins.str,
        exclude: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param path: Path in the repository. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param exclude: Flag indicating whether or not the directory should be excluded when templating. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5856fe9edb0cae60845aebcc6ae0040f095633b2f5cc61ae1e5016113dc1e821)
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "path": path,
        }
        if exclude is not None:
            self._values["exclude"] = exclude

    @builtins.property
    def path(self) -> builtins.str:
        '''Path in the repository.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def exclude(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Flag indicating whether or not the directory should be excluded when templating.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitDirectoryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitDirectoryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1df7f105391c7673ad6697629afaed96ddafb22e68c2dffffec862f95c770161)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitDirectoryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1c64c7e909b51efe45312326db9a9942a81e862f23b77e7563c85fc49cfb4af)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitDirectoryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f690020751ed019ba13a6b809eddc98beec6933e9391153b9f5d007d4ec6f8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e65f6c982834b476d8eef2460bbbd0eb46f2650e0c1c6730c3e2af5d6d642d94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e84f47420b030bced9201d614fbaa2440ff60cd0690a85d55e72a61e8d49a91)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec0874863cb0cb9b670481b1d3a994a1c97bbdd6158ad46ce4ce7c92cdc692ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99871452a13d2340e53b8313089f2a30c41cc13d54aad289e8d3d159a3d846ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f0b0989436bc54e9d6ea4ac57fcd59353d82e6627bf16b251e384f2627f03df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68ed32dfc632a69d78cc9fc657b4e4b52608f057a5a9b75b6631571d1f1439f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitDirectory]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitDirectory]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitDirectory]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bbea883c7179af70d2b0f317e243ad7b5d62759e4a3ce845de8fc0cca71f99c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitFile",
    jsii_struct_bases=[],
    name_mapping={"path": "path"},
)
class ApplicationSetSpecGeneratorGitFile:
    def __init__(self, *, path: builtins.str) -> None:
        '''
        :param path: Path to the file in the repository. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6cde93f5417cb589819a45ac38c99c6862046d5f0608143740c34f9261871059)
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "path": path,
        }

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file in the repository.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitFile(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitFileList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitFileList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d655d4fa68dc9baac9e971a0879838180919763524360de15aad3f2ee87c7aa8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitFileOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b5307dad38be1803f0f3c85ea4abd6ac7a5aacadd3c4e174ac75c1670f8348e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitFileOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1a87c24479f8bb316c01816bdd2934089533ec87b4dbffbd25b1710756c50cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bebd32750b7dc74aa39ed887914e96a418ea64c8017ac16ef56c880cb13eee4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d186b9bd30feaa09fb340ac9843decd32cac3a2d5dcfb223b659c4e41dc9d88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf1c72bf705094742d4e279dda1480aab7b2a1d2aeef3088ced9992cd37112c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitFileOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitFileOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__715e256599660dd41fd8c893c05befb862f43bc9658aef9f3994426eb93ae3da)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__093e2c5669e63634a77a8f01a6ccf68be90ea295ebb2e1e08456ddd4c3986483)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitFile]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitFile]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitFile]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2bec4694b88d90fab4110694e7f8c0c73cf0d0d3d614af210c1d5cddf297973)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be2509f0e163ff14732b27037615574dd78f049f9a20fbf442f14cd755fa5d83)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d61ba5dacb92b1c2773b384ebdcc669e36d3474e14ed12b2bb84c1eadff30576)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f99f5a8581df4d6acc4bc9e53a6e69a7ad263b6ec20f4132b90e090f4b9c5f07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a344d82d9d1f6af9f284a391464322510a6c7f85fe557d754a64201f49637712)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d549803a11c514564aa4ab5bb2ff37460348dc4a8a33193c2c60d943403bfdf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c04cfbf2f596e9457b9b4aa5814992ad35242c203342ea1f38469a6f7ea73c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__857de6e319225c2fa08bf8818bc06145ce3c28be8a64b21d910e4cb40e9e4d2a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitDirectory, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c14f635b38ae141c3816dfda473b403f108abaeae8a25b904772591fba095b25)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putFile")
    def put_file(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitFile, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fa4db7b6c250bf013b1d8fdf959cfd4f5cd7d90b10cfe5f3fa60a2cec51899f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFile", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorGitTemplate(metadata=metadata, spec=spec)

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetFile")
    def reset_file(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFile", []))

    @jsii.member(jsii_name="resetRevision")
    def reset_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevision", []))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(self) -> ApplicationSetSpecGeneratorGitDirectoryList:
        return typing.cast(ApplicationSetSpecGeneratorGitDirectoryList, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="file")
    def file(self) -> ApplicationSetSpecGeneratorGitFileList:
        return typing.cast(ApplicationSetSpecGeneratorGitFileList, jsii.get(self, "file"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecGeneratorGitTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="fileInput")
    def file_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]], jsii.get(self, "fileInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionInput")
    def revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "revisionInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ad43e60fb8bd082062813a71038a4fe087960d25ac47d6274f9aa8acdc8d672)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="revision")
    def revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "revision"))

    @revision.setter
    def revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76c68551bd573caf8453a8e30a48652e0388e7066b337b3db1039a3f5739733b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGit]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGit]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGit]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba840d205aad9107c0f42faca5804303b3bce56350374418657ce05ed887f26d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorGitTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorGitTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorGitTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17bf7d9c2d5272b6fb6e47bdf5fe38ac693e617e8949c9db6fcca230dabe3d5f)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateMetadata"], result)

    @builtins.property
    def spec(self) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorGitTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91f3d0c05aafaf495fcedc1ee49d04e09be8948df08fa35389f9ada3465680a0)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b059aa69c861196dc8fea19d0c6f1afcf62419365418981ff0826624a70c021)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6aac6be07ae780dff83d63880d7677401ffb56b4119a6f203fae259bc125d548)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2245b6183d9a0cf9549f135dda759dc078ded35846edc0cfc3b8e42105af8c43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb28b4cc1f2b2368979c8ca96b60cfcf9a0325a8f2e7052d35c3df445d550d6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5ab6d47218e7e4d0ecd07a40da5622595d2b93c431354404108b681c83ce4e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a77bdb7fbc4c7afcf79e424fa3fa9dbd868ed258da0010f85547fe788c66b29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26570ad7e631532e3b09340a277c437ae1ccb02c0b4a657ec9ff4fcd89336574)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5beaa7fc142827edab56ece874bc98fa30139a73699ae664f80ed09c5e53b283)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(self) -> ApplicationSetSpecGeneratorGitTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecGeneratorGitTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c9ff374859ccc0d9d2643717a1df11b55090d968f398d31506dbbb2bfa5c473)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorGitTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ec0e2a1eb54c432c5ef1b32dd3be2d46685d1ee3fef4061af957981965a883d)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a75fad09c098c5dd36d8f1c798cd17f07d744a250e677c2158b141a9997fcd72)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21fb41821bcd83897606047de112722eb84bc295407f78433cc020eb5d807d5d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4efef313c23568bfea41998dacfeec89ff175dc7ddcfd326892436075e0b96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__494b7f90f504d995be2a32f6d949e9c0cd8861cf44113eb2938edc56b40b4c2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9a22196df012e8533ea726cd547f14b5aa8430d9e1fd5c18e1711f1f5c3632a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1b034d8278625598134957ad6237892468cf72bd74e0c01a226d5de63ccbc15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8bc21ea2773ad9325305488025fef59b3fa8c0829a997e4adbe44bafdb2d370)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7d4395299920450822dbeb5348ffc7b3ff34b0e29f9d87bb980ecd71c4af237)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98d1da2d16f5c4e4cb9da2dec001af1134362e5f9b98c02cecc386bf0e4ed474)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95230dbed2ccf591198e305adeda943b3ab8b9594b5832341515035ffde693cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbf80e24fa406efc374464e08cb2ec6b46b6c491e9a305518e366568abb0be03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cadf59b5ab0c8417eda1cac7694a38733794a9f846f998be0ea5cec48f40b60)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__caa77905da91b4c46854599c1f66a0ae05cd16773a9972c5a7ab1ee8a40c4455)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab4c410c056ff70e687623b0bda17194361cf8d4acc17a597dfdabe2d92b377d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__baf088d720aaae45d341736b3af82816e4d175ab98079cf2308f85caedf6908d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff8a87f73eb0eac9a525a8ca429a19be8b5ed6a837653403929a99f5574f971d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__777f382e817377094f38b0f32cb99a221e83ae06554e33fc679bb7f48a575176)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c112a273a30dd2a78d84c567ee7ce07853053458e9f00afe0bb5055f9b41b1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1909d22d44c16b182032eafa5c43ec7581ea69423eaa60395cc7815349e0e9a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d923cee9344524ab39fa56e851992c967ea4b8a740ef8dc4810e4d35bda253e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c5b2341d279a31fdae408378f0fe7b41ef95e65d6a75ecb74f19de8426a9dac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ebb986c0c1f9d2c1ef287631bf0184ae983bfb1a9e4e06f49dc0e8302f23b59)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8af9411b33dcbc2ccd7e5e691d2a9daf11f9d63eaa7510b5d0af0e580856d2e1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1412862ae17e30a0f83f2e60c676491085fba38548d9236ac310a3dee0789668)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bdafc5a4b87fa35aac52d423d7d269bd7a441ce98daa307c9f4c006daabbc9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c87b530af0747c2292e3c99defe233b80fb5d3dd04deb5e7ee84a33918d9b19e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de709123f1a218f48b16c342ed9b8dcc57258038ed6e2062a9e81a4302e5dcd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7d48c985b0bb2f1a9a6ea0f5b3c504d0e1f985a99f73ca7f413454d1e20af10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4a478117d9a5289ed84f1dd4f44e1f45220821f9299b45abdeb79c7ecf42735)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55b2642d21983e45b90cd9a104bf97c11e58e4186d37fc9c0cca1d31c8721fe7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81fd11064e80d7f67855e34d7007ab737a441554d1252e8e913fff1d50593cdf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1375d3c1b1d95399ab4e7f85bf837cfec15b2fc607ca334fcff7a48b48f3118b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11a505492f4b5a3f7895fb6adc499e4fef886bc86b4290d5293e77506282acba)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1742080c4e54d693cf72e9b58a15fdc65dac745b4c60b394f376efda52dc229b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02cbcefcb59af51424b550f896bbf8ff964c7fa0ac24658e26d5c8b0eeceb9ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0ad303187e87d3f31204668afa452ddc5f245be28f805e33ece9847ab22003c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorGitTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0a9b3a41eefe1debffe8ec9aad10b83e465969caf404a5eafffc9815fdb0bc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4efd83e0e6c1c07030ad5bcde1047792c370695e296557e36d2e76e0d9ab489)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cdf22bbe811022917b413470bed27e5e6a39689f3d07e5a2daa0b49c342ab36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16f9023246df7f0443fcd0d47c06a980a07c94b9fb4049ec51bf6664043d3145)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33d02e8d62fe3e2e79d1ee9083832fa34b293010cd8589b8ff0b03881cbac7b3)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0db7e45021c26493223f5352b0315d16927411dc80ea9c78f12f3eaae62da171)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f85c4410ba98f23f8a085a11b727d51305c9fd86d9073e97f0feefd590c4ee1e)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30e84da2233dd03fd0e127dcef5a43c843c61f4b1892cb0f5640d1f6be6b3a2b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__205a88df6d568e3fd16ba4ee9a54559dd31ee0cbe38552b9881b65d29dbb1728)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de444f2825052deb526306187813df8d805681735e42c2bed52a5e9ee840a7b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41368d5ebb291bd5c605de8cbf2d77194141ee5fccddcf78bdcc01c5cc7ce394)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__980d75c9bf38468d37cbc21646169e7556dad8859d6d5b62085773b6ad347068)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc6f92c1abe5506ad582c2bb044ea7e49116b4a2d6310fccb2da5793196e8dbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__343de0752b1e73e091342015affc90719d3bc20b90310e2125125e1d85b58471)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97a1b2b4a5139060990555281c7a0e3df1890b75f8a7488a3ca186ac98f6a1e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__100ad5809687a97e02f40fb0b1d511088c301e7f5a047bf1bbc25d1566150fcd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2385a3ca8d2cc2cd3fb8cd9e34cc1cf3201354c5912523ce547987caddf7ee6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fef9cd4a90e2598b9770f2257299fb8b974444cdd2033739a267f280e3d3adac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__877b49eb909a3bac472a8bd56d362423a112eea583a9ae3eb14237581fcd26ae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5257a203b470226f1b5229adc19fa91752ae1fbac3975ca018900e8fbcd36005)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64fca80a373f30b1d74492aee45deebfba56a114b9891fedd0e1a43bb08cbd65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c91141294748263342248a4ffcdfc8ac6a1572c4dddf15b6c0fa6df086ec7153)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e977c261cdd3c0135dac79b503bab1bc520896896279daf3e8158772503ee7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c0af246a892f0bf46147467054d3c501a1d0e1d34928ce80c600a1959e4967c)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9defd13ea746077865901bb6ff0f634afcdf6926febc556cc3893443119b04ce)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__197767d1783eb6deda76288d74b717a99bf1b42fdc1aba5186abf289e2bf4f38)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__750d827617eb46adb6a01b1b44ada3c0248446648609541de46e47472016e00c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1d313792d6e052ea4710b1c6bc0cc5da6555d8f1fcf185fc0a064d6b60f813d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0d5b36c9234a9ca09e4efd6f69e3b4521d2b0fda6749f4ee2f260ddf10be44a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29fe53d3fbbed0271621e289ed02d0f498763d79c56e72ea4209a0251cb5091a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e81a68fb3e175efb5a353722808a129e879d4b3a9d2594111ba53d0f189c67b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98b892bcbc31c9bf0e402d1d959588be8ed8f3ab607173bc01194d875c696bda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6133aef69836252559698955327e80d3788b86a4bbc7b80d06d6c81c322a3740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4b5a72d32e321963dc39bfd4fb7e348733352b19f1680e5b8c5c5b0ffbbe83)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07f42562535d1d1b5afca83feed05666cb4e0d10a95a723e2983acfa090b97e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4d55e5e9f6a2ae1caea8cc14e67d70686894d3f98e45317898ad87b3567e8d1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7def8f1639ad81002f872b1c9211a6cbbaf0dda66fd3218dc275ea3c87871707)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be604716e92d82da6ca2a7eb0e0ed518750b6432d7e0c6d1cabca1cab7ec050e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__809357c6bc7c64003bc30d2a00f676212f80c3293dd0abd5cbdd669c152ddb86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__643fc2682312f7fb7f5cf7292c38f1ee49eda5cd57a5bbc68d0da1813922f5b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3774343723a5b27a23d1faded7ee0bce5d21f1e8ff80747c02a081a2436130e)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30629b46995d256efd60279b7828c7787d215804b9f24e3086ba02bdf21ad20c)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9238a199a823de6316db14d0d6bba0fd065c67812c806c037b740c310bd4a99)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4de30f4ed5c40f708b13cb8dff9f5c5e9195ffe2f88ec7c3ed077f55b7e99b34)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa45908bbea00b2f05eaa1299593993c17f72bcc7aff87f6e2bbe32dab6687d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63d9dbf962898833b5367afd9b40aecf9a0b3e10e39a65b5881cd31d61bea312)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__895064ed6163beb6f6c8273c0468e0b56c7e1a27bad08570aa1ff46a87ec172b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5020e31059a7fd4ef388518e6d962e96065c5749dba2f8e7a9ab69ced15342eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b8a37d70340270fa9a6639e385b96f722948155f09908b62291573f2138e401)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__071b375c7b57d4314edce44b153e4a8837a480d69d9cbe2b8dbb1148fb7cd087)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9b76033a4ccda9c906eddc287bd49231bf7dc6f2b333d00dacaa197a2d116d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4fa23d5ff910de2d87693f4f34c498bd0196aa0bd9545328318c5cd9ee8b2c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64e1ae05efcdb0a33d58831c56c5ce5c8d56278b1e799609dee188f0bc9fe37b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d98bcaf49d23b5bd64f795d3cceb562e2d034d9f8033d352028749bac7a3265e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e073b0b2f249d28124a2c4305c1a83346a8485d93851e0b52d879572c3ed7b5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96db0fe87452e43e56242b5904d35683b46799eec28a7e0e685094b2659bb452)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__361ee8fe6f223d69f22af616c832088038536d3c7c154d944f7b4471aedfefa5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84d37e00cc636189f99d86e4a58e0099b42ba94f07e47c93313ad86b59ad1a27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e4534d537318780e3c20e08c83afe55c575df3c76e71e872498e74e1408835d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__698ccb53020b82ffbac31697e0e5c6f19688b45826cce521afc99d6efa3412fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__080357e7677fe685a6345bc69893301b7a504a299fab0bede123db46eaea6da4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32e6cf79c08989131016002a67da1c1e67702bcd84a861a88a3ba8bb80c8461c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7857f55a121bcbea5d4fe0e7dd01901098774f048db4e4f6df04d937636cda28)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18bb79d04a12ba7ce04659c0540b115424dd03ea0c6d28fbc7d0c66ba87ca1b3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f77480d951c985f2afaf9e8f35d7549c6d3bb255eb0cb29fc02dba75099a09af)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b7ced732fd6d6a9ac0d08bb041c704fc864eac1b8d4c38fbf0279ef1ce44af6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed7ba8ffdcee7c58353d775a0772d670263cbfde08d533033a3dee7bbbf3f9b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e2d4eff50ed855d30e4192fd83557717ffe0166751e9ba48e44d6a327b4dbbe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4a4894fb9725bfd3636d9a72d3fd796fd9e1f9dddd643ca0bf2d39ca63039af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b21401e43e541445758b14507091fc389410b63b2d8f51935eaee4549f6e840)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f676b5d24cc39a7150e52c486e4e032f37219ec7a25b1921dd6f4b5b16f7f15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3becc314fde52c1e3ee14ed28aa61a25f02c40e34c4f6c65a476966086ed099c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b5f3bff0e78cc0ead4aecd8538a5d51fe0add33366af7dfdcdab04bbab3d34a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46c3979a526d02e11265fa660fcf44f8c324ec3c98bbd1e1536c0c221fedf362)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53dc5361d9b24fb9cf186866da67bae0bcf5a41c3fb67116a2fe3cca361d2345)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24a84328456ee949fab9506d839e2bddbd012064e00c046cc2e0041ba9eca17c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__425e8db6c72136536d2ebace0f52a3a789427608e303bc345d6bd8bcb3f0c1e6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd4041e6a9de59ec46de8023635dc604b9a7bf894999569ced01e444fbe52d03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5d94df4ecb1b746b9aed07832e4b783388b67b5a2473f9697ad235b68a48dbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83d9fbf9b675eb0063dd4288d98be34505184a484ad853fec46581e3eb826929)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f39cb25f0312a1d7681fbda84197e198b65166cd9ba04c7e3623c6f45f231f52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d1217c1ce9e38054b431d098a2647e6f7263d4cfa3a6605de0f57ba6d2bacb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f87084f95ff953a3b5728bcc0f2e29a8de1ad924c378c39076dcb6993c968558)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18b9aeb0934a5d3fa13b3b47714818fcff407f520f8f2f14e9531efbac6c638b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e69b18d04d9d458290aaa5df332d77ee626094556ee8698df8c03a12e4e61113)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e527d714d2e185598f23ecf87bedbae807da14317a4b52a1ba9516c0caeed338)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__210bc51946f0a1d1266846b5986c363e3a94205030e1f29b40aca6007f38cc59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42426700c701be0423a1e64bae693f21c6085dfe3e563caa1dbada7d397d60fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c0c90a12fe423b88784e9eb2d1885f76a49c6d660f59af89d867bf7782c3d58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bbd14116972bcf5f7b06318fbbb88687fa76aa888a35feafa888a89bce8df7e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8738bbd3ddba50a6634443cd86f44fc5490997555593e0de1547495e710a0e7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50f0257cfd68940750eb3158979b6405c861e74db3e1e6b507aa0c05354ba60f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a23d52fc26c0f67fd26ff7c0d8962095dc3fb86abe6a13a168c055a8baf158aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35e9b4a0faf2f59c66d3b6ef9d3673ddf81f6d767873b858bba31229bbb7982a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99fcee1da6646a715f3f04a7937e887727985aae23dbfb50a3f4c1990617e362)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6184f749920717320adf1e75130dde523676ac2a2a3887e791ba0aa200bc7f0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ec5928567b7e5e176edf1a0909805809cb7afb4cd771176114ce5b5270f0a9f)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a98fd47b32e671c89f00bf6fd93c4a308a7d2fb637b2b64c48b3ca9ce5499161)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03d123c903a84fbe75769b22e75908f32b1329539be516ea134cb00c764fc22e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fda299eeb77407c405bc49db9a4cf403185f7a1d01ab7723512aa287d98fa686)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a70e9f11b7e3c8aea6e20f3fa558b0261ccc783f837a442ece7965ebf29e6a03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__591b105bd9854edf59675e1116912620e861ef3f3233eb0c384298e159eb71de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__129177779885a0badff413fadee733c64456f1f7c74aa6bdf3afd24ee291c0ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c643c9b37b5bacadd26d81444424b7588912603f569536a6238b2db25f56b34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f6cd99e727263e0b32eeaf10cc8697ec29ee721e3d46189f4429a67707ed80b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e74ea765930eaace13a5a192f563c26b0ba66df84dff9bac98000a949135c3c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fc3d9b35163c1a10621a162334284109c51c09579b5bd618918d0e044d58697)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7641be87be1691519355e2f545a9a6c4ba56896cf851e8da50f9b4f7667a0d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3bfc8400bb87e3c11aff3d45493e5d55baf70a91701bb94f9a0ea6e47a1285b7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16ddfacd9f5ece7ef94f68ec2b992342dd0d8050d1c9a5296184ea86dd186780)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c82935de15aea957b1e50cd508a00ce6c5e04aaa230cb3b247b177b703daa41)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb8cb7cc50bfb0a4480ee703c2f00b842c7cbd6df4b2ce474c35f2df1497e95c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e46636d1d283abccd49ae63a7504a19ed8645d8df99028dbd1fc68852da65af4)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72c0899e1617634b772a39f1eda431140fcb797a407bb51ee24ff56f851ea7fa)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23ab5ba26d2de0afb58f22b1b69225ffd7d44b9e7cb947ca6d557ff35b88ff53)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b429faaddf296a93d2fa55cef4d9c9c0a60e947f7b1988de52b67fa33ff707ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70562f4b5bd7a288ab793e59e0c7858b9722ea293eb1281e61fdbd282669fcbe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef8e663941ab53bd08bf70390333b5eec92f3c7990bdcab4f6e7dded1f2b7cdb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8535e81919c19316fbdd94e60e90db7852196d023c9997047c0ccc3eea0d6b18)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b258faa242109e1e75badab0093db346b29f35be8493ebed86d974f7a005610)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__415a812b5e69a30668bf570c92121982392c1921314cf89fc76ad20dc69647a2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44f42396fbfcb3769cbb53abd23675816e2a587352d3840d337ad74fd02da9f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e5a8b8234cae766695cacb290181e27b530530d47c7d074a6d3a010c9b30d26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e734387de2869af12ff6dec91e11d41337beeb3d700cd8b02b2633e8461a705)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bee2405b0aa080d7ac43838239fda8cb69426a00b8a6c03036eee59f62da707c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8de41005731826e5dbe3504d5d5600c6670e88750c0ddb40f4bc60da4b674c15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c57ba7613dcb1e710eaf090ce22e10c268f0b48a2a3b7720337736cca5d67a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ad12fe8eb24e7ab9460144dbf42a44e532072d3cc248ff920dae71bca330d6d)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__832541bc7d15836dd7fc274e5362da18b444d6ba2c003c3d7e7df895be3ada88)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b88c93b1199f81230da50a52fb1723954f091adfbecdff9e52673f0796006381)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a168648db335b6c6f63c077b97b02c42652f83c9052ba974f20e4babe627ed1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d0f288f050826bad9e9b3f76cad419355cee8f50f4a392b4693ba43fc00764e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__536c3d34a0b5c9f44f4c98d7db306041eab0c30756c4b9a4c92b52cd20126f36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24179a42dd8ef5fab7ef9662a765d13d1f15dbc0a51059b5ea5cc9f543e508e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de810e165a461834c44e652482e79b6014fe16847803433ea6d376c89ad44b60)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7689c0cfe19bc348652a10b0c4e235cdb1af20ad6c082bd6be304b683cb0de54)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__404d195ba0f7731f302a3aa7cc4af81d642fdbed53191e0037d68a1d07087f46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff687d5206460e2fac4b32e748db76ccca8d65939b53e09a863cc452ce36649a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "ApplicationSetSpecGeneratorOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24cbc92696fb54e23c974025bb9e0e8dcc0ce7b60f02c067a770424e4fcb8f58)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48e41f552615696e2f139a82f6bc8b65e20d7d0c115099b518f9961d295f2c4a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__508fbdb835070f76d610fe1935b9118b624b25d36b1b0d62dabfa99536147e2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c5a89ad82006f06e232e2ba06cdab399b6b7541b5b31ff04e4272924fdfc08a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bab6af3d081c2f3a3718af5635d80f594c99dd5d8e9aa3dbd19bf54f76cc9e70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListStruct",
    jsii_struct_bases=[],
    name_mapping={"elements": "elements", "template": "template"},
)
class ApplicationSetSpecGeneratorListStruct:
    def __init__(
        self,
        *,
        elements: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Mapping[builtins.str, builtins.str]]],
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param elements: List of key/value pairs to pass as parameters into the template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#elements ApplicationSet#elements}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorListTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b687eff3f1c2a31f96a7f7665e541d413b8d4bb4a1fd01a966a759b68b3db46)
            check_type(argname="argument elements", value=elements, expected_type=type_hints["elements"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "elements": elements,
        }
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def elements(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]]:
        '''List of key/value pairs to pass as parameters into the template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#elements ApplicationSet#elements}
        '''
        result = self._values.get("elements")
        assert result is not None, "Required property 'elements' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]], result)

    @builtins.property
    def template(self) -> typing.Optional["ApplicationSetSpecGeneratorListTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListStructList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListStructList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e381c608ec070bb4a724494f7c0df57c773c0297607c7adbab34ef9b09613193)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListStructOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83d69eaee5d6cf4c2eb0cb495ef59699e5caa3da3220de5a6090681149abfb70)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListStructOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6acbeb9cd37e7975d6f629e06c904e029ad56a7c42eee1cd980f6644553301b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e063fa0fa380d6e133538e297364bf12b81bac64ba3bb8ee1d9706b74a5641d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9dd62d9ca8c7cc544a115c743b501eaf5e1cf1e8a0ce76b62c60b2a14766e2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bda0c569e8678df94903c452c7c5e119f8de7e66313fbbee6ea46691436d2255)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6150f78462ec27312086da3e3d2a9f3ae81cf25f21864f2749f9c9d1752db4d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorListTemplate(metadata=metadata, spec=spec)

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecGeneratorListTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="elementsInput")
    def elements_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]]], jsii.get(self, "elementsInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="elements")
    def elements(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]]:
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]], jsii.get(self, "elements"))

    @elements.setter
    def elements(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f426779ca6b29969292ee141e68c1f4fe95f008a6414ee53ccbe686dc4bca9f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "elements", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62c1044a137cc260e10d791cf249a0dcd36571560ddbd11d579477b03f363ceb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorListTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorListTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorListTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a93e1f0bcc236cf0a4eefb3cd72168c6696f8cab57e2f8ecbe55bbb32068f84)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateMetadata"], result)

    @builtins.property
    def spec(self) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorListTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdec02b0df9f86294c49814bae811ac8339dd822cde7584bc948c13585dc1dbb)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f1ac55c27a2388fcfa376c83ffcdfd1b62a38d9a980913d5bb9a2ce0226f672)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3324faad286de9d10b3f41082e801f7cd13379e6d30c5b7fd9ff01533b65949)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33fd497363d29c0fb0969c0ff18ba4544344cc91fed5a9ee249622b928d5fc39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bba39775fdb7abb4f43658cd18d6c852735150d233f2d1c7d7e8d59887443d1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__578e4e9372f94b4bb5a2cfcd5871cdbf50af9ccbeaddeefaea4e5b2d3a4573d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28478a51e786a90e08a0f0e82ad1117b04a9fbe7ba2a44dd45460938102bc68e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f47816edef640b9fe23c34f9ec1a396d6e13e72a63e9d80a31022172683fc02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__768b691d8eb040d23a041854b0f19d2e15e4f4f570445f31679784e50b0cb331)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorListTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecGeneratorListTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41c81c8ced07adba2d80d76c21d3a91712c4db260b02e86499662d2837a0e32d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorListTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e325435f05d3afa02f52202f10db8fd97e6878ba3b45842afdb05dd5faa28bf8)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorListTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6546ff9129379e16d8a2ad94fab4dd45adc5304df7150bb4de8ecd968e64d2c6)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0db884dd19ebc9d3c7db029a2f5c08f2c526c720f17dc2cbd1ab88e61de2990e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfc71b1f3be1fb34fc2dee2712d6f98355a8e9b7cd94193ff3e106bd1f7bc059)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f854c2e015ded80fe065038f141137f59fb779b98d4434d3b200d05f9b7601e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a878606e92540b60e80bd68d2542599ed8b3a228cf2fab642ec4ef0833392f5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbca9ffc4ba07f71089b64adf3b9d847556b62bd0b9261c090477ed5c154c6d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ce31dfb0d4f34f9b399142e1c00f53077ef5b689a35798719aa38b6b10ed71)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b5b0b53fd9f067f1bc5e8d5935c5898d6eeb09cec0be4c6695a0c240e343b03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f56dd57da9c5ddcf57f55ebe06290dfcb6e468f6430f1706a30f23ff6533d5c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e7279c2ad0bfaa364864a9d6b663cbdf435af13f91264b2d540176c66367b05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e36c622cc7901cfde9967e792ee6b066128701765a0e6501f5bbbe3213797404)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2fae31549be6a6c19392fbc19ef2d060cf6dce69f5e6f267ecdba7efa3c6e2a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6ed4eb7444803dccebe3996a391d994e9a9ded21a750cd08eaa194932a36111)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__279e821695513599bbeb9c4dd7324b35e92ef1890cbdfd275c37f90b630f73db)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1e940a553c8046c25309d98836ffdd52fb8045579c31531124da713cfbd040b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9be4f4a2357b8c5c9313efab0c55e8e605435d017d8ba76ea0619df85349725)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__567708dccd7fabc489e719c1b686876b654f4e73b95e020bb4f44dab56298dd5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d68eeafbea1bace75c91200dc2c5b66da16b66bc26fcdfd95af32d73518e5109)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ef92f9f39aa7aa6175f6479a1e77c9e31675b2322169603bb9899bfec3d4023)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__320a5f5608b64b514029cf9786ab206cf14aa3ad2e6e66c0233cdf1877917688)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4899a884c93c9eb8af27ba0bf9606e10258b74d27c317f019ddf08e09631543d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorListTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b01e8681825ee3b00c0da45171e142418fdd0a358168a6c27b8ebbb248c2be4d)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aee380d4921daffb04b3b32c5c4b2f0f80e6ccd24f16f871c245c63d3986c809)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e1d511a543484b114a1a8f966192e89ced8318a84542e6f0241da84e0a9fa03)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5620997f421aa5fea1dab91323f8ac4251c8336183c3681346d32c477f40b5eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__282a1cf262215ced68ff9fc916c573f378dc8419b009a4170fbfc3f55b256743)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77d3d6186bd4059a5aa274e44952c00a5bde8308064c31c7e24994a87ca86160)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c10a4596476695641069e3808d7b82f8eec30b5a733212f4f9fca7e14ed443b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f37bfdd9abd65bfe02e8c75363106b98d881175ffe26f392e8cea9aaf7b45673)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c40cb378c7237a93c4a2ab98f6a58c5c5fba7436a18826aef49899679629b2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe92fd4c027ff7945c8a260da23d6f64896a116b6a0f5077f95e86c416d8fea9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e02f85c86c3dee3496f82c433498309dd572dfd3e137a77a0b3978341eccf35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f95daeaab92567dc7cfa4e776a8d9385831b38871a4465de712e1217cf0885b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5239971e0004edf1329fef21c5f5b12e0b76ad251ecd7d7742cf2b0823304e93)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc9e9770f7d1651100637af5b0d9677393b215482856dd1f510b770915f6a5ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__579bdf499d233d66fb333fd4a3e9d1f17d5a66d40a8b4e40d1b6992da71ab954)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorListTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a555d3518fc263ef9481187edbd4a96b20f11c17b38313682b0358cb7dcdadb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f5ca20b6c141233314fdd37fbec44bd3a38f7926def292500bd1f59e96f7ac9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7a47e533a5239e68440613190b302e13129b2d2054a6f553fd8a6d0e12d33a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorListTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b189a372e6e11d2bcc66f5bd3d5b53b43a1bda4d91514cee9b0b04ad4caf0198)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bafb24fd24b0596e54ac059d59771014b652db46af792e2af99346457a2c416b)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6721b12641dd2f103fe059a2d062143e5f4db3c5859d4f7c9614e1947a0adcd)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92238d88884c3a5f42a23ad336cf68ac3745cefa8f9aaac28efb49edc8575478)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf7c73ba1d814528f207a868a1c5cbed14b0e0f6a2ddc657030ee69b7d0e96a8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ca694b6e9a813951b52bf4c264343a7e851960a2949ccbbfcfbdff82a799644)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70721f355141d5affa342fc09a6cd422373fe066b8c2aad606e57a32bb78de5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a92457efe6a5f984c8ee2192ddcedd233f2fdc9c82210ba77a701241b991a35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a3d0784c01bd6da0bf57267e05af1c3a6f2d0641b649641550376e5ac2dd0d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26731085d4c2c64283ad11caae42e254201c5e63f34823f5bc8e12be7306da93)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfbe923c634b2f1720e7dca90bdc7f1c6efc782eb6d2d351c0d15445a770eef8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9114a7c23180ce57f77518ff9add84891128a4c34453cbfeefb436b32a8b3c2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1c34ae729ea85424cdc207ee9f5db5b801390995719602eba17668c543da119)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0c4741b32c02a77a1550441c1001d2dabc350af1eee886b31ec2cb9d6f2d14c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa152c30a6c4a657cb271cc755917196275a68c4eebf544d0b613fe964bbfc65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9769508872b5b2e87308b7df93b4bdf8a8c9396ec7acd80067e7c27a69ac2f9d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__725e9a60524475b7c6dcd8b989243fe404f845e98059fed79cf84906f189c502)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c1f737817942c04bdc904e07e77f7cfccd9a8ffa1e8d75e86c6a31fa03fde79)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef5dc735b6d4662bc0eb4c6df23b0e40464c579a3ae568cdcba664d35839e96d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e86b80e84d501a9d4bc0ffa1bbe16d738184ef719badf3c69560ae29d6ea1b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d52bd2073491938a3f63fd8051e77a1688d26a54416ed76424f2d664cb661f41)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5741e2ef5dda8dd561d940e3dda10f97fec59fe33363fce1c4307810e4491d0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fdc7c1b5922e74e44b121fbaa697cbf4391edf8f385d9096071dfb07770e786)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bbbad037732a147e2f771d567858192cb7af5c8d4850c852a29b7c342e88a4b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__221594a505cb7b88a5dceb8d1749a6b40e330be528de702f58f295bc7c68df61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0f9bd7926536ed241d982f5537350a8ab84232cd7847e5d11b2ccb68b30bf89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ee55b7a119ad6a5bc4cdd709406e0f56b92111da6ba8388cf25acbed65e8699)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c590650178cfbeb0bbdbe573f8ba25b520bf752351af3d4f871115cafb6e9694)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c74fafaecb40525e47512bb817c91545c569ba935361bd168e947ff57033ba0c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0eef2482d0a9b7b68c7b3a752b35ab8ff2223d62197dab1e71a8c1af59a321a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d345799ea76d304ff2f38e3699cbd4fd2e37bc3157e4f8354be8c994a8da5f64)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f06d3db348ccc0a3594b7f2ad21a17b0dd60a20e9a849d5f9167ee8ef6e70326)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab188dc9fdd2a2b1d20751dc1a25f9b685822b8bd214969259685a2f45284872)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e48e9e5d56fd3fae64b506904c392d295610cacd100d5ac3fcee7c7e870ad34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de0c17f65ce6a4b1996f1aff17670fd71fb957362b71cecb9379ddd6ee2bf104)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24ea248aba881bcf02d6cd6587eecfbc06241aaa77eebddec29ff4cf599df11d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cbad825c59f7fb60b4d117c288c1acb75fb991211f79c41384ab295bc354c23c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__883a098db82ed185ff4531f4cba66d0d0f629f355009c9facc096776cdb49425)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a975b927a9f1c89982dbd05717ca05de25cdd75650c4d30922c0482a9746539)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__068b7303f02117056de1ea016b3268871136913128aa1587f475fcf347875033)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__515af988cae220ab6d43f8bb280a5dd679c75aa0cbf84dccd04fa1c789f92514)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__177c6ca5a5848fd57e20793af536ca285c4c47221bcbdfee7c41dc6676077b85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0ed77935c5d0ed43f44bc781a6781ef22378a22328b121699c7ec9790cdf04d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7cdecd6ab3c9f213f85160529c0821cf393b31ecc108010b27875dcc898fcb0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f23f334cd25dfeff7732d312468375e0571f211c75ba874405dad0cd728fcdae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ff274c61099e6c1f9b9961ef219029d1c2d624f97b94e2e012427aaf829fbfe)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f25747c4f618150f75059f0b35be642d8447f7dd354da4bd823bc6e6892fce4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f34351bd5e2ce0bd8fb3d8a9162916acee4224b5460f7389a116bb796d32d9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__981146eed6087e8b4a184ca99e6d0092f25fb650c0d18932c96aef8a13683ec8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3eb81ed6beb15cd42d624eecc4b8483dbbe574642f111e3150f4f70abd2821cf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89b56aafb25d0e43973e4f39da15f96f186e59f6d77c43d8647e6fc9601119d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__708351075fa9f5f9bdddea937504a9ca3d83c7c582c6009fcc1aa5fd36f72cb6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ca26abcc9891f98605bc20f9d6a3409dd6e335bc30f324c43c5db1458d5acd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__619cd4c317b209618e5a2e2a32533c6cc21c2d30dbc2c98c878129149192d611)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fabe738849d49e1a11cef1295f0a55eafaffd62b3f670846964f930f1c15ae6a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f9e0b7e8dbd51d32cf17c3b426e0e63214589f6714c7aa70fd93d290f0e48ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36eb4a47f7e8fcf42bdb1bcf348ffa83b94b26e55c3a443b09dedf73a9b39f27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4efbc4b58662737bf1b31dbd9bda3121ec176700ca3f02c3c357343584ef4f35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3063be7d39cb624c79b09df6572473078572ba16466a88eda5139914a683a08e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b43de286a737a64e151fc004ac3c5fa98f03cea61b3217a9bb0e8d259dfda54)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a8e12c5afb2de9337b4334753a252315d78d95faad111aa78e5bed0bc8902e2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__023bf4e2efee8e626425603dadb1b59102720c09376078b35e39437cdedf7ba0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46e1d7cf55e3c556fb1d3bd86837dc1a037b9a753da901332dc635def132b656)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a4ffeb641779f393888644172a011514d4a97863e4444a0ec5ee34db8657477)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b42732f2a6aef221c3968137c1fe2e9ae522a650c27bc6155a689bfec48fafba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19efab6f8693f201b8392b09c836e0958f0a77e6ecac84e57a292c3443a712d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e923789ca57476d991dd2d7cb680238cbcb027336e5caa41104be2e5febf133)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebe10a6c949522c360ec7c38bd929b3e115f9ad347865760fbba518a22e45d36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__babc73cae2b1c43bc1b5b271bf15aadbc5fcbac20e95ca7898c653e560f1295a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e418a0cf702e59eeafe767d1e42bcc40bb07ba3ec5abe625d6698f4f56bdb9e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21321d6327b05ad4d966a44234fbf589c09b9958064a47bc92c64b9d871f47ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e332a6c740b065852ab4901aa09404fd9f6ce5ad7fd66324bd3502862c89861)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5f1b7fa4271a291fd2b6de747b6edf5e4aa50c8e9d2230fa77e91033d1037cc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4722efab1f316bcefe198a52d4c92896b6e1f9fa1fbb7830f8488125883b51f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9900b4a13c8d39cf6047d3ad22eed86ac56a7913b0b509d96c2753edc7bb090)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1985522032467da6a097d9f14a5156690c24824f68ab1a3a417f0ed8ffc2bac6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a214cfe5f7438ce23b652378f884405f792b5be8eab1085e23a2b242709009e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a95abc9756ae46e58c5459632522355ac1fa7fa199378b561cee0e907180c751)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2802bef6e2c152dc8b6455f22ed980271163653bb5b1e85d4751e9d3de2ec377)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19ffe14dc3da862c92eb98d6b5b53bdd7f8d4534548791d8fdacdd72d65f18cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c026779072c6c00afdf442f47e9774c28f30775fa6415c443d712accdc3b44d2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8e57f4f228f364243a42da73bff7906d2eb1fcd5dd71a445a6fbaf8695ebf75)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f500694c73e24af3430120a7498073c297cd1b6ba5889eff6a2e33be6026fed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1624a5d8cc5d956b8e53a3298f1a8ff4e1cdb1b8ca10f7d25f7b072cfbbdbd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f60b9ced2dc397be8b107bfb212eaa3f37523682e96bd55e8b32d6a964f42cdb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16f92c50f4fe215445d35955201a8f75bc2c2400c3350d5246af16d419a860e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fafa57881dfede3a3e300498364ac30d808b7dfb741bd8b9e45116e0512f179c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5806a50bc49fecb6e989d1264c08379cd441006262473d69b8d512cd5b718eac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__874dd3476c9d61941a7b5f0db31a8b5b3d28d0857880d99608a7838cd895fc29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bf1643468170baaeac4e195a21b31165cdd2d5d6435f3846c80509424adb27e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c47d3533f0df37d79d942f1f32924af763194ec66e9e4ed549bc4f6d1d86bdf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27939059ec7ef1701d856587ae4f8a0a32266237db1aa952fc7a5d37cdf4717d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e1c5cdf7b89b5a578dbb9c803f1437c2c9ade55b64e71c24fcf118e7784a876)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f5dd6c929cf7d701a39a16619ccbbd58a047f3f1d16bf21d0e63d009e9e1e23)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa085bb5a5b4aba076746acf6ac3a74ddbf200ed1515603ca495eb17d30523c4)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86628d89236b1a04c27787eb8649ae4c54165b3cf0ecd9ed3fb489ad61aaa06e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7cbde9e96b80bbc5e7dab0ff9d88752d1e4d94dc183aeacce696441de26b163)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90b34e386427812cffa3e55e8af643ad613e7b75d3b9f3fbc5a0cde50005bf82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a981ad6205ab7aa33f98333319e7764067cfe071e839814183c8f1f36881a03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1e72d4f2b30954134a39b598c62cc614ddc65c1faeaa58234bca94b51355243)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6d62393729b15b70092461290c1bdea26a228f76dc83c9e8739897a00dc038f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__684a8e79f6dbab1e4a69010102c945c6df25ee22ed46c67c4ad06d013e41f436)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__124014aaf9b1ea131426e6c362f78d686526030d7274a7aeb5734c3bf0f00fd3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b94671c465f0af47b64868b07a6d7e93b65f468e06c8263e8b42d6fc4c99b060)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48c806a01b7c8b6973a9902e3c48a2e0c96588b25550a9f47f6fbe3fb02958e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92697db1915fc68c6f91a85fed6cc24d1eb9a013fd539347dddd85bea76edd07)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__262aa1a0157403ccbfe81ec7d17cd15eb38a797aa4290f265226010ff3e1b021)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__407dfd9d3d97d0872deabaa5af40fb11802131814b79e0b8e90cc0513bca59fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc3dcd369b59e9e1e86113c4b976ebd8f262122483f180fa97f05839110ccf6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a510e381c25c1138f8d0adeb3e962001d73e0ed92411d395e227917c5cfb1d4)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efc6a2bcea4d49d1699385cc61289b5e6769fb4d94ef168e6d1102bb3c940f88)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f84d6b30e41c09e03712ca10ba4f9ae1d4afc1b15b548471f5da5789f90b02fd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60c3f3e84cd20bae9d417c06934f6402f54a5f872afff4657dbb792ac86e6519)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f108ff642a795b3e6edbec3166931136c707c19f265b79cf7764e12f61d3f5d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f780a8a5791f84b76a7e80721ac9bf2d8f8890fe9aea9b484cc2b196159b78f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e87da459937229605444e199380229073c6ba3be8ff4bd4cb868e9d32a92685)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63f2ec1c6bb81eac4a08710f4aa1198b60c33546367ed2421c6c6bec907d0c12)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb701a58bc2fd2d0ceb867012ecc7cfc83c49014f428fdb21118714be710feb0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3132681a23029e12871e6b2a4491cd7be25d0c3d546bdcaceff9f2757fa8b9a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3783600759c3dfa9d653f94b010dbdd52c423d015403e74522dfdccfbfc32311)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99da080faedfa14a7fbcbc5c8d9857c2c926b4af909d7c1e0784f73e5a07bead)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__207ba2f561586c345de2776319ec0fc4f0522622e9820415c67037d40b6f5dff)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62d61331a2d9e88e92f84376212962761e53428acd34de7bd32bf630e44e6b93)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__830c91b52d9c254942e8bda72076bcdc1c39dcffaf57468e49b188285bcad22a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95f76bc9a56df14e7a296a0b9ee4e51ac447231c2af1d8839432426eba1774a7)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__919cfd58a466e8b6e60ab42b84f7f8a5a9cafba81d97a2772a26b70574d446e1)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a8045260d3f7f62acca7b2fbb45b6fe62399ca54ea60e31dbd4277751ce25d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68e549e15214eb57d1c7714bed71c47b0400444b924f4c8c0ffcec08eb36a47b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8c0170b81b89364be9392ad6c289bb6091e97bcb1e033190f70f1a21344ce3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1052fd5dc229bd8353690aa979bfb204b7116b583a2c38e0f961a384dc25c4d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8da79e6510d66906e8a40e35af649cca6731b6e060e25886b1d78b25e9d4e367)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0f40ce3ac233f1f08e525550587ac75f184e59254a25e1fccc56952e0c87064)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a253f396458d63d837de6463047007dae2bb03ee87d8b45af711d438451b5ed8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7cc732757bb07ed4ee9fbb3a74a3d8b4bf7c5dee7f1222dc99a41106200e92c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrix",
    jsii_struct_bases=[],
    name_mapping={"generator": "generator", "template": "template"},
)
class ApplicationSetSpecGeneratorMatrix:
    def __init__(
        self,
        *,
        generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param generator: generator block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorMatrixTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3630e48f519ffd304e67c86a187f810bc7ea8fdb1d0c9c080e30184dd9656b6c)
            check_type(argname="argument generator", value=generator, expected_type=type_hints["generator"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "generator": generator,
        }
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def generator(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]:
        '''generator block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        '''
        result = self._values.get("generator")
        assert result is not None, "Required property 'generator' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]], result)

    @builtins.property
    def template(self) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrix(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a74659246ef154c542bc173412f0601b5bd72142dfcf04aacfe56b375f0180a5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6565ce42f722461aa920a40d46cb902c0ec4d3fdceacf5cdec977103a4c89b8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__045f679c55eb0b505f8b8f3714fad07745220a8d2808baaa889d54146b955c51)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a1f105db0e5a90b0bcb56b75883adb1598f13f6c076b7fe07af9eb21eb06bbf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e91f5c26d68ef4cf4c53565353f43574132a1504328bbfabde20f4c0cabd740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acf22e50518584ec1f6524357db2d82403d5464826ce157645b8d1ef731a72f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebeebc6d55834fef8fda29177004d8908d7ea56681986b50b9b6e6d21a2fac86)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putGenerator")
    def put_generator(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44a4b95f5c3a15e5acb80ed9c0312c852deb9af03d5218f3706a10ee094b0200)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putGenerator", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplate(metadata=metadata, spec=spec)

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="generator")
    def generator(self) -> ApplicationSetSpecGeneratorList:
        return typing.cast(ApplicationSetSpecGeneratorList, jsii.get(self, "generator"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecGeneratorMatrixTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="generatorInput")
    def generator_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]], jsii.get(self, "generatorInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrix]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrix]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrix]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b72930a6f5180303f79456a476873331eeb98cb50d4c705ca0d6c96939798ebb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorMatrixTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorMatrixTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorMatrixTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e47b4c961fe96103eb24b3b14f35e854a785c69b9a2864fbf89d4d440ac05a1c)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateMetadata"], result)

    @builtins.property
    def spec(self) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__187698e3b09b45efa5a4bde125bf00b1877df65a70e6cc098a49315aec002ff4)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4a7ccb09d6a7d919b35b8763a65a4ba6a0a04ab0cf6679b020b32e034243017)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b114110b712cfcf7116e730eced56dbc96e470a4b49567d60cd218659dcad1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff6aefbb75a58835281e0417e0e5cf1dae99d276605c8c1f6e2d9943636eb459)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bce006c5500d84b826e9e5a76c45d765de6896329e90e6e8035e402a5fe76ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b96badecf63041914a7a1744a69dd4490db0fbe11a7aebc507d9db4510220f4d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ffd3e81a2973ccbf8b1be865377081fb974d5ad7574c3c69ed0943fc48d345d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__add416dba3145586914d19d1bf32dc56877238137a91963bc031697fc4b3796f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc81675ef98a4059c178d7725d1bfaca4575d4385e3d2651ff9a5eedae32d66b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6c177ceb2e4c52c39e22a16db5b535d008ee8d7317eb462ef309931edaa1f9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorMatrixTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f677bc657f5adc41dbf9e013c33bd68f4fa3cd8271b83be61b8f67dc67c9b6ae)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2742f159450a68574ee188c9d4750daba931fd3dc0695cb7f82abdbc91fef754)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__948023960f191a842aa5091f96d9acd000f55adfe938766624e9f4736794d1b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65ec679a5921cda8020e5578d6b8fbe8cdea58a69bf1d234caa8a4d79594fc68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed37217bebaad4aac47d383ca948ef0ea55da66c09166dd9d4f751bd37619a3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59265e87f74fa71444102567d4771f4e4b1b5c9683016301e9bdd6977e9cb0a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e49b20e5dfc6b9712f638db0756af8cf5ed76f55c229d1bb012034e1d2fb1e5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b2fb65596d39f1f7503025b4c8d03376d1d63fd807c3ea0b34f7c1e1daa5214)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcdbf723b54e802613c1f318fdeacde746a52f114c3a81d2de5509e74a780196)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9c74d07d7df3665f07fe865b5bb3f16191e6eb11b6ef8f72ff73debaf25fa62)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccf7dcc737ba7ccfb82924b3b2cecbc39946eebea8e3f833ab49d9a22b3b8d8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a765cc2fd3d772ab210b3c3c0585428de0bc2c647ec1b07b731e2f96aacef02a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eaf04816176cbea7f733177819b92b483e45274f4f8e0c397e5a899a7dc55724)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6a19a9ef5f351f16c37a2c88697dc1515a9d412c8c40320e4450f17832638d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d71c931039120378ca6c55aaaab5f5dd9ae635cefba57c1291cb666eefc0c1a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61d4e84694b1e35ec7e14589dbb3b4c0325c6921dd27f23605e4cbe0d913c1e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afdff3397fc0163e38a7c4b5ab495686e4ecd2ae36eb4b7c956818ba5d5fe943)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c623c823e53211b7efedf59379eead01cbb471e16b5ca071b39e394c3775891)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42c03d2fdee9d4195d9f8060653c8fc37f069feff7dfd326a8b47a249d533ad4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f19b9ee906d1e6a3fb1c7907510036770c89422c5f73977efb262f3b5331f5dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1aa64be0becfad696add7bae7614f18553f26d4a1702f8ca61d91dd658a7f3eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d46f552fe1e7c501bda3532fbab5dda042aac03a17e90b380749c12db8e2973f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1736ad740c179356f06d32cc97142d59405db2b38dc14eaaed9f17dcb9dcca2)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__772052fd8f893879688bd72d139049accf3694ebb4ac4efdba1ff1dc2e4c7a45)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f64be50f72f3c8def3ea4510a032309ad2f0a06c979c9564100f108577453ea)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61546b7a371a78fa1ed8238eb14dddf9bd6cc62aea4a2f62232d730c0181e76b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3a08e67f574f697de1d0ac5f112013cc97a96e58e2d7db173558d96f1ff2c5d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d046639f8f721968e272d7120d6e05a5de6eb876beb4794a1448c949aada9a3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa6b606b902dac73ddcd383310896c985e213917ca7330757739087f4f6fb81d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ce2d23b2f9d35b3f93c33f506196862c0a8cdec18a2147ada36a2670479a7ce)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81c809687d45d8eede293716f2f81a3ad10a707fc3731f28eb172253bde22a29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0320c6030e1c311d7711a8e5636779f74505aa7864f599122ac159582a370e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00bd0ede7080ed676165c8d4f0d2cea279ed02247cfd86b9720b066ebffe1a7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9591f8bbba743f0e8aafdd56761eff74426ed954dac6d07b981b8448521abf5d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c52f69414008f260a6c04813f359c20a95a9928e42bc3a9eec138f87ce7d653)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__619c97bf7be856d335f14b641b55750fb0e451a982f3424eb1f5e2dbf51a94bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__188a0b540488dbf4f28286fd8e4638424432080b1b9d8b8bd2df7a03fc6c2d28)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorMatrixTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abfe3efbf2568ceef91f8acb8eb4f4d5a3b7907fbb4868c7441da666b54baa93)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f576c6c8c5bc08d29e612dc5f3ec21a1a2724efdccfae6cd26f2f9504ff3ccd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ed05b17f1802aaa88db3edf7ae1ee3ffb61577fbd0139cacdda526d02bd12d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__458f9f197da3eda98436ef8cb1c097892c7649c5c614994baa3e424816bc942e)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f20af9fd6d831d792ae0eb9f02e708c1f2bc1292062b0a760d016a340b6b5ad1)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f70484eddb2ce8355964983bb373b0844f576a79b341256b880e48dbaa4da733)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f44505a1f21fdd922df4a7153a0c0f4cc730b55e0c787a0cd9323ec30c9f6966)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ed1e804686db586f3ee7a0144e00640df75df7c9dc565588aef42579741a2b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ee90ebe25a3b066b68e554346909ff9f3a33e87fdeb345517b820a28a631e2f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e32e5765888e663da2fe262eac0537a37e788bfb5617ec1af45c53273156cba6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b6999806be2a620339e8a4b9a1ede882147070532b9866f5e4e6017cad15997)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf91d7fcbf4d5f59c27cd5360afec199d5c32167493ba7389602b942d033e478)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73f6c992c65f96e826235614d95933421323081a0fc267c157bf722db71bfefc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e9abc4dfa1b58baaa6f3903f59c4ef677f003709f4bd4af108d29b26f69104)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b88abf9c81cd35132656b5256a6f95510ba602e01b07f3f2fb05b5e86378a3e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae0e050683bc4ca38555fccf765e2ae00192520dc799ca201a1f7ba16e21f7c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__880328c6a94b13712240f2bd6b279be6cfd50858006f85b52b43c6fd8d9e84cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4818c5f2a2aed4c1ee779263e44632a6a7c4af283fbff0141d0a63c9d8797153)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0bb774c1afee73e741c8247ec5e10babd031074b744a31b1d019d9665d24f5d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__105820d6b6c652a6402b49ecaf9ff3ec258c6246a2d412414ef7a3a5b8d1932e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__950dae13692b6e94a7aedc3e16a43b3660306bb85d1a33411cef521e6c4f4e7e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0213829da9a760567c62ea376bd71a99cf3a50a737bd0d34d893d002870e1e22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0a487121b3a865daf892096e461595d57e18e81e220178670e3469c3f66d52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6c524926bc208dbb97f1fff7596ebfcf4a7efa12460095166133eff006cb706)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__315aeaeaada24633ed630d3069961c627728a8717000fcde71ac985a0f0184fb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23be65dcf3899f45dde56ddaae5864966170bdf3654927e5f4c579d696e10c9f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7db4aebc47a55d2daaa95a7e69c62c72878f153e4d2b5220ecc72f9c1308e344)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d485eed1452efd81923abdc5c82bf0024e66f37150a60a7bdf8bea0b875e677b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__361349a27e9c0e98d7edaebe76e68d0e12365f849b088ebebb22861ca1c9524e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cb3ff2c0e6f71b1a80b9ff964d721b0277cd1ebdc1cfa05aab3ee5cc87e6f7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9432a711cb104d1a3e21b9ec86d95b46955a960202221e0591d55f5401c83f6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a057d0df761db200028962797c25c01ad500ea8de4f3db1c1462f22cc20a1d23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9184ff1e0698ef6762e038f582112baafc45d7cf339ed60246f660b6ba49041)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__496c0634ba55ceb6df339cd873eee4f13caeff2d0fc311a832b1886ec1336ef6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae85374d30e5131fc550a03def55b7bd5d515ebe7df45dcbc3c4252292110ff9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__262635409bce10c36cba0138856e217b337f7ea7ad37d1f1a58c056c184540b2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f26163db59413efe1f71f27dc34601d9eeba67eed5e70213e0992445a43a86e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4eeb0fb816fed814894c044b03e344ee29af59399b0cf36ed3a95b93027e95cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b3986dd011dc10517ae797233077ece82a0648d6222abd77b3207044eaa0d6d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca578294bdb65ebf685483b24872ec771a30f7f5344cb52f5b532b499d5f1749)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcf8e57c7d35096cdb7da7b31311c05484bda8b70e31e012424123a55b76340e)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__144b954f1cba131aa462fedee991eacf872a8a0053ad5599b83e50becef8d09a)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f36a11887d3c614278e735338ee757fc02d93b8f029b19b38e92563caec3b8c5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39f870a380ef2ee34eeef02113c611dc168fc6f12d51abad400ad48dfc6ddcb8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68c563107243e4aebe1fc351d5dacca3a084184fbd92e2d45369902a6bfd0512)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd502475f2d9f0ec629dcb0801b507dd46eb3fa067792dbbfecd4109c06688cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1e9aa8ea1559587a8a504e644808658ec5f1a1814963a3c8e995218ae97eb89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f90fd45d4abc9a10a8bd5c7c3a4bb31b1c1eb8f55043f5187797b509f9c0d6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__972261cc243eb45fc903b85420356ef295e84d3c2a43b50c9f4df9138f7eeced)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b1b8359dc7bbc391c37e3dffa1148c817ce0301d64fb48f34a0f4883016f6a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4efdc773e2707396ef73b5ff466bc1a1dcf995c75912d4d512012e04a21600af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eccbfb753e264fc9e2a9b56f5f69f7a37545197ac6c46e28329e9a32ee7ed64e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cad7ca8b6c5ad1b4537f53222241bc2b3dd523b4c6854a2d6c8ec6e752be8ac)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__147f5f6fcb6a89aeea9d0de1fe0b9e639c1c7405adfa3d393f701253652542f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2fa5d861036e4caaefc7c72c065d59d6eff02d41551d6172bf57e38e8b9bbd67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e5cd4d29c1ffe44013630941d1fd04250124054b66d69143584286146565be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5fda026a652fc1f386e17607d9e496e6c5cb787cb0c58f975f72854a9f787c5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5496af8a4747d25811669a59d4d1a6ff9afe729fe4cf9ea574daebed09dd5637)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf365891594b60ff3a4fd7100096f204bc23f2d7e21d8f08cd14b0d653eef78c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97fd61986a7e5613a6c369bafff6e8ab3f00934dabd59622abf30370ce0112b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a11af635df9e10c501842aa191d7db74c947f6598cb4a46f3a711849908ab6db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6ecf20e0323f592a3e69674459430193ff3091441621a345975eb807237ed19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb8824495ca5cc509ba9e8a894f6f284071cf43edb89f4fa8481ba5544feb96b)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40f822a10a75870681f1790f49251dfb4543b07fa23c3be530cd5e58c72c9bb9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2194fdb21b6db172e9bdc6fc468b78a886abc8d4b060fcb1506fb9463fa0e4e1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cf1130b486f58ba3044f8c5c8ced1ba3121e4e3462d97b71e0f6174e4ff2314)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5257538661bb7f32bfe9a68d548122b232d78a45778f3e98298f5b621d11f353)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8e35f7dae09744f45b3432ce05b1b2f9d023d7fbce45996067d1284a9a26526)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e31e2cf8379eb467b17b65710707da93a8465f37a2ce4e6673fdefab44cff6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9239e8361c6d7eefbf24aee79e6baf6c80a3a3fddca45c844826d1a6f07bc242)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef76fda7c9b144756f3947f3525bd772ddcf0e89ea4d8ed25b30f85714216ec3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95c7d31f1a058d15623ab055b0c9cb126cfcd383114084d24228cc66862df9c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c75ea85e55f3327a1ed6282ebe81b8b7b701b1819e82efaf1c066ca9f3bf2a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3660cd85692c96dd885a26fd42483822f64de2d383fab43b9e967f33428760c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1910a2c0746527df5360d01785c40b766f03974e71bca28e23018ef01cb532d)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58be3e86c8a85b716261f4028c5c0bfdbce8d8e3ea97f0ffb8761a60a299ad27)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce5e0740b0d2ec74fe63f5db5f172dc99b5b30e2e1c54e03b89bbaffbdfd1870)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b1b40c4a3f3e5436c88249bb0ec4380858cb2ec32b9a63417e55af668a36bda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b265e27f7e1c26c7944ecb6f8f3ae58a7afdebcc6b507a8dee99709612959372)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb64f454ce7452a655e44bc6944bc3e0f1b3bdf32ed6ec5ba2cff30e0ae53dda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ae754ec0c6b5b341b615f2fba1375f337303b8ea67aee890ce80781de54b630)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06ed9e13f8be2b71dc3774dffb25f3a19be87cf78f30ec1426d5f40ab11064d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e069a24c9b97bfb2bf7c6d54a2d9790c0dcdd15b3172ea1f6209d5f57414fe90)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70d1942ba417f3b3d9b2ae687e9aa42cd92ef1b8eb8d57c95012672e341691af)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66e58692a8735940e14006099431a923f4dbb1a676801bf85a7fb452b20ad20c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6fe0c2f40e1bf90c7792156cb5ac78bb90832b74f8869cf382f3079623975d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d53f63621320300a4b35a731aaba77b34b1e38e8207e96ec6a8a69ee7e51e14)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1d13d878888b9d1c293516bf60c0fe3d1ba6264fc2855043af3aa940f451ed9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a54c3f6e70779ba0c35c95f35b560aa45c7fe5a2598a23a9b9c676bb3d725c0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5db8cb4368b49e8a447dbbf8f36206275df4917da0af61bc77a79550470aacc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__042ceb288173ed1ff5d9c7f539f903c83da3f7030858e19182caba3c5b3a0510)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f16a0e952a5af6c9b0564eb2ed68eed840d9ed2d4ee9647b03da1fea7175297e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__331804df4f7bc610c644dce53da9361f230a3363cd2a33915ce7592d34ee34a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1224b40dd71b3bb44cdabf840a3d02c104f963e92e1a05771d7932c876c3c390)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc701b9ea61e6426eb16ca75e65e36848aa08d0bb5dc5e2f49dc2e03624b5d3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c728f6643b6efb578bc51724e9df10b3931da5942f2e00f4bf14daab0e9da58f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e34de7515b24d6ed11fa981343b8c628ee79d5a1bd3cec7047e8d089e5ba79f4)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9012acbca32c34092eb567beb0da05849517d4cf5329d476cb16e1b9dacbf72)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a37c61adcf14593d269456a4b7691ca622a170e571381265df23133d15a22b0d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b59306220485705ff37731b8badddab8196630319b1ae782c30db1ef92677da)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__473f2b5bacfd4c77ec6ced08f607ec523a7a91fa57ca3cb04333da77208a03de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1141d12fb537a00f0c9c4b7c2f1ecccb43a20386a4de29e2dd4329ab81f8ed90)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__708889f9c33076c674d4f39962e38782d6d36c1335f4906cbb4e609631f3fce5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a004e1e77451e337e3ff29a0f7bb7409047962535f0ba045d2157fbce9aa3ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__507d8adc8e44328de21f16ab4d43259256d299bd8f12b75cb3ad9221bc9692d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f246ebfdcd0f868f9ba89f43b4a4210f53349cb898810fb866155989e46890e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21536c942694efb0f5e62d41515877d90a203deb52374cfb8d70362942fb3242)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__676c648053293144c0435feb07bfbcd092c634b8ce0b768330ed1991c345e050)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f19bb20e83109494644abeda892ce5a7f9287a9447b3889cda4c835164e152b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dc20db335c7f5e0edf4b953815a6db966c761682b13ef29fd134c0f3ac362d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b67bb3f62dc40900bf7fd90353e24a1827f9ad920ef5018d13d8856d5a27894)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbfab52827f275130d16c13222fcf80d262a57d1fb1afedbe94e8d9595b40c8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__405f205fd8638afb8896d45d1067176396eb35ec76460ecb16a9efe187c5916d)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efb2cc251aa36af4bd75e54bf55686d740eed9550ec343d10e4e9c5ea71deeb2)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f77747e8c5d2426bb763d7d1bd7c4bed47f352d46d84ae4675025dfd0ec8f7f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e3a854ed68e35c6e79eece5829270f1307d856c5c51418573fd348025f4464b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0679f9bd3abf345bc5956ca638821b831220d92619aab9dd080dd04f349be404)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5de1b636d28f3d2d63585ac75358fff31534cf095780ec8a7386f346fe9f3f07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db53749faeef14d0cdd359389547acb9e5fa84c4382f9a6f38325a75c3aefeb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68f098b524176d972454df2b989d2de685b4b605c0afc3a7f210cb670b8e5a0b)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62ece0a85411820425d6551670a0b4537e22ad44b96fa9ad5ae39b6fce434585)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__209848445d92cc610c260f5aa88d7fe1b5050b4fcbb6503599d2b8072cb9e8ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5536904a406dda0ffa2a3e5ea8badd36968a9c4ebacfee19daf1ee376919f8aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__258ed431b9f1fadf3962ac296bfc2b32bab011d87975c049688096ab96c56cf2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83c0c879595f04c22ec9b19b3d8c2091422c50a33249af6f6db84b5937e1c9ac)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a2d59a28d22187b48a864071a960dd11d4667d73ccd3761e4d1c83fdbad79fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__536e78890b82d38ab241928e30042da09bc46bfbcc0fc12b3f02483f0aa19e39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46736294dce4c92e7a0bdb9ac3b048773f662c8e00f446a894b62246e44b9837)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83a981dffc7111bd40f7cd0f129fb41de8d9f158c42f31cd4a969fe8621024e4)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebcd6078f8053f0b89d0e91410c2115c9bc1631615fcf444d5ca69029dbc788c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__436f24ee060f59df9e66cbace7cc98b35fa4fc26800643341b655d00aaea7335)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c01493c762f9950cf7b7ab36ef51544712edb93deb7d337f8b4b2845ec1910ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3691b8ec332dc9bbd1afeb4e4ff542f252455b25ff30e9172697af12d249e16d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7949d7a0a3beb8001e885c1da7af5efaf36ab5dec662b707ad4d14f7c3a96f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f36718daa3a2ac33b4c0f85c3e243eb94fe694b139436c1db5dc207750d7dc03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17e614dc99276b8bee21201ef9cf96b2dde3e16a8e3200d9ba3006545505d93a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d352ca0ef4cb27a191a9e9e3cb2242897ec781e9af929fe25f80fddbaf1d4b78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMerge",
    jsii_struct_bases=[],
    name_mapping={
        "generator": "generator",
        "merge_keys": "mergeKeys",
        "template": "template",
    },
)
class ApplicationSetSpecGeneratorMerge:
    def __init__(
        self,
        *,
        generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
        merge_keys: typing.Sequence[builtins.str],
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param generator: generator block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        :param merge_keys: Keys to merge into resulting parameter set. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#merge_keys ApplicationSet#merge_keys}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorMergeTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__159f66a471417c2b25b2e321c6f2ce90d5a21096051cffafbf25b47535fd0fc1)
            check_type(argname="argument generator", value=generator, expected_type=type_hints["generator"])
            check_type(argname="argument merge_keys", value=merge_keys, expected_type=type_hints["merge_keys"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "generator": generator,
            "merge_keys": merge_keys,
        }
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def generator(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]:
        '''generator block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#generator ApplicationSet#generator}
        '''
        result = self._values.get("generator")
        assert result is not None, "Required property 'generator' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]], result)

    @builtins.property
    def merge_keys(self) -> typing.List[builtins.str]:
        '''Keys to merge into resulting parameter set.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#merge_keys ApplicationSet#merge_keys}
        '''
        result = self._values.get("merge_keys")
        assert result is not None, "Required property 'merge_keys' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def template(self) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMerge(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__841c461ccfa426d4af25d5d887a43bc3a659395a3bca1837fead3eae5838ab37)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be2e9661fe6cea42d8508de49bf6d73fb3631ca0cc7c6b09560c30d5f35e3757)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56ff2168b904e0bb10cdf1d5cb184881e8bf3ca1bfdee58970a533ee09c5f158)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8114bb52684aaaeb0e8b9117c128a3ad9ebd63121bfebec44aac631f97e81baa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86e0cb40add3441225f8be9d530e5b32010aad1cc55151a70fa469f60475b20e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__976c69f9273c938e52806dd5d43d0a67e2384214efd4a4d21223d57b73e3299f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__649e3fbea3ce91d15aa22db6235fbb2e31e0d8ccdf003fc2ea59b584538cb79c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putGenerator")
    def put_generator(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c1410dd661f24d67b3578ee5319c59e4eaeed77347656b25f32d2f834565da9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putGenerator", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplate(metadata=metadata, spec=spec)

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="generator")
    def generator(self) -> ApplicationSetSpecGeneratorList:
        return typing.cast(ApplicationSetSpecGeneratorList, jsii.get(self, "generator"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecGeneratorMergeTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="generatorInput")
    def generator_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]], jsii.get(self, "generatorInput"))

    @builtins.property
    @jsii.member(jsii_name="mergeKeysInput")
    def merge_keys_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "mergeKeysInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="mergeKeys")
    def merge_keys(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "mergeKeys"))

    @merge_keys.setter
    def merge_keys(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69ed9b479778ef6a6bbcadfd2265f1179dbf0bf430f435a655429126faee4d72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mergeKeys", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMerge]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMerge]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMerge]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f230e6bc7cfbcd86d371aa17afb6023317dde487795eacf9dcbac8af9099565)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorMergeTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorMergeTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorMergeTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__450dba2055f60d3d454c8b57082687a2a76c9990816a66579f259ddb0ec746dd)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateMetadata"], result)

    @builtins.property
    def spec(self) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f39dde52d290514102f64b53218d66f8d899c6047a896a5186b1bfa1ee16b909)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7c874500d391ae5e99a91880d79378fdac23c38cacea802141063774de04be7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e34e3b8a132ee9b927a586ce288f38280fee86b58bfec6993f924464ec804292)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89a4eace69b71d30b92d93f1a50fc41207cc458d92f5c44e29c80028101fce16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c20033c03c82339f1048535b1cb9f4268b9963d4ea54ddb9d0f1ad9f04568642)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20fc84852bf181f53cb37cebcb3ebbe1997b49e31d0c7badf7d6636651f43b9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ec3a42aeb529db5831bac9dc080d8557a0d5fd67ea3fa6d62735701ab439865)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47c0b44a07d1779e69969b96406725f808f384ccaaff49128424dec1366b94c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fbe3a6d16b319ed9728b025bccefc55989de699cdd1398b3966244d6fae1823)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecGeneratorMergeTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14156c389fbb85381d7321e429e238de718d1cfd5ab7ffb65487fccb177e3040)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorMergeTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__910e0912178c419c9c24e9641191ea764ce88507bdfe6eeea7d894bade8f34ab)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__545d35ea36d1b49a2df502e4aa2d2e712610ee5141ae2cfb87cb61021b88e34f)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ca5a33eb9fe6a9f1866103c19b641d18b0abce649adb85dee4619ae404f633a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdfeb1cb98dca97bb5b541163b2008399275f74d9843cc034feb9ad86ca997bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e46ad90a917a42aa3c0c638d7ddbcfd6aff3c1048214f65c982d18fddb373726)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a64af7b11737d1a5088ef1d3b5622f4b4f6ec68c3abab8cf9e2fcaaa9acbea3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc9956815be429d632bd70289ba2514fe5685c33812ed0213680881a66413c15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8288fc4f3ffb03853ad11a8925ccf9d135108465ea4653e8f7a6c3982d59849)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ba896aefcd6a04ca7c5770a4aaead2e611ee8fb1288ced9fe146d797b153613)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__701f62ba9259dcc49f0ced8e5c9b134e730fa3403f6caf0405de0ec659f81984)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9d5f01a87435013ff0e2bb7efd071ffbb80b5e55090d2ce4c75e14b2cedbbd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3f852e2231949b48562e35162bcac444c5704395f66d4c378c7ec6dcbf03f07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81c9189119901eeef232b68b516d31076a60a1e9c9a0831417796a3180b97800)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee10bc371583c3e04c715993bbc13ee6781169bb41866402b9d1079f17cd3a0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a511b439dfbaef5e7c074bcb20911f9843a2e21cc73267f47fc09b3ef21a7ee5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c52fe41eac4c6117d2692bdfaaf8e15e047a6263488ae00784ebd911dcf0a617)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2faa890baffbeb52f69392639180112bb9aabf1b863e228d756043bb694d0cb9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf0f16b5a4a014336d29ce8b80e762bd3fcb7692da5e2b6965e0783363af0323)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1be002ec86f4306b618324b0c57ea38c5ad5068b0a674918aa53457de9c572f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec6536cdb0380b96ffa59864f22f43bacb117ae85058aa490728babf16133c6c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe444d0b1f5ac322994de2d4bcea52776707981cf7e5e8a3657f9a794cbf2241)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0efb0854fa6558ba6ce5b3d4df762db56b01c674a209c56b6d6fdf3d10129f4f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f831e2bcd0ce9a2c1f61fca423b2f419f298525ca596bf45b467c4d2d3bbf309)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32eb8ba77a485613b9847b1bdf85879492107607afefa1dd1becd4ac0bb8f630)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__536527237b874b21ccbe82f968e4a21ff780c9e7e29ff1d5bb489a380a7f7c14)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67730c35f328f95d7c2d78544c9f816ab4aecc186066813b4c4945b7605beb35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ee11a934838573e76578293c9f5b337476a26e37d5f9204a550507880730c10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f87b2784fed24ecb995016c7b8cbde7e2f29baaa6d3a54e51c8085b5f8fccb1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bae222e6361f8c160e2a4627cf7175831ed418acdfa75566db4cd24190d2ba98)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a7ecb2415bd68676513da69eacc94fe652c81a8e4a96e33818371992d88e57e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d07c153949e68ea94c40532ef19acfb7ea9f7a31d41ec4fd45f4709fdd051505)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e103e40d6c08d479d338a49cd779ec4e908c52668f0cef18c1506f1fb251c8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87139e76691035a577da2c7a5067114a084e1adea0534e73db7c1fdbc640cad0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0698b414f2dc1d1e989e89cf66f01e49860403a6d59e09462a40bc0323111dcf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffb39897dd31eaabd3f1dc47b75dd62ac555689e0e71d64b2ef4b528ea17ff19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dba8bf74e1c5e5a348a008d1c93137a67207dd1adf5b2cf4e20b1887a20dbd4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b690e8e40b612f741522986ad413f7dba8f84b1e04e3f5f74867b2783d2fb02a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorMergeTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__390d99ad54d778101918767906a8e5875889d91815fc3ead0557e737a2b7766d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7edce3e0a4a9748fb629b2bc1c5f52dfe53c4bf4f24cf23487fcdf24fe06d789)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f98639d52e4a68ec9f05971227d902b93b2f993f4cb15a48f6caeb217277de4d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d5a58eaaf877ff10ee63dafc4839569612f711ec4f48cc7160d482c75e0858e)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59f92efa64b210a280314a760583f1bf1e30d8507e2c0cdc13463374f91c4e1c)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65333cab26ea718c5e7a4264b1177fb167e8279f57126d62db9636bef2da19f5)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f32bb4c864d2be3c19686c046b662e1c54b6749b7888a67fcc0255e6266f6720)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27733ff686a66df36a85379bae32485bfe79ddadc6b152d98bfb474016d7e2e3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19e3a66883d88119987f54ef69646658cb826685abe8c225941c7ffd3d3463cc)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e5318734ff10c7098c20d06d21723c20ffccdb61ee00d6e3b62cabd1590e1cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4b04a0ab31277c839e195dbc3f5a4c85c0cabac17c739af094c78b4527a3960)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__317df56ad9ee789480360627a9128cd3e9432c27b1d887dac321fd0726efb335)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95853f0ae28a468df94eefcb51248209165cfbf421df33795cb87b9600ecd562)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64dde7bba52771b87a251415ffbf748cee1255f9e7ad8adeee9382b849e1156a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac6048ddee415791c33d30e5dcd8022d34ceaa0c883f85060f5ce6f8abb6c905)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__067ee01f5d8320c61b6c6ed4f82398a0070277db6eccf0fe99313fa1cc636d29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee1c812877a3a96c43838467c326bed9728a54666767d5fabfce6b86c394a48c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3689684d0617508cf1cab9b17f4ebb858796b751b779f216d0121c873cfc59f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e158699c53df1318eb57b3dbb15760b49676652f32b65f3d2271d38698522b3a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30200beb164861c1f896c171f9c64cd8c76700c3e9d48aae23abae89f7b42b15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a64c9f6b998e638747b440c6c7165fc08b1e2cae27f134a2f3856bad6480f17a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__624deebe75b3a91135c72139bcb520cd557e95061121e18ea6cedba079abf811)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b6b9bb25a3d660b12670665149fc355bd92f80ca7cf7083374164c7802068c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ebfc4c7b4f3d776c35d7e1c7e50432a0d5a924dbe477973784e228e2c4fbb61)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56ef393c3b7279d3b9105c19ac31de16b222aff076d05e4f71d45f74e6756f47)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__877525f2af01f77e1fbbecfa500c5e64a02c1986e4c52dd515954d791fbbb489)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9750ee3f1087dba110cc9d276748b7bc8440c6d2c02c07aebb825b8519cc44a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e819e37d46bd0aa0357aeec727f0bc41d94b692b9a565861e91aa465b5350b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6e61ca8bf6949c5a60e5c20090fdd06a62473bd2e847e11df617237dc1caa5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__407348591446bac9b6d9e50ab3491dd7d196e0f62936c98c9b26cd2e8b996ff0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__928f9c4d072dc3d7fb0f66135ef5ac79cfbf2444d5b7cefab997756ab3bd098c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cfaf44c51d8a9d5036766795c582387e1ac4e42e0e84d1b7bc55ad515889009f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1645a515574966096f03d5de4030d7a1bd955a2c1437e8acd960a712c762ed46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffc07e6d6c6f0bb3235bbd191cf6e5c8a24ecf8e39ba1acc8b2522dcb53548a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8ef7c23565b589fee527f969a9460f698646a82a7a08169a62a210638a424c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3449859f312bcd10656f7243e499032dcf57e7bde57008510c5eb2f00c9da8a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49dfae5e06a746ee09a7da31bd03be134ff6f2d6e20816de4c90e70e9667ede0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8401a3f35af75d25921d15ef5201ee179b8be126d317a4d8f0129ca2a289649)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bf7fa38c9b9435673fa1012ea17351c57c870f09a88ad4cd800e8b34e79e124)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f9d47f8c0182111c392e75f86def89033b6de915c5ebd023be482669aa2ab3e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f71cb5345f76f7cf7e1e05c93ffc6537ef670b552e2ea1c3db3c51105689ca45)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46718c135d006be0d69d84ca77b1c7eeb4cf095682a3ba4748b997ff64ccbf2a)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec6d86fe8b42a28f8ad06a862fd135c232cb19fad66b47fac3f912a96cc40916)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08f8d13d57ef9fe02fd13c9afa03ed187da3dd04fa115ca68c2960be292036b4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac268c0a5b90c9880bae6e06d35ab0c32dcd5da6933bdec8ce8fea782d6302c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7334e90065f5d50beda8148a69abc7c557d3c93939f4fa9d6c5173c67e560f89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c350650da2e931ca2a7a4dd8a0e9acc4f98779d6643f26ebb807c9fe24836da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab731170a43fcafac2f94344ff3f4e617bee346f3104a25c555f28d3c63b84c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d490931c9ec88e839309c5249b7f4357e083ea3bfb3e1889850851c0ef9ec6f0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91524d35fe7a2d916cbb4a4d1cb60b24edae5bccb7f89e7715f4178f72882f04)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e545f275e742b25ab91497c3f18ba060f2730dce7560e20f7a78af4e30296ca6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8fd01c0655cba1594efded821ff0cc8afb7bfcaca79b8d1946fb5367c7afa59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6327b16b203682f814a7dd4cb31c828d4359d417dda5245dc31f037f854c4771)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cfc847c9a661d094e92de38415623cee610bec62897a5ef0de6054ae734cac42)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e7ee4a00db5b7eb0e926db8d2aa35eb561986f05226cd8e27608636cfd39c8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ef2318dc5204f1afadb5180e0b4907d952fae33c40de66caef87bdc90b7ec39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74c383b065771cd1cfba8b0a304a0c4288341d7dada64325136472e4962d8127)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b7b2fe96fb13359ac0d012df336c050ad6da61b10731a1bc90217b713c07a8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a84639a201c2e7708d795338eb21699a92b8e4f632f06f5c06c00eab3906bd5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4a1d2d70b9d363243cfde909154c00fecf1f01743cde2355616877a82057873)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56c444e80b327b979af8672f5706767ea068c3f7b2b647c3c8736e61df5b6386)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__757b6ccbd9c2a96b192d83a4b4c109d8edd9465155a31b91be1f65d55d72e54e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__075ed1006465154e33384cb530567f3072a3ae5c5b1879c35e69f6e9ea7291a9)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a759d96d54c084e8944e4f16ba67719978ebed673d99a24ba6490988cf85487e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7f24d25e2b265725141194c2823e9ddbeaf93715672138719b1dcaab9cacc54)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b773b4431512adbffaef996917bc231baebf3f40ea03d0890be492c29277fa8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9724ae7e43a1a6e788c900c7b6afb1175dd2a2b43fbc16d2cf2d8af412edb637)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba72cddf5935e14c25c8e6a0bdedcf91314ad2d8d3d12a54bda23a2ee412f8f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31b62627f7e01bafaf2dcf04d5d535189a54f86bfb2bb2650980425bd37bbc9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71ee352be3b09ca98e599d12c9b7b73bab11464aea3ec96d3a9ec13abcdfabcc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35e21c19f0959a9669e54c251bd850bfccf8af3f7d950f2b00d239308495dfde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60ec6f5340fef5c1e7db5350708093c801f28fea975a48270b3cbc2e62f3f28a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8633925db10172c9684617630e805c54b35e7eaad2f1c284d03a0531c5bca2da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d746ea724e907914d280d630669a41e5a2304eba9886fcfc404e36a1e2303cee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f776ffff5eb82402de314c8b04bf9ee421f6f419b80468586b08cc37ea233ef7)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0856346a945b568af833317c85b5e8fe1a2014b429b1b631c5172834c785e39e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f052d1c70d49716c87952d137f9d08027c526fe5c0cf9769eaa892ac358d69e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6cfff43a219a2e231c781395789130e9c6b163ca6dbc134eba87ffe65bc4ebb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfa7bf216971f59a37a8f2b4c83599d8fe6b79156976e0525cf65051eb417817)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc2b12e1987a3470a6c67b34f771cb2df65ca08ca11ee56c4307069af97f2b8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfd6991ad11eacf287a1c02df274878fff5897447286c38e97bd249631a6cb20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f30e1ccb15bb603c09c0d90a935bf8cfa989087adcff257bcfa38615f6d396ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fbcec274cc651967d7f6b3d09e3d2f4aea141e9bfa86ea51dae24b802dfc414)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c981dff66844af89a594dd14dff04844a38a865bb3c0c78cafeeffb5724e3f5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05e630af5a4fa7d2dfc29c27692f7780dcd81d3ee34ac83cd08725b891991514)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3763822280cec44adbbd0575cbaa249697a600041e6e84772c59d92c74457bbb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fccd3e655fc09759d7e6e60ea837a5b27f3cd4920e8ed6e5420f4b3a69272de8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f83b42ee4db92bb96e8ee6a4e95bc3c228f5c1f38c49a95fca55ee863867f9f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a74818eec04bf51d13b73e9cfbfdacd7f8336e5d568d1314a5c2040004ff2a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__781a9a1d0169ef2ee42a0aee31b37a1325adcc4a519292fa69dcdcdf5afefc80)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03b33aba315b450865851457a62e5e72ca2872a8aa7d0c4897ad85bc787db2eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da0ec882dbeebc7aaeffb346e64058f4a8c91d35bd64a8a2ec0e9cfc872588ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6794b7e68b28ee5baec9d9c34bd7cd937c1057058b40084b4114551092ca178d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd5d9deb89157997294e73985c4271371fb7cf03420af814db05ea023278f9f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__185d736d693233dddd65a7d5a54c2e5ecc467a4ceec8ab258994179d370ce7d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dafa3d00ffa4defe0b8e44cd9fb2be968ed224a45afb4f6cbde5f88af93c771)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d88737354fa25ca07b13ffa0e46f8609d1c06c6662175e5c3befa7e9a29bf13)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f93a9b34b4c5237d1ea1cae9ea754583b43a50e12e2d1c5fe74d602c7d92f5a)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cfd8afc6fa8a0bf9ba3fe32e1aa30874dd915f39e61e9506fd52596cfd3c10b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54ed9fb95dd05cf5312317731f1a8141209a7df5c61682df44c0157e649019db)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9dbf5cfd56f8618ae26024c26e4d652fdfe90b9d79f3abc92dea4993c6692c7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56661971fbdae36f5dbf8380331f7eb3d6b9079d4e8696b1912898b85b943bb9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3f82d6e7afc821271ca2b2d3073f42b5b123744711fc2511d07d190b6bc9769)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf3aab56a0c96c16366cf8f39b4a7b7d4c243e478d878cee5123ee3ccbd7411b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b05fa759cefedd64743b1c6b92dbbe67ab6ae28cf3e09e5d97c8e4d8c6ae5d3d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c42e1c881f7f4b7225cf94d2d9f107ed800340964fdb64441df3eb92a255b1c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aac87581bca2f70001cbbc75eede64e0f04c1387aae7d00904671619505a9649)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abb8f7cc3535cbc15ea8fb07611fb253637a5431bfddd4c4f19d28653bf3e879)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ebbb364ce2133f72d98c1c098b309e58c96ed54e10e33bae934748093466a3a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a422ce8c291a648b63a41c150ca666555da295aca25977e28b9aaaed797576a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7974f515499e6eccf218e0530e1a6a7472cfde4e91eab95eb48dd1b50f02752e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4d0ab93b75dfefc1852dc4b63e40cd264db4d463fcbec792588c1e20294d265)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1746232b92013328e8040fa9a9dba7f031485d0365f5626f28c54829c3b6e53)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1c3b52a64ba637ae3142da5cbcb475216e9965a6e6b783d3bfdfe5fd8948cf5)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48356d23d11364b9f5f37edab85687887b7ea815fd3be038bfd9692f5438c839)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87506a4abd3a29d18322580cc162d194626d0978c3699411ba656f7d544a82ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__023b208574fa17fb847f025f71bfb96d265d1ea624d455449adf22cb4f75fe94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f282ada9c0953fd7ba936c442b817bbc77d0993156b31cb5e3e5d0dbbc1c598b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb1a6389068740df2f227d1d6c37880e558837ac7886e094542ad678e06a9041)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__921e897e09a808db77c5f18f1e6d1d02bc077c0573fd5f525333fdea2561fde3)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6fdc0937e2ee4447955ce2489ce89df25c5879faab88c6a7353532499081a8e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17302eb905b0e7aa6d429d5e97c3376a50bb7eb52d946c3073eb7ec2f9d5b458)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c379b56d8d68d684e3cf27be1e768c1521f2aca06a81abe415e47dcaa3adc45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7aa79910903e0b5ea36bb670d4acfe663c7465cfe966563ac0e9719cbbb4d7c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ca1ef57ca1a32da805461cf3f33abb0a14c15a8c75da76f5536be59744dd05e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37a8ec266f97190fbf6e035568a84a9ac3d1cc4e6aa59444b0d680c9b903e46c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6a742ebcb2dfdf28170298578adf86fffb4eeefdf2c3cdd7ee60a960600aca4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a98d5e22403e0d69e6ce0491603361a5155b2cc960eea54378a943e4f338e76e)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3df6d29c3014044f516e52034184498fe25ad632d01570b83dbf76dee2aedad)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c192f485889c264d2cfe7a08ad5d0642abe3707b54bde010a6f27e10d1b43942)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4eb7f70c59dac49d5aade1bc4047a34ec84a4e24e95a18d1912cb5c3bc20dda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc118a85d1d66b83715f7f05ddb7f3896ae291750e3c336abc77dc530607d11f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bc635f183263aa12efca9d0dc8a7625a74925aa4d9c7ffcf8b635dd6fae0bf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c322afc0570037584ad0308568ec803cf15a4e7c9b58ae377aed394262cec92)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54693d05b6fe14d6d6aa7af7d882165f65c480a8ad0d30ea79710cfb24fb0cde)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76186885ba0a8c1db5ed59223ed06f2df140034eb5088d44761feda84b183e85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e2d3d404b893609bf20235eae0a143bb062314159f21162026a279450787c65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0851627208f5c9e00b3f7143c16891829c19cd6d036ff37429722decd1fd2605)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putClusterDecisionResource")
    def put_cluster_decision_resource(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResource, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bca3f16eef8a94ef4bad37ab0244fcbaf2e942260c2bfdc689005cc24d9bfa11)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putClusterDecisionResource", [value]))

    @jsii.member(jsii_name="putClusters")
    def put_clusters(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusters, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66cd6dbd090ff5551895ea211ca9b4a921ea83d7e97f73c6e0b067ba3bc4e608)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putClusters", [value]))

    @jsii.member(jsii_name="putGit")
    def put_git(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGit, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab20d59764baefa6ed208f498736fc03179ba6391a3b29310c06c64613498af4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putGit", [value]))

    @jsii.member(jsii_name="putList")
    def put_list(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListStruct, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2eae77762a5ff9ffda4649e83726aee5989afc42575d96e9ced7d6cd681e291)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putList", [value]))

    @jsii.member(jsii_name="putMatrix")
    def put_matrix(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrix, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8373eec72c2ee7c1de1892f0ae92ee020e56efcf9401a020c614df5feecaf366)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMatrix", [value]))

    @jsii.member(jsii_name="putMerge")
    def put_merge(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMerge, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1df2d89662df423389e927becb1f1a550f47e798480bf46bac6c8960e8ab1a18)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMerge", [value]))

    @jsii.member(jsii_name="putPullRequest")
    def put_pull_request(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequest", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e622d5bc5d5dc2c1c77fc7406eaa9ff7411103138a457c3ccb1a666d6f8199a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putPullRequest", [value]))

    @jsii.member(jsii_name="putScmProvider")
    def put_scm_provider(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProvider", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__212f6503435654bccd35f58e62fa122d22510792433ba94281d2956ea92c3105)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putScmProvider", [value]))

    @jsii.member(jsii_name="putSelector")
    def put_selector(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorSelectorMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        value = ApplicationSetSpecGeneratorSelector(
            match_expressions=match_expressions, match_labels=match_labels
        )

        return typing.cast(None, jsii.invoke(self, "putSelector", [value]))

    @jsii.member(jsii_name="resetClusterDecisionResource")
    def reset_cluster_decision_resource(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClusterDecisionResource", []))

    @jsii.member(jsii_name="resetClusters")
    def reset_clusters(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClusters", []))

    @jsii.member(jsii_name="resetGit")
    def reset_git(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGit", []))

    @jsii.member(jsii_name="resetList")
    def reset_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetList", []))

    @jsii.member(jsii_name="resetMatrix")
    def reset_matrix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatrix", []))

    @jsii.member(jsii_name="resetMerge")
    def reset_merge(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMerge", []))

    @jsii.member(jsii_name="resetPullRequest")
    def reset_pull_request(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPullRequest", []))

    @jsii.member(jsii_name="resetScmProvider")
    def reset_scm_provider(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScmProvider", []))

    @jsii.member(jsii_name="resetSelector")
    def reset_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelector", []))

    @builtins.property
    @jsii.member(jsii_name="clusterDecisionResource")
    def cluster_decision_resource(
        self,
    ) -> ApplicationSetSpecGeneratorClusterDecisionResourceList:
        return typing.cast(ApplicationSetSpecGeneratorClusterDecisionResourceList, jsii.get(self, "clusterDecisionResource"))

    @builtins.property
    @jsii.member(jsii_name="clusters")
    def clusters(self) -> ApplicationSetSpecGeneratorClustersList:
        return typing.cast(ApplicationSetSpecGeneratorClustersList, jsii.get(self, "clusters"))

    @builtins.property
    @jsii.member(jsii_name="git")
    def git(self) -> ApplicationSetSpecGeneratorGitList:
        return typing.cast(ApplicationSetSpecGeneratorGitList, jsii.get(self, "git"))

    @builtins.property
    @jsii.member(jsii_name="list")
    def list(self) -> ApplicationSetSpecGeneratorListStructList:
        return typing.cast(ApplicationSetSpecGeneratorListStructList, jsii.get(self, "list"))

    @builtins.property
    @jsii.member(jsii_name="matrix")
    def matrix(self) -> ApplicationSetSpecGeneratorMatrixList:
        return typing.cast(ApplicationSetSpecGeneratorMatrixList, jsii.get(self, "matrix"))

    @builtins.property
    @jsii.member(jsii_name="merge")
    def merge(self) -> ApplicationSetSpecGeneratorMergeList:
        return typing.cast(ApplicationSetSpecGeneratorMergeList, jsii.get(self, "merge"))

    @builtins.property
    @jsii.member(jsii_name="pullRequest")
    def pull_request(self) -> "ApplicationSetSpecGeneratorPullRequestList":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestList", jsii.get(self, "pullRequest"))

    @builtins.property
    @jsii.member(jsii_name="scmProvider")
    def scm_provider(self) -> "ApplicationSetSpecGeneratorScmProviderList":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderList", jsii.get(self, "scmProvider"))

    @builtins.property
    @jsii.member(jsii_name="selector")
    def selector(self) -> "ApplicationSetSpecGeneratorSelectorOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorSelectorOutputReference", jsii.get(self, "selector"))

    @builtins.property
    @jsii.member(jsii_name="clusterDecisionResourceInput")
    def cluster_decision_resource_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]], jsii.get(self, "clusterDecisionResourceInput"))

    @builtins.property
    @jsii.member(jsii_name="clustersInput")
    def clusters_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]], jsii.get(self, "clustersInput"))

    @builtins.property
    @jsii.member(jsii_name="gitInput")
    def git_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]], jsii.get(self, "gitInput"))

    @builtins.property
    @jsii.member(jsii_name="listInput")
    def list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]], jsii.get(self, "listInput"))

    @builtins.property
    @jsii.member(jsii_name="matrixInput")
    def matrix_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]], jsii.get(self, "matrixInput"))

    @builtins.property
    @jsii.member(jsii_name="mergeInput")
    def merge_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]], jsii.get(self, "mergeInput"))

    @builtins.property
    @jsii.member(jsii_name="pullRequestInput")
    def pull_request_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequest"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequest"]]], jsii.get(self, "pullRequestInput"))

    @builtins.property
    @jsii.member(jsii_name="scmProviderInput")
    def scm_provider_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProvider"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProvider"]]], jsii.get(self, "scmProviderInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorInput")
    def selector_input(self) -> typing.Optional["ApplicationSetSpecGeneratorSelector"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorSelector"], jsii.get(self, "selectorInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGenerator]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGenerator]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGenerator]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a225905a42c3f5a7d72b911e80ec48fad61480fceb545fcfa0011b5558cbc3ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequest",
    jsii_struct_bases=[],
    name_mapping={
        "bitbucket_server": "bitbucketServer",
        "filter": "filter",
        "gitea": "gitea",
        "github": "github",
        "gitlab": "gitlab",
        "requeue_after_seconds": "requeueAfterSeconds",
        "template": "template",
    },
)
class ApplicationSetSpecGeneratorPullRequest:
    def __init__(
        self,
        *,
        bitbucket_server: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestBitbucketServer", typing.Dict[builtins.str, typing.Any]]] = None,
        filter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestFilter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        gitea: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGitea", typing.Dict[builtins.str, typing.Any]]] = None,
        github: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGithub", typing.Dict[builtins.str, typing.Any]]] = None,
        gitlab: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGitlab", typing.Dict[builtins.str, typing.Any]]] = None,
        requeue_after_seconds: typing.Optional[builtins.str] = None,
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param bitbucket_server: bitbucket_server block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_server ApplicationSet#bitbucket_server}
        :param filter: filter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#filter ApplicationSet#filter}
        :param gitea: gitea block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitea ApplicationSet#gitea}
        :param github: github block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#github ApplicationSet#github}
        :param gitlab: gitlab block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitlab ApplicationSet#gitlab}
        :param requeue_after_seconds: How often to check for changes (in seconds). Default: 30min. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(bitbucket_server, dict):
            bitbucket_server = ApplicationSetSpecGeneratorPullRequestBitbucketServer(**bitbucket_server)
        if isinstance(gitea, dict):
            gitea = ApplicationSetSpecGeneratorPullRequestGitea(**gitea)
        if isinstance(github, dict):
            github = ApplicationSetSpecGeneratorPullRequestGithub(**github)
        if isinstance(gitlab, dict):
            gitlab = ApplicationSetSpecGeneratorPullRequestGitlab(**gitlab)
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorPullRequestTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__203cadf2106f86fc8eaf5574db847e99679021ab0fadd004064ff706b7c1971c)
            check_type(argname="argument bitbucket_server", value=bitbucket_server, expected_type=type_hints["bitbucket_server"])
            check_type(argname="argument filter", value=filter, expected_type=type_hints["filter"])
            check_type(argname="argument gitea", value=gitea, expected_type=type_hints["gitea"])
            check_type(argname="argument github", value=github, expected_type=type_hints["github"])
            check_type(argname="argument gitlab", value=gitlab, expected_type=type_hints["gitlab"])
            check_type(argname="argument requeue_after_seconds", value=requeue_after_seconds, expected_type=type_hints["requeue_after_seconds"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bitbucket_server is not None:
            self._values["bitbucket_server"] = bitbucket_server
        if filter is not None:
            self._values["filter"] = filter
        if gitea is not None:
            self._values["gitea"] = gitea
        if github is not None:
            self._values["github"] = github
        if gitlab is not None:
            self._values["gitlab"] = gitlab
        if requeue_after_seconds is not None:
            self._values["requeue_after_seconds"] = requeue_after_seconds
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def bitbucket_server(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServer"]:
        '''bitbucket_server block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_server ApplicationSet#bitbucket_server}
        '''
        result = self._values.get("bitbucket_server")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServer"], result)

    @builtins.property
    def filter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestFilter"]]]:
        '''filter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#filter ApplicationSet#filter}
        '''
        result = self._values.get("filter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestFilter"]]], result)

    @builtins.property
    def gitea(self) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGitea"]:
        '''gitea block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitea ApplicationSet#gitea}
        '''
        result = self._values.get("gitea")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGitea"], result)

    @builtins.property
    def github(self) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGithub"]:
        '''github block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#github ApplicationSet#github}
        '''
        result = self._values.get("github")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGithub"], result)

    @builtins.property
    def gitlab(self) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlab"]:
        '''gitlab block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitlab ApplicationSet#gitlab}
        '''
        result = self._values.get("gitlab")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlab"], result)

    @builtins.property
    def requeue_after_seconds(self) -> typing.Optional[builtins.str]:
        '''How often to check for changes (in seconds). Default: 30min.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        '''
        result = self._values.get("requeue_after_seconds")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequest(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServer",
    jsii_struct_bases=[],
    name_mapping={
        "api": "api",
        "project": "project",
        "repo": "repo",
        "basic_auth": "basicAuth",
    },
)
class ApplicationSetSpecGeneratorPullRequestBitbucketServer:
    def __init__(
        self,
        *,
        api: builtins.str,
        project: builtins.str,
        repo: builtins.str,
        basic_auth: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param project: Project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param repo: Repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param basic_auth: basic_auth block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        if isinstance(basic_auth, dict):
            basic_auth = ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth(**basic_auth)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0517b2d984a21e3bbeb5ff1934e186f0b5b0a36d6e23f22d453e30ec89cde1ae)
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument repo", value=repo, expected_type=type_hints["repo"])
            check_type(argname="argument basic_auth", value=basic_auth, expected_type=type_hints["basic_auth"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "api": api,
            "project": project,
            "repo": repo,
        }
        if basic_auth is not None:
            self._values["basic_auth"] = basic_auth

    @builtins.property
    def api(self) -> builtins.str:
        '''The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        assert result is not None, "Required property 'api' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def project(self) -> builtins.str:
        '''Project to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        assert result is not None, "Required property 'project' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def repo(self) -> builtins.str:
        '''Repo name to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        '''
        result = self._values.get("repo")
        assert result is not None, "Required property 'repo' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def basic_auth(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth"]:
        '''basic_auth block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        result = self._values.get("basic_auth")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestBitbucketServer(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth",
    jsii_struct_bases=[],
    name_mapping={"password_ref": "passwordRef", "username": "username"},
)
class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth:
    def __init__(
        self,
        *,
        password_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef", typing.Dict[builtins.str, typing.Any]]] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_ref: password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        :param username: Username for Basic auth. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        if isinstance(password_ref, dict):
            password_ref = ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(**password_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae89478c0b088ffbc5ed926f3d8274033b93ec12f89ae675583648d16464cbc8)
            check_type(argname="argument password_ref", value=password_ref, expected_type=type_hints["password_ref"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if password_ref is not None:
            self._values["password_ref"] = password_ref
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def password_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef"]:
        '''password_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        '''
        result = self._values.get("password_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef"], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Username for Basic auth.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f55196bd7eac7c65a3dde93750cf348b7f44a3c53f461200272411bb997341f5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putPasswordRef")
    def put_password_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putPasswordRef", [value]))

    @jsii.member(jsii_name="resetPasswordRef")
    def reset_password_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordRef", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordRef")
    def password_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefOutputReference", jsii.get(self, "passwordRef"))

    @builtins.property
    @jsii.member(jsii_name="passwordRefInput")
    def password_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef"], jsii.get(self, "passwordRefInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__915921a4fe64fbff96eede8f2e3894a9592761ba25f8f5872e683e1a77a404ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__813353484ca784ed760b24ab5835bbec72df75a989d343e3c13438d0c0fdf0c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5a52af03710e6c63e0e7a978fc624f26b7467feb17aef2d3c8286850595a61b)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34c714227c4ba00732ec0302c8525413c04554384cc3a10fa65058d351b0f412)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e439afd1606ddf71ee6a8a63daedaefd814e77889e011d65988c3ba4f89a58e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dee7e43d8cf09caa5a533d475607ffec05f99ea48d99868d10ab0a45370308b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b25f154d9f97c0509ed2df2533290725d5acb50d0d659a9e85d5f6d49a543af9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestBitbucketServerOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestBitbucketServerOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ec6850188bf108ace3b682fb0ce93c7467e6e9377ad63fc39de043cdc5f064b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBasicAuth")
    def put_basic_auth(
        self,
        *,
        password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_ref: password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        :param username: Username for Basic auth. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        value = ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth(
            password_ref=password_ref, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putBasicAuth", [value]))

    @jsii.member(jsii_name="resetBasicAuth")
    def reset_basic_auth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBasicAuth", []))

    @builtins.property
    @jsii.member(jsii_name="basicAuth")
    def basic_auth(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthOutputReference, jsii.get(self, "basicAuth"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="basicAuthInput")
    def basic_auth_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth], jsii.get(self, "basicAuthInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="repoInput")
    def repo_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoInput"))

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3edfce164feb54ae884f8f4b42589e81e28bff3bb123908440d70a15116c1883)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fab40d570dc1530cf71db245277e2288ed0d063c7e58ee05d6816df55ef2f9c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="repo")
    def repo(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repo"))

    @repo.setter
    def repo(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67b7d3bf72d63ed47bb7b7ae4c630784fcb5530e2d795adf8dd59f524a07959e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repo", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e57697c4cdbec2b9ee744f0011ea58f4397f1055a66f7e8e1abce29538c83830)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestFilter",
    jsii_struct_bases=[],
    name_mapping={"branch_match": "branchMatch"},
)
class ApplicationSetSpecGeneratorPullRequestFilter:
    def __init__(self, *, branch_match: typing.Optional[builtins.str] = None) -> None:
        '''
        :param branch_match: A regex which must match the branch name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#branch_match ApplicationSet#branch_match}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab5269c82a0e123a20487a11801d6c6c3c8a3c7dde94e0e48794c69dd7a5bbdf)
            check_type(argname="argument branch_match", value=branch_match, expected_type=type_hints["branch_match"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if branch_match is not None:
            self._values["branch_match"] = branch_match

    @builtins.property
    def branch_match(self) -> typing.Optional[builtins.str]:
        '''A regex which must match the branch name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#branch_match ApplicationSet#branch_match}
        '''
        result = self._values.get("branch_match")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestFilter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestFilterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestFilterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a4b3f6a90c3b0dff4b8a914ebf1a7e4b3af46c2e7a9d566955006f8b2c8092d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestFilterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a650d7035f7a12cdbff3da1168c29bfb76fca4a07dcb6140349c5f8351c12d3)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestFilterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__576fca86d71062ffd1b9cbafdb2df9ec6205c64495839fcf91d68141094adc9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2b6a87026c5d8c5810c2989c6582bbe7a807922792ccdbaa5b532dba52ca2d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06a915863daf8a673b31c6fb95d1873e08631c765fed4b55b416722e81183ac6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__870549fbaa335cd06ebb0a65d0854384a72c30d90b64072df5ce91456ca5ae2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestFilterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestFilterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce4d7f1224f2d585df0947ad4ec9a359c1aecf0ce861bab802a481000de6de1e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetBranchMatch")
    def reset_branch_match(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBranchMatch", []))

    @builtins.property
    @jsii.member(jsii_name="branchMatchInput")
    def branch_match_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "branchMatchInput"))

    @builtins.property
    @jsii.member(jsii_name="branchMatch")
    def branch_match(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "branchMatch"))

    @branch_match.setter
    def branch_match(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9cc80df0953b3f9b3b4a4e8d0efee22948f13f7ab567ae5a6c3706c598fbbd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "branchMatch", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestFilter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestFilter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestFilter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__058979965205bf2db0a86abcadf096606f09642472702cc59a771631c2021031)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGitea",
    jsii_struct_bases=[],
    name_mapping={
        "api": "api",
        "owner": "owner",
        "repo": "repo",
        "insecure": "insecure",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorPullRequestGitea:
    def __init__(
        self,
        *,
        api: builtins.str,
        owner: builtins.str,
        repo: builtins.str,
        insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGiteaTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Gitea API URL to talk to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param owner: Gitea org or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param repo: Gitea repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param insecure: Allow insecure tls, for self-signed certificates; default: false. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorPullRequestGiteaTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfe87d3dc56175d0ebbe3387b52a7155c16bc9b0c98cf7e7884150003c01305d)
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument owner", value=owner, expected_type=type_hints["owner"])
            check_type(argname="argument repo", value=repo, expected_type=type_hints["repo"])
            check_type(argname="argument insecure", value=insecure, expected_type=type_hints["insecure"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "api": api,
            "owner": owner,
            "repo": repo,
        }
        if insecure is not None:
            self._values["insecure"] = insecure
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def api(self) -> builtins.str:
        '''The Gitea API URL to talk to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        assert result is not None, "Required property 'api' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def owner(self) -> builtins.str:
        '''Gitea org or user to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        '''
        result = self._values.get("owner")
        assert result is not None, "Required property 'owner' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def repo(self) -> builtins.str:
        '''Gitea repo name to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        '''
        result = self._values.get("repo")
        assert result is not None, "Required property 'repo' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def insecure(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allow insecure tls, for self-signed certificates; default: false.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        '''
        result = self._values.get("insecure")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGiteaTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGiteaTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGitea(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGiteaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGiteaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38f66d34e8d65b687eed93c9723263db27547d5cb7e3862959f7e3ca65d3bdf0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGiteaTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetInsecure")
    def reset_insecure(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInsecure", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestGiteaTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestGiteaTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="insecureInput")
    def insecure_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "insecureInput"))

    @builtins.property
    @jsii.member(jsii_name="ownerInput")
    def owner_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ownerInput"))

    @builtins.property
    @jsii.member(jsii_name="repoInput")
    def repo_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGiteaTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGiteaTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1322f1a955a13e9281743fdced87ea95016bccf7b4842cd9f38e6451e5865bc9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="insecure")
    def insecure(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "insecure"))

    @insecure.setter
    def insecure(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4387ec81daf5567489e67e4cdfc1adedbcb1ced2224a623da463949331eecf9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "insecure", value)

    @builtins.property
    @jsii.member(jsii_name="owner")
    def owner(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "owner"))

    @owner.setter
    def owner(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e50a589eb8020c3cfe99fa656b39e51a2d4c2c9223bd9fbba5254db45535bb3b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "owner", value)

    @builtins.property
    @jsii.member(jsii_name="repo")
    def repo(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repo"))

    @repo.setter
    def repo(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58f5f034f43860710c3456412da235c34db5159b92e0f8452b86bbc5e5cff5f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repo", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa95dfcc7bb30d1d1638a934913ca5b14e5f2665f943bf8a0fcd34fcd47f2175)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGiteaTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorPullRequestGiteaTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7edd9339d58eb853701bc3b068cd7cde9832896c3457e31814e7b45527aff120)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGiteaTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGiteaTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGiteaTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c67488e22c3e97d3feeb2296492e50fa811384776e80cc79b1e57a08f873a221)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c49408a4645c98a0f582618b6e441e9377d71a8f3c2fe454ce729970bfe089d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__755a60113e9193a7586f8762d84930e847d14ceb723b84a3ed8499608027ad8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67323ab7da1bff1c2b9dbff584f34f9540d97927223aca29c46beee706a1b90d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGithub",
    jsii_struct_bases=[],
    name_mapping={
        "owner": "owner",
        "repo": "repo",
        "api": "api",
        "app_secret_name": "appSecretName",
        "labels": "labels",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorPullRequestGithub:
    def __init__(
        self,
        *,
        owner: builtins.str,
        repo: builtins.str,
        api: typing.Optional[builtins.str] = None,
        app_secret_name: typing.Optional[builtins.str] = None,
        labels: typing.Optional[typing.Sequence[builtins.str]] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGithubTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: GitHub org or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param repo: GitHub repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param api: The GitHub API URL to talk to. Default https://api.github.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        :param labels: Labels is used to filter the PRs that you want to target. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorPullRequestGithubTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f0df171e8b0f59e1da273c89c5e895ed2afa11f9bb0544b0c81bb3bde122020)
            check_type(argname="argument owner", value=owner, expected_type=type_hints["owner"])
            check_type(argname="argument repo", value=repo, expected_type=type_hints["repo"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument app_secret_name", value=app_secret_name, expected_type=type_hints["app_secret_name"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "owner": owner,
            "repo": repo,
        }
        if api is not None:
            self._values["api"] = api
        if app_secret_name is not None:
            self._values["app_secret_name"] = app_secret_name
        if labels is not None:
            self._values["labels"] = labels
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def owner(self) -> builtins.str:
        '''GitHub org or user to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        '''
        result = self._values.get("owner")
        assert result is not None, "Required property 'owner' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def repo(self) -> builtins.str:
        '''GitHub repo name to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        '''
        result = self._values.get("repo")
        assert result is not None, "Required property 'repo' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The GitHub API URL to talk to. Default https://api.github.com/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def app_secret_name(self) -> typing.Optional[builtins.str]:
        '''Reference to a GitHub App repo-creds secret with permission to access pull requests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        '''
        result = self._values.get("app_secret_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Labels is used to filter the PRs that you want to target.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGithubTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGithubTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGithub(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGithubOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGithubOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__247f29fa9e6cecd7e0670db181ffab94c689a4d7008e81822424a0bd98419341)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGithubTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @jsii.member(jsii_name="resetAppSecretName")
    def reset_app_secret_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppSecretName", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestGithubTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestGithubTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="appSecretNameInput")
    def app_secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appSecretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="ownerInput")
    def owner_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ownerInput"))

    @builtins.property
    @jsii.member(jsii_name="repoInput")
    def repo_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGithubTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGithubTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e95b3c69a059da147879ce14e3c63fecc000240bf929596a51f36d1b06d0c534)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="appSecretName")
    def app_secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appSecretName"))

    @app_secret_name.setter
    def app_secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__696bd8ba3b4e3fc2542c4eb62175579de6765bf87b80c789eae09251f2e04615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appSecretName", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd3014496f74eef6dc79c9ed056d9ea46302875cbcc453f17009241e1327aef6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="owner")
    def owner(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "owner"))

    @owner.setter
    def owner(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfd27eb28daf97607397353963ceec107796f6783ff6afdf0586345d65975e8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "owner", value)

    @builtins.property
    @jsii.member(jsii_name="repo")
    def repo(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repo"))

    @repo.setter
    def repo(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a0b3c98ce7d7d7e75c1fc453e945b201573492130b3cb48bede5572a6b61512)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repo", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22d5847cc12cc0427140dc269290f7487e116378dd5b1b2236e5246c38a2af2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGithubTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorPullRequestGithubTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5611c3c9fce09e90157aa63008db4502264922925ff2502b0ba2af2ef1666e4a)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGithubTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGithubTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGithubTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd718ba338ed18290a55e3c4359c259580610d2e15e6488d79bbe45f69e1a830)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38d94a0cc645a7529846e167343ddcf446d814d15edb5dabb171f87022a82a5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__064b05cf35795392fbcd1d0fff17f11f2e5021237fbb316e9d44caff5015b015)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGithubTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGithubTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGithubTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46d0f287d8e10f968907354e56f7dfa39a1bfc5fb6ae963ac2f410d3c4800dd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGitlab",
    jsii_struct_bases=[],
    name_mapping={
        "project": "project",
        "api": "api",
        "labels": "labels",
        "pull_request_state": "pullRequestState",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorPullRequestGitlab:
    def __init__(
        self,
        *,
        project: builtins.str,
        api: typing.Optional[builtins.str] = None,
        labels: typing.Optional[typing.Sequence[builtins.str]] = None,
        pull_request_state: typing.Optional[builtins.str] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestGitlabTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param project: GitLab project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param api: The GitLab API URL to talk to. If blank, uses https://gitlab.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param labels: Labels is used to filter the PRs that you want to target. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param pull_request_state: additional MRs filter to get only those with a certain state. Default: "" (all states). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pull_request_state ApplicationSet#pull_request_state}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorPullRequestGitlabTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c4dbe079a50babd607af49bd349d953698dd98365e10bf4b75461ad3f082961)
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument pull_request_state", value=pull_request_state, expected_type=type_hints["pull_request_state"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "project": project,
        }
        if api is not None:
            self._values["api"] = api
        if labels is not None:
            self._values["labels"] = labels
        if pull_request_state is not None:
            self._values["pull_request_state"] = pull_request_state
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def project(self) -> builtins.str:
        '''GitLab project to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        assert result is not None, "Required property 'project' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The GitLab API URL to talk to. If blank, uses https://gitlab.com/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Labels is used to filter the PRs that you want to target.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def pull_request_state(self) -> typing.Optional[builtins.str]:
        '''additional MRs filter to get only those with a certain state. Default:  "" (all states).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pull_request_state ApplicationSet#pull_request_state}
        '''
        result = self._values.get("pull_request_state")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlabTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlabTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGitlab(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGitlabOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGitlabOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7f29ffb6018612a757fe85f87cfc6f61a3f7521dd9285a2bbff297b036f3233)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGitlabTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetPullRequestState")
    def reset_pull_request_state(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPullRequestState", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestGitlabTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestGitlabTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="pullRequestStateInput")
    def pull_request_state_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pullRequestStateInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlabTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestGitlabTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c3d1d426d11369a881feacb76348bffb02f2a743d4c891e7eeaec6466c0ff63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a407532a0e5bd62d8e0e1b52ec66daecf3859b3004c8c997fcf120e9461fe5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c04491ea7c0a0f068ea1d2ce0ec98b47bd0214de45289b78335176da1be9d22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="pullRequestState")
    def pull_request_state(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pullRequestState"))

    @pull_request_state.setter
    def pull_request_state(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84a01535a8d9b197fbf90fd978ae1dcad2c8062f0c98ff55863bd543b2f886a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pullRequestState", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c47c59a25f33785c96cbd34937a68ea60dea65689b2cf5479989d39920b1fb5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGitlabTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorPullRequestGitlabTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34255e2cb821169bdb4b869c9dcd4b2b8f7bf71a50d24a2fcf5b5757f5d27fa7)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestGitlabTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestGitlabTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestGitlabTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf5c999f6612ed1423d5537a9bcdb4475dee1149f2c0f89fea05ca88f60f2bea)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__520e4a3a9ce483ec83580d38536ed06933c758f01d7096603f8633166b7849f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c0069fc3c23f1d3694da280b34f35a7b91a523de79cac73d0469ca2e685b087)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5bcf3e70d8da2a4dfda5b8d3bcbeb4c52c10eeed4ccfbe8e5ba6dfcb08945a72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff74ccb339b007821752b406bcab667f95cb5e009bde43ff7dfb071630906e6d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee048c5fd5d19dbec88194a86d65fb7e6b6bfcad38d3ae1c2d163a4cda768b0a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f3fff9f204cd09dfde26c8c159f3b061b58b7cc9a81685325a76a640a7e57fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a521b822f33cab597170e572ca6cce0a7b5530699eeaa34c71e502163bb05f0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__beab4eabf961db3ec44c2c395b94a54739a1a8ed87586bd113704ff957a36f68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequest]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequest]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequest]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16625b3d1f765a211ed4b2b20c093f12910d3d1d3b2202dd4f23d1f5f54c88a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de01d9c079b8a3893de6978c8416574594a28349d822bc186834e804dbafc60d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putBitbucketServer")
    def put_bitbucket_server(
        self,
        *,
        api: builtins.str,
        project: builtins.str,
        repo: builtins.str,
        basic_auth: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param project: Project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param repo: Repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param basic_auth: basic_auth block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        value = ApplicationSetSpecGeneratorPullRequestBitbucketServer(
            api=api, project=project, repo=repo, basic_auth=basic_auth
        )

        return typing.cast(None, jsii.invoke(self, "putBitbucketServer", [value]))

    @jsii.member(jsii_name="putFilter")
    def put_filter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestFilter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afa5562c6801b2f771104ee93f45cfec281ba58092b32a68b6431e6ebc54964c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFilter", [value]))

    @jsii.member(jsii_name="putGitea")
    def put_gitea(
        self,
        *,
        api: builtins.str,
        owner: builtins.str,
        repo: builtins.str,
        insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Gitea API URL to talk to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param owner: Gitea org or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param repo: Gitea repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param insecure: Allow insecure tls, for self-signed certificates; default: false. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGitea(
            api=api, owner=owner, repo=repo, insecure=insecure, token_ref=token_ref
        )

        return typing.cast(None, jsii.invoke(self, "putGitea", [value]))

    @jsii.member(jsii_name="putGithub")
    def put_github(
        self,
        *,
        owner: builtins.str,
        repo: builtins.str,
        api: typing.Optional[builtins.str] = None,
        app_secret_name: typing.Optional[builtins.str] = None,
        labels: typing.Optional[typing.Sequence[builtins.str]] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGithubTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: GitHub org or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param repo: GitHub repo name to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo ApplicationSet#repo}
        :param api: The GitHub API URL to talk to. Default https://api.github.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param app_secret_name: Reference to a GitHub App repo-creds secret with permission to access pull requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        :param labels: Labels is used to filter the PRs that you want to target. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGithub(
            owner=owner,
            repo=repo,
            api=api,
            app_secret_name=app_secret_name,
            labels=labels,
            token_ref=token_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putGithub", [value]))

    @jsii.member(jsii_name="putGitlab")
    def put_gitlab(
        self,
        *,
        project: builtins.str,
        api: typing.Optional[builtins.str] = None,
        labels: typing.Optional[typing.Sequence[builtins.str]] = None,
        pull_request_state: typing.Optional[builtins.str] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param project: GitLab project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param api: The GitLab API URL to talk to. If blank, uses https://gitlab.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param labels: Labels is used to filter the PRs that you want to target. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param pull_request_state: additional MRs filter to get only those with a certain state. Default: "" (all states). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pull_request_state ApplicationSet#pull_request_state}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorPullRequestGitlab(
            project=project,
            api=api,
            labels=labels,
            pull_request_state=pull_request_state,
            token_ref=token_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putGitlab", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplate(
            metadata=metadata, spec=spec
        )

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetBitbucketServer")
    def reset_bitbucket_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitbucketServer", []))

    @jsii.member(jsii_name="resetFilter")
    def reset_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilter", []))

    @jsii.member(jsii_name="resetGitea")
    def reset_gitea(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGitea", []))

    @jsii.member(jsii_name="resetGithub")
    def reset_github(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGithub", []))

    @jsii.member(jsii_name="resetGitlab")
    def reset_gitlab(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGitlab", []))

    @jsii.member(jsii_name="resetRequeueAfterSeconds")
    def reset_requeue_after_seconds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequeueAfterSeconds", []))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="bitbucketServer")
    def bitbucket_server(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestBitbucketServerOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestBitbucketServerOutputReference, jsii.get(self, "bitbucketServer"))

    @builtins.property
    @jsii.member(jsii_name="filter")
    def filter(self) -> ApplicationSetSpecGeneratorPullRequestFilterList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestFilterList, jsii.get(self, "filter"))

    @builtins.property
    @jsii.member(jsii_name="gitea")
    def gitea(self) -> ApplicationSetSpecGeneratorPullRequestGiteaOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestGiteaOutputReference, jsii.get(self, "gitea"))

    @builtins.property
    @jsii.member(jsii_name="github")
    def github(self) -> ApplicationSetSpecGeneratorPullRequestGithubOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestGithubOutputReference, jsii.get(self, "github"))

    @builtins.property
    @jsii.member(jsii_name="gitlab")
    def gitlab(self) -> ApplicationSetSpecGeneratorPullRequestGitlabOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestGitlabOutputReference, jsii.get(self, "gitlab"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="bitbucketServerInput")
    def bitbucket_server_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer], jsii.get(self, "bitbucketServerInput"))

    @builtins.property
    @jsii.member(jsii_name="filterInput")
    def filter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]], jsii.get(self, "filterInput"))

    @builtins.property
    @jsii.member(jsii_name="giteaInput")
    def gitea_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea], jsii.get(self, "giteaInput"))

    @builtins.property
    @jsii.member(jsii_name="githubInput")
    def github_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub], jsii.get(self, "githubInput"))

    @builtins.property
    @jsii.member(jsii_name="gitlabInput")
    def gitlab_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab], jsii.get(self, "gitlabInput"))

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSecondsInput")
    def requeue_after_seconds_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "requeueAfterSecondsInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "requeueAfterSeconds"))

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7b9acc2e4ed55c5d8018b28aadd4d31401b8713ce661706695717d704d6f3ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "requeueAfterSeconds", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequest]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequest]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequest]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1f1cdf8584cccff79f9764de53a4dd8879df60ab3a92fa87fe0a84151411171)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorPullRequestTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorPullRequestTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorPullRequestTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d31bafca12ad7656c71f53dc03f2d78996b65648675514f12401f6bcf9cabb22)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateMetadata"], result)

    @builtins.property
    def spec(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5a57c9796a160d0a09d108d13b60d9c0b276f743f5122d29de41315a1eb738c)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5f45b9f4d74d7f74db1ae5fd648d137baa42cd8e8084c37bc3aa4a685ea6434)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f807ccd991e00610173005710cc1887b8a5611f6352c73aff717c7df1bd96d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55d511f5fb9ddcc35e6b8fb07dddf55e9ea3567b51c4b7cf2c6ffbf9557a91b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96fa75f234f5426242ae9b21fddd37575350141b2be56538aa05eb917154bf95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4c2ff5be496fa7ee72fc87eba63ad0419453d08bfe7402443a5697278a96e23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f7922e74251ff611a8c31ea371d68af616d29aaa78cbc4d6296e3bcbeb58ad5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3aaa7988deff86b3c7af293d066fcb37eb410549b138d0c206308e3f3259ecde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__074a457577060bc23396606939050fec75720b9648447713bd392423658b6fd4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6f793487779c5137cd1f4af173d02c2ab68b55e2223efed088011d3845de4db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1563a8ea644a7ef2c1ba6fa215085647542e8a4a41bffee749442bea9686389)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44832f7ef15fee3219675236366994dcaa305f8638aff31125aa1fa21c9b5126)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1bc3192572dcc4f7486a55a146519d2bcc462b448c60c4ab557d46de9b688e2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70a43a13911acf2487e3a4d109ac7e774f798cab7f0997aaf3f99a3da7c344ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__224bb65ff6ec3ee9859ee49ff07ad682169eace40cc4fdf935f5e4b513477908)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af182f32c1010ae5c6163648eec4eb604e41bde991e0c0c731761ddfcc20a95d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc2bba808dc042c90506f42a5efdde28081f71e5eea25fdc611313656d19f10e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a50e7fe0cdcad99ea773330b1732602777454f7b79694f629a75786f9772eb7)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd9b4b0ef60e7d050d4998d7c22a7afd6599e4c2dc532b4409192d1a87124935)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa54254eea1d05885a9a731447ee497412346cb9960167ef9a91eb588b3a8e2b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e31a56a4d11452c4f93bacf51d21e0e6cafb27fa2baec94900966670fe98639)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc7d319cd42724a30eabd5d2f20583aa61ad2a441125520b0230fd327f49682a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5102523fa19ac34d6f53e665a1c4391470957004aeb903fa4acce1da8600c345)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f98e77b9a8c8af9c84dff77c9e178976625003919e767d1451edff5c3d6dd1ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1ec60f5599d9b4fcb8dcdf69f514c67b301fb66ac25b98b1209f46c8d25180b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7810643ab0a7f40b5e6d961a5877efa5bbaddc105637071fef1e49f83553ec2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf48e1663f2fc4830f3ede5f3a48e0428d82cc646f09ec60be67ab3365fd7e31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e21903cb5c3099b2c06f516dc68f637cc0d07e6a00ffff2772f56a1eb7e8891)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ee772f5114868708a65a788281fd820c63bc62ea89e556eaca97880c92002b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4421eb085911b1128dfb2525f8c43ad4fbc65f5df74e26cc8fc076c3a66efb33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ced1f65777a00a940476c89fde4fb28e16afd722e05f6c2813bcc0678287c0b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b6297c3b18165cc75586cb78a4a1c9c726a6e3786485984221175feedcac4a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5931c1ab09c0dc6f5404ad835a379b1d0aad4974ec808b90eba1e91fca44a819)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1dbc01c37743706a51457108d3ac4cb59d6b4d4997261bd8a7c65384607a966a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d75879ee916e2c4b43d38dce6b2e8818423c406207fcd5e160a562cfd3e85453)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0ea12efe8dc1ab9c07cf3b88205deb859cccaa118a64ce54c1f3e2eb4ce1e80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b9d8322c0029c782d681ae26a364f996530ab25a3e4bbad984d3fb93344f94c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__876a73ba86608e448770506dfc3140262b3e809dfac7543c6eeb5c103fd177d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8da67acd587f0eab1925ca3fb84014921ee1f2848d1cca76c59f8aeffdc03f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__889c885a50228d8181dec6ae53b9beeba6075942458abed06d98ee58524fe015)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__274037443c4aae8984f877fc81794bb1ddb56a1fc3610a2de5b5186fd616d950)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ced7589424ab58e49143c349c3d4a9a28a017fa77b7db2b0e6f2633e4dd67a0c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94808b99da325a793f60791e289756ebecef8e5f89c3239f3602aa203a1436ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34341c399fa0a7e9cb75fc57e165d8618dbaae3c397f0c404ad8854a45715cb3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9a83569fcd447b31677b5b23eb15a9315a76aa3b5653caef314ac06783a44c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f7a0b2d49472d37344cabead0f40d8af51ab65993ad844fc66a19fde2bec42f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dd02033d4a12a303c4a2aba7a0e130d0ff0655d5075abf1969068cf6bb7a426)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35d996ef0e82fec49b9e8d8a171bfbb7f2c9a38ab1d9565cb63ce01f30909243)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2809ee9374f1aac590ac26337bd36829fa09fa7c7acee2e046628af76311a56f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2fdd4ceb0655b79bf1fad33bd836dd7d875eba2886731a1e4911bf62597061e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd4af42a76966d0ec5146aa03e0a1d5f944249a65789516331f22585374d0600)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb89fe579010764a19459705a2216e040a84d514ccb48cd39f982f23b49b43b7)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__726dc006b80c62bb2b1bf2ce7a4cabcc68bb3a71510e3a915f960b3d7b90972f)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__229856be41a642d70e67dbe239257138b5617194dd7535fb92a9430c31e4fa43)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22bd94a46cdb4e320a372d1baac540fb22045ae100f0f8e1e2cdc43d8b1cc6b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f72a0c3f8094bc61c83a31aa21d83a0488f8b8d2e2e9ec16b8c1c78405f702e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99fe748ef6b8818425828f4f791948e9719c7c0417c5e8e9897aa6f6bfa08d8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__294ff06d54406d63b2f4f74d00264551df29e79f1fede50368d97cf66d53adbe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__063217dd316dd9da9836e7e5a93a15e94b72df06722e2923b224d528bbf034d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f23b5dea58c195ee4973ad7fd905946a0f51d7bf2b30e97c44c647adaf0661d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3411a09b2e945e5c4b6df580965c1ffeff309eea0aa7bcfb9ba73286b31403bf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa3de1f9aa699c3a03c28da2d49fdc76e31beee0d6ae8b3345866f2b0a976f36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__019ef979d02ffac9d25dddff3f3c93e3223e868a407e5b0797a2b768da183b59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__841bbabb752969b665bff6a991aa20dcc781a9c9876be524bc8bf818f133eae9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb9fc6b465e92ce83633e74b13aa01bfb2d2715a68465998d000ef5640b9db80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6098be9175bf880234596ea66e29003b70020f7241de5469d0a2254fe5695be)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc100f377eec687078c5fe013b3dbea89a33c512e95260e1e9155ecb0df3fbf4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dadb0407f26fd810a176c9d1190fdf4a1e090b2336a27cf1eefa28735a5e09e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__420a8e1785098c4894036161a102eabd15b13ba9750d4cab6b50081bb25e8084)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e47be02c23b40f72fa747b8e5f02284f79542aee9aff47425cf20ef948d719d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce1ee25cb63cafd17beaa2a8bb8884601fd57e5d7e5d8d2bff1977f3dfa01f0d)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__029ccd8fd16434f80eb5810e946e8e527bfdba4ec8bfb650da5c3db9f54cdb6c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf26d1b1002bcb081e8f774d6bdb139ca7960c6a8340a13d23d152e17f0987c0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e740962aca478e0c1e1f5a7305d1281aa9df7269f0b2c282954e4931acfb102d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__befab779e97b108ceef5a9365d92949140e4539424d2e579c290cd7c781a9aaf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bf6a4708ac9fd39069001e8eac6e64db6bb48ea7c75ee09bd95aa35a7236262)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72192b0fe8fee9848ce1ee0caa2a4b4929b809ac33a4ad1194982d8092962220)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09bed79540a55d9e8c78bfd9aaa7febb7449597a6adb434a6fb39b2b4dcc874d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38cce1a806267604341c7015b71336eadef4db4750490276bd31d5e98f80c8ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d22962ce58fd839647f931dc4cf26e7c6b3c7e5d7d588a898e18e4e356d221ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30bf239ac452db840993aae226401848cb42874440e2b32e574222ec4fb68698)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__556cbe6aee9e2ebb44d00ad08d97fb678c02685f8c6fb84f2c3cfc18131e31a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf391a6c8556e67014dad6558422b33715b33dd7754cb292f7b0d5b562d018dc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__584eaaefe1aed9d1978c8143c128d976de55e0be099812b6a697c8d0d11a2131)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b75ebe323c1292d102334648e56e33cd1c9069ac38116e8717ec36231ffbe2a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5605198afc5b72b956b482a251cfff0d56cf3d0bef96b7f2667ca7003d51968)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__483a8add2c699b0a558654c44140a827518c76582809755899fa9a24d94a6b86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__925db1ba373002bcd2f36d31b0244f677f2dd6141d5c40d29228eade5c1e6382)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a34f58ebedb1be6f9cbf91af319e3ff09675e29ef3d3d82440bf010a0261e95)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adc4ccdc161c0bef426097f0473b84adb213d0b8df3490445e85571c33e29838)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e84a4bad9072216a606e7a219e5e526142785986230746dc6f8f0d063f70ec58)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91e34b08e6c9a961aa291cf0c59cc772130654f257a92d9ad715b0dd12a3408a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14e0be0c0ca493c261a84f50e3fc0c6abc6305fc71c3a24b25829ce10a640af3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7af1abb0f8d1b8515cabb687be9f5f227a760abb30f8cb926d3af87e74f1096)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd7d1a94fac8735e86f61dc64127061fed99a2045ff31d1b6d935c6389acf864)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14fb6bc7c2a44193f7b57708629f0fbc3665532f248fa389c9fa1e920320a06a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__307c841c62c13692315bd800c74d569ce3038309a6be3ec7e2b341feaaa00c78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb23c0623e9738917099cde50c1b899702b881ee075c6e687b88fc3531f3448a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca0c6e46809c50f2b3373f2dd91420580b1e3ad7291e1b95ccb31cc202ea4a32)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92575e611c9ffba220efbb21cd80e20b2ad56686328091b0a96401a6cd3b1280)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a73cb245ef56cb18ab7ea95ccac70bc6b26b31a743a7041ac94bd43433588089)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2205d546862da657c973cfcba3ed41a9112ea2262d00196c77f9a3949d41454a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c6ea20349c200411d8ee9199911cbbfb97570a58457474570eed2fe5a03615f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__299cd56ef8481a5714d2b276523c86c49e8eb743228ef672ce8f153b23277056)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8030184ef1bbb8b55207f8064f6c0769d9da053b80824f1539416eb4adcb73b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe195260870e2b6bbdbe21abe82d892864ffbb28af7362ac92bb0835497a53b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7764a6337128e86cdbbe4baf9b65e45d54780a587ee18830ab2cefef48e667e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ecb7887c89130f8faab6bec3ee4ff5752548d487d078c6b02d818e15387ed8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0507d23f4171f6cbbba0594c617e9210d613ae6bd93212c392c360b797ad71a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f795e7a97f15c9b2b6a196a7fabd7fa6bee00be58cf529ce8f53accbd2ccb6f9)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9f0ee80b25094e8f68398f6e6a7f3e3c1a85ce5bf86c19934dc540ce3ee9842)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__761580ee10cbf486bbb89d13edd66cb262d0e829965f6dca8c9fdbfdc030104a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e336dfa790ae628a65a9006f6c11b7dcbb64c8d237c0e4beae4f12c5bba02754)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d23a123813f973b39408018e3cb7bc26aea46c65db077b0179e2e199225c295a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ff93aaaca01966001f6eabf22416af4c3cd23f3ecebdaa6cdb552d1d8fc679f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f18d88ea6cc2b3a0d28505caf9de8fc8cc0cc29e8e4ec36e6547ede7b7312171)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07b1141b250c3ac2cc4435a775fbfa0144391f17ed2044de16f6aa54de8f3095)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fefc55c82ceb718a6e5d3a08486f0c2272db65a41ba09c9b4fd2ccd44f54e2bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a451c468548351ee9a4ed4915de57f474729832d2e5db442fd90f786d9eeb3b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31dab383212fa42eeabe45406f530cb97e9d2616c184123215202a542bac2e14)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12269b35231e5fe509a107506b025e64f36181441001c4b04db60ae93352e53d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__569edd9c8f2a79c222541caaf52644c2e6b65578f5e24b872581d8a37130493b)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__099122b52c76966d11fc3e389f957bbcbeaa22f97db5c9352e1472dce09aaee5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19bc6c0ed94fe755709b8fe04f92ef2ee9345f5873d29ffba8c757641e063ebe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38ff945980df53b15e913ffac273750a9668a47ab9fb327f403477740aea6916)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07ccffd007842c37068e7d415a9f6bbb3ee6afd71bf370570392edbdc6e464f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6707537bc6041d94370b64940105e9b2f7bdbe15c6cf938d8f0d7a8dfa23a601)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bbe54911b7f060c2d9600228180915066868cef719dc67baa11d491423d532e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e518bc7cb9b1cf6981359513fa4ef951b6cf723e9afe58059a3e8a6d7ad5fa3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c616738c6b5e0c523d1e16550b0731285fb06513b24d73ebaab2dc30d8fa0f1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a45747ebe450ee2992cee54bfcaf318aeaf7d9ad47c1f07841bebc87f1de09b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d78dfaca48d6a6734a5f72f97c0888afe87805cedd276ba581fb75c54d41384)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7b8c6ce2095ff2d722ff4837d57edb02a99bfa366d436721a072c704153709d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ddd690d3f6fd17b2724322be12aa405aba6f114b94beeba7aef5921ab9bcfffe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89f282487585f95f8c2d4638bbed23a1220d9de3fad0349cee6eb7b8741cf387)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41e492520b626eaf1efebde142ac6a4b42aeb76a11c83f0c50348b554c09170b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a775cf76cadad5cdd4829afec44e9afda582f007c3f62ad8efb72ecab58b9e6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6276130eb27aa3e4d43ca5bab1c00864fb31196501ca4c2a6a62ec66088d8e9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dfc6550d70aeff37d6204a4dbc9e52b5bd8d6b5e5ccb5199948c8697b64f738)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__393bace29730396cd9c9fccd00030b146775731d423866c9b541e1cf4436d331)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39155d42ac30d25243a5b5b0e190f075ef98ff5da535288c5383adab32a1c48c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d323d871a882126c0e977c6e4981bcb48022e344ece122a9a0045c229d9db3b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__523e064af655d928bcaeab5a2c78698988271cd233c88ba22a70b867f365d155)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f56349dbe99b46fcb6d0c5ad682350a790597d7752fb419d1aff1d38c2978b96)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d02527e216a9740f133e11be0b7f9b43c8811f63bc6355c6d015d4a4c20aa77e)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2055c29c2972bbe19d7f4848a87565d5e2349d944a9da351d038846fb2721411)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9b570d01fa1c3d8d888ed68db39cf3c7429efa4d545b51300a0253a58f53194)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1c35473eaa8b46e7deba0c8502ea72bfc77365eca99ceb278a396bc93548eb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e005fbf7adafec1de561efbfac9b82e032c2e98695d70d6742babdce019d3e8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2a7a28d9fcfe3e13e074c9a7e9fcb1e911cf3a5fdb3e8ee6a370362287dee7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e73d59e4249f0ab52f0c855ed1a0c9819a4aa11756c7d48028c20bc945d7aa48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4207b86a911bb052f6d750be3926046cc8246f6d76240662718cc83283823ea0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9f089a99cf17904e40aea263e8c496bdddb290aebc6e7b0c063342878d2f62c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb0ff5c88068ef177698919ea8945a731ceceef17eff6f94fd26280e59b560a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cde9750c741fdbd8f5c5132920e72c3f295de90db4be8963b991cea2aa34fb02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6287397dd415e8566fec8422d8cbc10d74fa97dd7ca62c312df2d5cc76ee14c1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0919ff07d1c8c873cd7bd01d56d7727cb59691b85d4b718f53268479b8eb2a48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef4a698ecd5b9c28f02fffdbb3dde1fdc1d00cc11074740a2bd2445a027e55c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b1762a1b8a82baad95dadcd02a7b0f14bcc906b360295badeb87313dbf59d73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f9e9df8a5cec7ca5c8f7c3876645b97b35aaf0cd5fba2e883112e2441349f40)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99a1aa910aa38370aec836192311e7b3e3e4d7e53c85b4163231edfeaeb44202)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59ddfa6801a85968dadae0edd4472b7e3ba0bdc3c38378f4b265d196a48ec2b6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23016bfda7305701144ed598adc095193de6ae37f88cebe420f25c6a277920be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b39fc2f57f09fa49631b0ad3952769bda28a2d69aaf1b7098eac745e8995bf35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d06e93ad057bd0c16ff0e06ddc12a43d5998da7aa69644b7c155f76aebeb93b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32be511f73956bafdf5c7988c5fcbc18d5eb7f83857c3ff9101af457848323ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba08733704efcfacbbcfb2a73642a8a16d599373f1809a17c2d6a961ac22bb3e)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9269575dcf6a288ed6d2b30e85d9306bbb113df08e2d45215fe2442f57779b82)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a33262dec7e4245dddfad465d4f89713ba4ff40c4f123526d578e1b80c18131c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abd08caafd6a895475d1ed04fdf9bfe2d4507a8eea66c07575116208d1900e88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01c70f475f3ab99220763b401b790efba2291e047c1d5cb6fe61d976b5b04849)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd684e21cfe91d147e62fc686184a4371b65eec1f5a9ac401320291516d58c85)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8b02ab49d5176ad6e77c749bbdc6afe74fcfcf121bde1c763222e1777171448)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db393baed67a93827b901641011c22cd2559b79e8f6c32368a88dd3c18197166)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdd3dd4807ef6e764656138dd85321c464a1b86fce893e66f1e38cde9e0b79d7)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__933de5eaa53f01d68babc898a478325202a9074495401350c5d704de3deffb00)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e15cbb1cb71b8fc261a4527e3f52b11fe625520b8b7294bb6e4032854f10a74b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__433ff061755e8c007144147835ca768a25732f787389743610d9b23d35e60ed5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c7e88c9fc88f25d78eea9e19144e604db5c107b95e8c75b6b2cf0171020434a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85f4a91fc200e2e99609bba976133d955d0c1ef82d1bb5d42e07b4d72356b005)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20707782c93f783fa795bd4a4d7489436e10d6574d628be5dd9c38e7768efa95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f68634ee6d341280b50da74fce688be7f0379250596f949b132c21fc68d5adc7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbee49438c0af6742e3aeb0e9e12fd14f474d8c8641ba1bbf4df2b01ea2aba78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a0b7b1c98eef03a18dfcd39826ad36d3942e3551889331dc78156c46eab8190)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProvider",
    jsii_struct_bases=[],
    name_mapping={
        "azure_devops": "azureDevops",
        "bitbucket_cloud": "bitbucketCloud",
        "bitbucket_server": "bitbucketServer",
        "clone_protocol": "cloneProtocol",
        "filter": "filter",
        "gitea": "gitea",
        "github": "github",
        "gitlab": "gitlab",
        "requeue_after_seconds": "requeueAfterSeconds",
        "template": "template",
    },
)
class ApplicationSetSpecGeneratorScmProvider:
    def __init__(
        self,
        *,
        azure_devops: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderAzureDevops", typing.Dict[builtins.str, typing.Any]]] = None,
        bitbucket_cloud: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderBitbucketCloud", typing.Dict[builtins.str, typing.Any]]] = None,
        bitbucket_server: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderBitbucketServer", typing.Dict[builtins.str, typing.Any]]] = None,
        clone_protocol: typing.Optional[builtins.str] = None,
        filter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderFilter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        gitea: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGitea", typing.Dict[builtins.str, typing.Any]]] = None,
        github: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGithub", typing.Dict[builtins.str, typing.Any]]] = None,
        gitlab: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGitlab", typing.Dict[builtins.str, typing.Any]]] = None,
        requeue_after_seconds: typing.Optional[builtins.str] = None,
        template: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplate", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param azure_devops: azure_devops block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#azure_devops ApplicationSet#azure_devops}
        :param bitbucket_cloud: bitbucket_cloud block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_cloud ApplicationSet#bitbucket_cloud}
        :param bitbucket_server: bitbucket_server block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_server ApplicationSet#bitbucket_server}
        :param clone_protocol: Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#clone_protocol ApplicationSet#clone_protocol}
        :param filter: filter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#filter ApplicationSet#filter}
        :param gitea: gitea block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitea ApplicationSet#gitea}
        :param github: github block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#github ApplicationSet#github}
        :param gitlab: gitlab block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitlab ApplicationSet#gitlab}
        :param requeue_after_seconds: How often to check for changes (in seconds). Default: 3min. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        :param template: template block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        if isinstance(azure_devops, dict):
            azure_devops = ApplicationSetSpecGeneratorScmProviderAzureDevops(**azure_devops)
        if isinstance(bitbucket_cloud, dict):
            bitbucket_cloud = ApplicationSetSpecGeneratorScmProviderBitbucketCloud(**bitbucket_cloud)
        if isinstance(bitbucket_server, dict):
            bitbucket_server = ApplicationSetSpecGeneratorScmProviderBitbucketServer(**bitbucket_server)
        if isinstance(gitea, dict):
            gitea = ApplicationSetSpecGeneratorScmProviderGitea(**gitea)
        if isinstance(github, dict):
            github = ApplicationSetSpecGeneratorScmProviderGithub(**github)
        if isinstance(gitlab, dict):
            gitlab = ApplicationSetSpecGeneratorScmProviderGitlab(**gitlab)
        if isinstance(template, dict):
            template = ApplicationSetSpecGeneratorScmProviderTemplate(**template)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ea1c62251541fb8cf775affdb5b1ab24259ba1782701c96a1e7c94abf3dc2c0)
            check_type(argname="argument azure_devops", value=azure_devops, expected_type=type_hints["azure_devops"])
            check_type(argname="argument bitbucket_cloud", value=bitbucket_cloud, expected_type=type_hints["bitbucket_cloud"])
            check_type(argname="argument bitbucket_server", value=bitbucket_server, expected_type=type_hints["bitbucket_server"])
            check_type(argname="argument clone_protocol", value=clone_protocol, expected_type=type_hints["clone_protocol"])
            check_type(argname="argument filter", value=filter, expected_type=type_hints["filter"])
            check_type(argname="argument gitea", value=gitea, expected_type=type_hints["gitea"])
            check_type(argname="argument github", value=github, expected_type=type_hints["github"])
            check_type(argname="argument gitlab", value=gitlab, expected_type=type_hints["gitlab"])
            check_type(argname="argument requeue_after_seconds", value=requeue_after_seconds, expected_type=type_hints["requeue_after_seconds"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if azure_devops is not None:
            self._values["azure_devops"] = azure_devops
        if bitbucket_cloud is not None:
            self._values["bitbucket_cloud"] = bitbucket_cloud
        if bitbucket_server is not None:
            self._values["bitbucket_server"] = bitbucket_server
        if clone_protocol is not None:
            self._values["clone_protocol"] = clone_protocol
        if filter is not None:
            self._values["filter"] = filter
        if gitea is not None:
            self._values["gitea"] = gitea
        if github is not None:
            self._values["github"] = github
        if gitlab is not None:
            self._values["gitlab"] = gitlab
        if requeue_after_seconds is not None:
            self._values["requeue_after_seconds"] = requeue_after_seconds
        if template is not None:
            self._values["template"] = template

    @builtins.property
    def azure_devops(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderAzureDevops"]:
        '''azure_devops block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#azure_devops ApplicationSet#azure_devops}
        '''
        result = self._values.get("azure_devops")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderAzureDevops"], result)

    @builtins.property
    def bitbucket_cloud(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketCloud"]:
        '''bitbucket_cloud block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_cloud ApplicationSet#bitbucket_cloud}
        '''
        result = self._values.get("bitbucket_cloud")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketCloud"], result)

    @builtins.property
    def bitbucket_server(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServer"]:
        '''bitbucket_server block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#bitbucket_server ApplicationSet#bitbucket_server}
        '''
        result = self._values.get("bitbucket_server")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServer"], result)

    @builtins.property
    def clone_protocol(self) -> typing.Optional[builtins.str]:
        '''Which protocol to use for the SCM URL.

        Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#clone_protocol ApplicationSet#clone_protocol}
        '''
        result = self._values.get("clone_protocol")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderFilter"]]]:
        '''filter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#filter ApplicationSet#filter}
        '''
        result = self._values.get("filter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderFilter"]]], result)

    @builtins.property
    def gitea(self) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGitea"]:
        '''gitea block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitea ApplicationSet#gitea}
        '''
        result = self._values.get("gitea")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGitea"], result)

    @builtins.property
    def github(self) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGithub"]:
        '''github block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#github ApplicationSet#github}
        '''
        result = self._values.get("github")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGithub"], result)

    @builtins.property
    def gitlab(self) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlab"]:
        '''gitlab block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#gitlab ApplicationSet#gitlab}
        '''
        result = self._values.get("gitlab")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlab"], result)

    @builtins.property
    def requeue_after_seconds(self) -> typing.Optional[builtins.str]:
        '''How often to check for changes (in seconds). Default: 3min.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#requeue_after_seconds ApplicationSet#requeue_after_seconds}
        '''
        result = self._values.get("requeue_after_seconds")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplate"]:
        '''template block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#template ApplicationSet#template}
        '''
        result = self._values.get("template")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplate"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProvider(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderAzureDevops",
    jsii_struct_bases=[],
    name_mapping={
        "organization": "organization",
        "team_project": "teamProject",
        "access_token_ref": "accessTokenRef",
        "all_branches": "allBranches",
        "api": "api",
    },
)
class ApplicationSetSpecGeneratorScmProviderAzureDevops:
    def __init__(
        self,
        *,
        organization: builtins.str,
        team_project: builtins.str,
        access_token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param organization: Azure Devops organization. E.g. "my-organization". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        :param team_project: Azure Devops team project. E.g. "my-team". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#team_project ApplicationSet#team_project}
        :param access_token_ref: access_token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#access_token_ref ApplicationSet#access_token_ref}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The URL to Azure DevOps. Defaults to https://dev.azure.com. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        if isinstance(access_token_ref, dict):
            access_token_ref = ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef(**access_token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24bb36f3e7b7ac1151a3c1d82886acabca65dabda080b23a564e3e9c18e7d418)
            check_type(argname="argument organization", value=organization, expected_type=type_hints["organization"])
            check_type(argname="argument team_project", value=team_project, expected_type=type_hints["team_project"])
            check_type(argname="argument access_token_ref", value=access_token_ref, expected_type=type_hints["access_token_ref"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "organization": organization,
            "team_project": team_project,
        }
        if access_token_ref is not None:
            self._values["access_token_ref"] = access_token_ref
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if api is not None:
            self._values["api"] = api

    @builtins.property
    def organization(self) -> builtins.str:
        '''Azure Devops organization. E.g. "my-organization".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        '''
        result = self._values.get("organization")
        assert result is not None, "Required property 'organization' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def team_project(self) -> builtins.str:
        '''Azure Devops team project. E.g. "my-team".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#team_project ApplicationSet#team_project}
        '''
        result = self._values.get("team_project")
        assert result is not None, "Required property 'team_project' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def access_token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef"]:
        '''access_token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#access_token_ref ApplicationSet#access_token_ref}
        '''
        result = self._values.get("access_token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef"], result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Scan all branches instead of just the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The URL to Azure DevOps. Defaults to https://dev.azure.com.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderAzureDevops(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08569db9e1a0097ee4bb990ddac11994f321d6829a3a50502f7800f91c64e124)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81024217cf3598100bda9564064a10e1a4ff63d55d4102b56a7574550297ee85)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d456759b7629d76da5c78b59b8df24ae08d0218c54eb7de2cd9066ba3577ed20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd83cc4fa95c81174e3447b39913ed7b741b6eba75347bfa9a6d70a45bcab904)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bc3fe72d42324e12bbb3fc96ae039d86e61fbcbce503d8cb4d3c95a6fb4464b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderAzureDevopsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderAzureDevopsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f6a8ac86aee90a85ea5fa38ba024c0b58e27386be8a86932ae4520c17788096)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAccessTokenRef")
    def put_access_token_ref(
        self,
        *,
        key: builtins.str,
        secret_name: builtins.str,
    ) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putAccessTokenRef", [value]))

    @jsii.member(jsii_name="resetAccessTokenRef")
    def reset_access_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccessTokenRef", []))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @builtins.property
    @jsii.member(jsii_name="accessTokenRef")
    def access_token_ref(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefOutputReference, jsii.get(self, "accessTokenRef"))

    @builtins.property
    @jsii.member(jsii_name="accessTokenRefInput")
    def access_token_ref_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef], jsii.get(self, "accessTokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="organizationInput")
    def organization_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "organizationInput"))

    @builtins.property
    @jsii.member(jsii_name="teamProjectInput")
    def team_project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teamProjectInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76918626cfaa434b560a4c9668c48c7676616716f482a11214d9026f690e7b25)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__775c3002b285a9fe7ee60456cd911aeb0b837785e8fc629c06f14d51cb0191fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="organization")
    def organization(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "organization"))

    @organization.setter
    def organization(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d72b8a2c18a1f86c44799ea80f6f9ec828cebf94ebb85f3fe910be3dcbec936)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "organization", value)

    @builtins.property
    @jsii.member(jsii_name="teamProject")
    def team_project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "teamProject"))

    @team_project.setter
    def team_project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0a42593faed7a245dd64fc81f37341e53822ce151e4b5c68031de5ca5d2cedd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "teamProject", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c1c83652c4399f046fb2cb3ab2e36d9d7b6b5b6a634f1250d62ec8efe1882fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketCloud",
    jsii_struct_bases=[],
    name_mapping={
        "owner": "owner",
        "user": "user",
        "all_branches": "allBranches",
        "app_password_ref": "appPasswordRef",
    },
)
class ApplicationSetSpecGeneratorScmProviderBitbucketCloud:
    def __init__(
        self,
        *,
        owner: builtins.str,
        user: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_password_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: Bitbucket workspace to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#user ApplicationSet#user}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param app_password_ref: app_password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_password_ref ApplicationSet#app_password_ref}
        '''
        if isinstance(app_password_ref, dict):
            app_password_ref = ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef(**app_password_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c748248eb9bbcc96c54c5e97f59b1cbe983aff2551ed5d2c92e93ba2655c0bcf)
            check_type(argname="argument owner", value=owner, expected_type=type_hints["owner"])
            check_type(argname="argument user", value=user, expected_type=type_hints["user"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument app_password_ref", value=app_password_ref, expected_type=type_hints["app_password_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "owner": owner,
            "user": user,
        }
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if app_password_ref is not None:
            self._values["app_password_ref"] = app_password_ref

    @builtins.property
    def owner(self) -> builtins.str:
        '''Bitbucket workspace to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        '''
        result = self._values.get("owner")
        assert result is not None, "Required property 'owner' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def user(self) -> builtins.str:
        '''Bitbucket user to use when authenticating.

        Should have a "member" role to be able to read all repositories and branches.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#user ApplicationSet#user}
        '''
        result = self._values.get("user")
        assert result is not None, "Required property 'user' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Scan all branches instead of just the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def app_password_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef"]:
        '''app_password_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_password_ref ApplicationSet#app_password_ref}
        '''
        result = self._values.get("app_password_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderBitbucketCloud(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bc9b9134b53a0968ebf23b86ba59807d2e2cf8ff9b1e9dd979980ad37f469ca)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5675c5c7c5495bb4ae11dccdbbc75c18d8c0eada30c9bf01d8867a7b4afd59b8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc7450f390936dbb3e5ba51ee328e74c32b6eb4ac6b7426360a04507b8e26275)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa71858c0009892613748efe8d3a68bed3ae5f43a7470a8a88e1f7c61dd1c0bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f8b5e56cc5101c109b1e87cb847833f5d75ce3e7b68ea09ab1c3a37dc2160b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderBitbucketCloudOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketCloudOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d75a12a46d54e434b0325f22f0042e6d341670a7c826b2887de8d2fde347f187)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAppPasswordRef")
    def put_app_password_ref(
        self,
        *,
        key: builtins.str,
        secret_name: builtins.str,
    ) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putAppPasswordRef", [value]))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetAppPasswordRef")
    def reset_app_password_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppPasswordRef", []))

    @builtins.property
    @jsii.member(jsii_name="appPasswordRef")
    def app_password_ref(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefOutputReference, jsii.get(self, "appPasswordRef"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="appPasswordRefInput")
    def app_password_ref_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef], jsii.get(self, "appPasswordRefInput"))

    @builtins.property
    @jsii.member(jsii_name="ownerInput")
    def owner_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ownerInput"))

    @builtins.property
    @jsii.member(jsii_name="userInput")
    def user_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "userInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__336a7a30c7278c01619daf2bcf2ec712540f8b31373b0417f6d4c869bf7d6a7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="owner")
    def owner(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "owner"))

    @owner.setter
    def owner(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55452b73e7cc40cd8eeeea80c4338e95d7e664b00d007813d86932a2870c02ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "owner", value)

    @builtins.property
    @jsii.member(jsii_name="user")
    def user(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "user"))

    @user.setter
    def user(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86bb98ad8c0935499e22ba10172bd8fcc79bc57c643d12b90d20d4a5fe204930)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "user", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15a5d06b8c22745b39946c1c81d3a8b27aa75d7f59dc30c4caa41e23b9209d16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServer",
    jsii_struct_bases=[],
    name_mapping={
        "api": "api",
        "project": "project",
        "all_branches": "allBranches",
        "basic_auth": "basicAuth",
    },
)
class ApplicationSetSpecGeneratorScmProviderBitbucketServer:
    def __init__(
        self,
        *,
        api: builtins.str,
        project: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        basic_auth: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param project: Project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param basic_auth: basic_auth block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        if isinstance(basic_auth, dict):
            basic_auth = ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth(**basic_auth)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c92c156e8a38f9eb71709d1e856a06eab3698742f4cbaee40de5e0cd8b5692c5)
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument basic_auth", value=basic_auth, expected_type=type_hints["basic_auth"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "api": api,
            "project": project,
        }
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if basic_auth is not None:
            self._values["basic_auth"] = basic_auth

    @builtins.property
    def api(self) -> builtins.str:
        '''The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        assert result is not None, "Required property 'api' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def project(self) -> builtins.str:
        '''Project to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        assert result is not None, "Required property 'project' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Scan all branches instead of just the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def basic_auth(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth"]:
        '''basic_auth block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        result = self._values.get("basic_auth")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderBitbucketServer(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth",
    jsii_struct_bases=[],
    name_mapping={"password_ref": "passwordRef", "username": "username"},
)
class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth:
    def __init__(
        self,
        *,
        password_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef", typing.Dict[builtins.str, typing.Any]]] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_ref: password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        :param username: Username for Basic auth. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        if isinstance(password_ref, dict):
            password_ref = ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(**password_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dbabc58a15bc61fe5a8207e9580968f016d4c535c7bb9f02e447fc6b73d2447)
            check_type(argname="argument password_ref", value=password_ref, expected_type=type_hints["password_ref"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if password_ref is not None:
            self._values["password_ref"] = password_ref
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def password_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef"]:
        '''password_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        '''
        result = self._values.get("password_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef"], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Username for Basic auth.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07f12b94a264e0785754272df5eaeaad67c09e85b622505413ea7157599543de)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putPasswordRef")
    def put_password_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putPasswordRef", [value]))

    @jsii.member(jsii_name="resetPasswordRef")
    def reset_password_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordRef", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordRef")
    def password_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefOutputReference", jsii.get(self, "passwordRef"))

    @builtins.property
    @jsii.member(jsii_name="passwordRefInput")
    def password_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef"], jsii.get(self, "passwordRefInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a79e42cd6c298782db9263c0fd25f331fbd5218bfe66a1b7499f0f6c807d749)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdf29ae4f1f8fe49e53033115db9483cc3a8323eb70378f96fb2731500740d8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6255abe2b76fa2f059e1082b604017ce70a61eeedb80bc1969f865a9c5a8673)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8c98909a2a9266ec3c68640b521b73e9bb3833c8f08c0c534f60cf2335d0c1a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31c79328ca8cae56a472102bd5700c30049c12273051939830baf62ff7c66659)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82287b9c04d51923da106512f902e4e6209b6b5c816996dde7533531557416db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03390ac6be810f7d49c43d6074a125c9e59cf7c23bbea208482003f688691320)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderBitbucketServerOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderBitbucketServerOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c0680e1630747512219e4ccc950b6f7784ba6543a7f047c34e6c0c5d36ccb62)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBasicAuth")
    def put_basic_auth(
        self,
        *,
        password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_ref: password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#password_ref ApplicationSet#password_ref}
        :param username: Username for Basic auth. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#username ApplicationSet#username}
        '''
        value = ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth(
            password_ref=password_ref, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putBasicAuth", [value]))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetBasicAuth")
    def reset_basic_auth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBasicAuth", []))

    @builtins.property
    @jsii.member(jsii_name="basicAuth")
    def basic_auth(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthOutputReference, jsii.get(self, "basicAuth"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="basicAuthInput")
    def basic_auth_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth], jsii.get(self, "basicAuthInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9d03b8c90a4a32823b596eef2e915c0db5d071b7c8fc3b4af98c9a56b8b3800)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__363e59be60edc1bddf08ec4c4313e02b19b8fad8efdd9c404526beda586e2a7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9914ff51537817cbe74b25548ce2884352376de1517c2092458c4508c4c82113)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0151ddb7558822f9463d6dbe5ff3b826354a269f78da7971e919a105911b5dda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderFilter",
    jsii_struct_bases=[],
    name_mapping={
        "branch_match": "branchMatch",
        "label_match": "labelMatch",
        "paths_do_not_exist": "pathsDoNotExist",
        "paths_exist": "pathsExist",
        "repository_match": "repositoryMatch",
    },
)
class ApplicationSetSpecGeneratorScmProviderFilter:
    def __init__(
        self,
        *,
        branch_match: typing.Optional[builtins.str] = None,
        label_match: typing.Optional[builtins.str] = None,
        paths_do_not_exist: typing.Optional[typing.Sequence[builtins.str]] = None,
        paths_exist: typing.Optional[typing.Sequence[builtins.str]] = None,
        repository_match: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param branch_match: A regex which must match the branch name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#branch_match ApplicationSet#branch_match}
        :param label_match: A regex which must match at least one label. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#label_match ApplicationSet#label_match}
        :param paths_do_not_exist: An array of paths, all of which must not exist. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#paths_do_not_exist ApplicationSet#paths_do_not_exist}
        :param paths_exist: An array of paths, all of which must exist. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#paths_exist ApplicationSet#paths_exist}
        :param repository_match: A regex for repo names. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repository_match ApplicationSet#repository_match}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea83447971da964c8964ad1c3f9903aaba6599ad3a207f5f09541325afac7ee2)
            check_type(argname="argument branch_match", value=branch_match, expected_type=type_hints["branch_match"])
            check_type(argname="argument label_match", value=label_match, expected_type=type_hints["label_match"])
            check_type(argname="argument paths_do_not_exist", value=paths_do_not_exist, expected_type=type_hints["paths_do_not_exist"])
            check_type(argname="argument paths_exist", value=paths_exist, expected_type=type_hints["paths_exist"])
            check_type(argname="argument repository_match", value=repository_match, expected_type=type_hints["repository_match"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if branch_match is not None:
            self._values["branch_match"] = branch_match
        if label_match is not None:
            self._values["label_match"] = label_match
        if paths_do_not_exist is not None:
            self._values["paths_do_not_exist"] = paths_do_not_exist
        if paths_exist is not None:
            self._values["paths_exist"] = paths_exist
        if repository_match is not None:
            self._values["repository_match"] = repository_match

    @builtins.property
    def branch_match(self) -> typing.Optional[builtins.str]:
        '''A regex which must match the branch name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#branch_match ApplicationSet#branch_match}
        '''
        result = self._values.get("branch_match")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def label_match(self) -> typing.Optional[builtins.str]:
        '''A regex which must match at least one label.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#label_match ApplicationSet#label_match}
        '''
        result = self._values.get("label_match")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def paths_do_not_exist(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of paths, all of which must not exist.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#paths_do_not_exist ApplicationSet#paths_do_not_exist}
        '''
        result = self._values.get("paths_do_not_exist")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def paths_exist(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of paths, all of which must exist.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#paths_exist ApplicationSet#paths_exist}
        '''
        result = self._values.get("paths_exist")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def repository_match(self) -> typing.Optional[builtins.str]:
        '''A regex for repo names.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repository_match ApplicationSet#repository_match}
        '''
        result = self._values.get("repository_match")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderFilter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderFilterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderFilterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6cb84c05b7cad7df79bc693fa0a765e99a4589558b9a5a03807cb652f6dafb5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderFilterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c70bbd82b694c1791520f266f3938687e14860c5ca99bed6bc66ec7b81298569)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderFilterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bce2a6b58e5083ff67063de69a6a2078fb81f8f579eee6710bd005b28c8b32d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6de9c965a19789fff0d47174abd7158c6ecd62315473416e4ac7f78aba1f7c8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c67a9270e7feb82e5de17cb891f263643562e360bd1caf3caef6da3cfee0557b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__980d24ce6951433eeef319f3cec30ecf39df15ad74034d0775d1e097ff0534a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderFilterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderFilterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b915291e3754813243250b5d4366c9371563e1687ed81a044f74c43a5b6498ba)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetBranchMatch")
    def reset_branch_match(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBranchMatch", []))

    @jsii.member(jsii_name="resetLabelMatch")
    def reset_label_match(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabelMatch", []))

    @jsii.member(jsii_name="resetPathsDoNotExist")
    def reset_paths_do_not_exist(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPathsDoNotExist", []))

    @jsii.member(jsii_name="resetPathsExist")
    def reset_paths_exist(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPathsExist", []))

    @jsii.member(jsii_name="resetRepositoryMatch")
    def reset_repository_match(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepositoryMatch", []))

    @builtins.property
    @jsii.member(jsii_name="branchMatchInput")
    def branch_match_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "branchMatchInput"))

    @builtins.property
    @jsii.member(jsii_name="labelMatchInput")
    def label_match_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "labelMatchInput"))

    @builtins.property
    @jsii.member(jsii_name="pathsDoNotExistInput")
    def paths_do_not_exist_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "pathsDoNotExistInput"))

    @builtins.property
    @jsii.member(jsii_name="pathsExistInput")
    def paths_exist_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "pathsExistInput"))

    @builtins.property
    @jsii.member(jsii_name="repositoryMatchInput")
    def repository_match_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repositoryMatchInput"))

    @builtins.property
    @jsii.member(jsii_name="branchMatch")
    def branch_match(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "branchMatch"))

    @branch_match.setter
    def branch_match(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b28b68f32d0dc0dbffc3ca04bbb5c4ad3bec95354f8fa8c0f74269a89043a12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "branchMatch", value)

    @builtins.property
    @jsii.member(jsii_name="labelMatch")
    def label_match(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "labelMatch"))

    @label_match.setter
    def label_match(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50f6c0569797471f1a490fe8d512c791aa851886f93c32b2345ddf8ad0e70f66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labelMatch", value)

    @builtins.property
    @jsii.member(jsii_name="pathsDoNotExist")
    def paths_do_not_exist(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "pathsDoNotExist"))

    @paths_do_not_exist.setter
    def paths_do_not_exist(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5777e1fca841e6e1b1bdf990fa3162870fa874a3a5250962a24cbd74aa2bc936)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pathsDoNotExist", value)

    @builtins.property
    @jsii.member(jsii_name="pathsExist")
    def paths_exist(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "pathsExist"))

    @paths_exist.setter
    def paths_exist(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4d21cccf799231ee6a93106ebc9806dda416707525cb937133b137786123b80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pathsExist", value)

    @builtins.property
    @jsii.member(jsii_name="repositoryMatch")
    def repository_match(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repositoryMatch"))

    @repository_match.setter
    def repository_match(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e5b8d726cd95ab3151c3d9b4b8135c757355ac01c3ad0fa28b6375c31fcb433)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repositoryMatch", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderFilter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderFilter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderFilter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce00662ddcdaf7b44e453b30be45928939d87384341fb461d6547ba66b4d0859)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGitea",
    jsii_struct_bases=[],
    name_mapping={
        "owner": "owner",
        "all_branches": "allBranches",
        "api": "api",
        "insecure": "insecure",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorScmProviderGitea:
    def __init__(
        self,
        *,
        owner: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGiteaTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: Gitea organization or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The Gitea URL to talk to. For example https://gitea.mydomain.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param insecure: Allow self-signed TLS / Certificates. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorScmProviderGiteaTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7e5ca158bb9bee7674683bdefa926d6804eff1bb36aac43f6e2b9cfc6f55777)
            check_type(argname="argument owner", value=owner, expected_type=type_hints["owner"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument insecure", value=insecure, expected_type=type_hints["insecure"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "owner": owner,
        }
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if api is not None:
            self._values["api"] = api
        if insecure is not None:
            self._values["insecure"] = insecure
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def owner(self) -> builtins.str:
        '''Gitea organization or user to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        '''
        result = self._values.get("owner")
        assert result is not None, "Required property 'owner' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Scan all branches instead of just the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The Gitea URL to talk to. For example https://gitea.mydomain.com/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def insecure(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allow self-signed TLS / Certificates.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        '''
        result = self._values.get("insecure")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGiteaTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGiteaTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGitea(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGiteaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGiteaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eff5425320161f0bb6afc975c6aa8b58a2887d4423aaa69f677febb334091eb5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGiteaTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @jsii.member(jsii_name="resetInsecure")
    def reset_insecure(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInsecure", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderGiteaTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderGiteaTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="insecureInput")
    def insecure_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "insecureInput"))

    @builtins.property
    @jsii.member(jsii_name="ownerInput")
    def owner_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ownerInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGiteaTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGiteaTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7231e3420d54f5511489ad0a676f1d783aa76586d4e6836c50fb50a2544f717e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2324c118fe25a5d6dba855d017ae418892d01c15237f4f8e2c7888258d84abe9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="insecure")
    def insecure(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "insecure"))

    @insecure.setter
    def insecure(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f20bba8220c3292bd43680752e09146d48a65d9abbbc8225042a68fb3aa3213b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "insecure", value)

    @builtins.property
    @jsii.member(jsii_name="owner")
    def owner(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "owner"))

    @owner.setter
    def owner(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__833aacf07148a6f5cfcb2f63a4f95f0aef9c18187502b66df21ab3aa6e8c17db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "owner", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__508ebbb3fb94e7fe0741111cb63ede61110577dc7942884a65d6ddfd5a96daed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGiteaTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderGiteaTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__540cc4b5eaf36bff023e19fa8c9e686de7f7f2528128b52c155e43863fc80ea3)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGiteaTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGiteaTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGiteaTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53f061ed4b503cec613935912a1694391fc550a26e654e490737c705b6e8a958)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__750e469bf231e08b3ced71e9125c3d0dfbe9548559c5ec978364d6b55590f1f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb904f61243302b3fe2d266a9c440801b5d6ac05b421180ced4f8c38b9adf4a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__621f54bcc699ca0d8c657d674e3dc9c8b2ce0d11207b077e1e7141a1dc4738d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGithub",
    jsii_struct_bases=[],
    name_mapping={
        "organization": "organization",
        "all_branches": "allBranches",
        "api": "api",
        "app_secret_name": "appSecretName",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorScmProviderGithub:
    def __init__(
        self,
        *,
        organization: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        app_secret_name: typing.Optional[builtins.str] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGithubTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param organization: GitHub org to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        :param all_branches: If true, scan every branch of every repository. If false, scan only the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The GitHub API URL to talk to. Default https://api.github.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param app_secret_name: Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorScmProviderGithubTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5efaa47bf94accce097d58cd0ceb9b0925e04de7ed0cb21bc36bb4ef711176e9)
            check_type(argname="argument organization", value=organization, expected_type=type_hints["organization"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument app_secret_name", value=app_secret_name, expected_type=type_hints["app_secret_name"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "organization": organization,
        }
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if api is not None:
            self._values["api"] = api
        if app_secret_name is not None:
            self._values["app_secret_name"] = app_secret_name
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def organization(self) -> builtins.str:
        '''GitHub org to scan.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        '''
        result = self._values.get("organization")
        assert result is not None, "Required property 'organization' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true, scan every branch of every repository. If false, scan only the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The GitHub API URL to talk to. Default https://api.github.com/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def app_secret_name(self) -> typing.Optional[builtins.str]:
        '''Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        '''
        result = self._values.get("app_secret_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGithubTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGithubTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGithub(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGithubOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGithubOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e5aefc318bee6767721e8538e93bec65194aa8616722cfc20aaae466d0dbd01)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGithubTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @jsii.member(jsii_name="resetAppSecretName")
    def reset_app_secret_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppSecretName", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderGithubTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderGithubTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="appSecretNameInput")
    def app_secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appSecretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="organizationInput")
    def organization_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "organizationInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGithubTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGithubTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e63bd570f0eae76e27c71f0fab9d0b52a8d236c807d87db5d3cc1eefa47be4bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__392da0cca08d565c329f298346a82ade84c5ef1acb841e919dea49e152d81903)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="appSecretName")
    def app_secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appSecretName"))

    @app_secret_name.setter
    def app_secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b41f75d9b76948096dc7c09d88a29cf40fbba77d6bc8767c528689e313f97b81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appSecretName", value)

    @builtins.property
    @jsii.member(jsii_name="organization")
    def organization(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "organization"))

    @organization.setter
    def organization(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4553e02f15f01cd2955ba8c579eefe65378f30b33a1d00c22e01fdc834620848)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "organization", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__696f1172bd897acd9767bbd81bd02e00ea82653af82265724777f5a612ff2b51)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGithubTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderGithubTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0c4544a73b890f3b626a6f56a37095308a6331d9cd1eeb14fbfe72d2b1f554c)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGithubTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGithubTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGithubTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfde8f249c67bf477bf5387b4a7722c2a5abd9e3e54a83f55d6efa63c4e9472a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09c00cd912ba4dae97bab22a95d6473189cfad3f1e68c0b367eac636e290764b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b76375fa44aefdf413551a48bb4cfa3199062736ce79715055ace79a7f9359d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGithubTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGithubTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGithubTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85f2bfc31cfba767e82fa9d66daf59ef5c4bf8706acd0459c5ee423572252e75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGitlab",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "all_branches": "allBranches",
        "api": "api",
        "include_subgroups": "includeSubgroups",
        "token_ref": "tokenRef",
    },
)
class ApplicationSetSpecGeneratorScmProviderGitlab:
    def __init__(
        self,
        *,
        group: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        include_subgroups: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderGitlabTokenRef", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param group: Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param all_branches: If true, scan every branch of every repository. If false, scan only the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The Gitlab API URL to talk to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to ``false``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include_subgroups ApplicationSet#include_subgroups}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        if isinstance(token_ref, dict):
            token_ref = ApplicationSetSpecGeneratorScmProviderGitlabTokenRef(**token_ref)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2565353c1b6abc2f3514647357dea70431888b80613cafb33a6fc09ad0dcf809)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument all_branches", value=all_branches, expected_type=type_hints["all_branches"])
            check_type(argname="argument api", value=api, expected_type=type_hints["api"])
            check_type(argname="argument include_subgroups", value=include_subgroups, expected_type=type_hints["include_subgroups"])
            check_type(argname="argument token_ref", value=token_ref, expected_type=type_hints["token_ref"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "group": group,
        }
        if all_branches is not None:
            self._values["all_branches"] = all_branches
        if api is not None:
            self._values["api"] = api
        if include_subgroups is not None:
            self._values["include_subgroups"] = include_subgroups
        if token_ref is not None:
            self._values["token_ref"] = token_ref

    @builtins.property
    def group(self) -> builtins.str:
        '''Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        assert result is not None, "Required property 'group' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def all_branches(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true, scan every branch of every repository. If false, scan only the default branch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        '''
        result = self._values.get("all_branches")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def api(self) -> typing.Optional[builtins.str]:
        '''The Gitlab API URL to talk to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        result = self._values.get("api")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include_subgroups(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Recurse through subgroups (true) or scan only the base group (false). Defaults to ``false``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include_subgroups ApplicationSet#include_subgroups}
        '''
        result = self._values.get("include_subgroups")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def token_ref(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlabTokenRef"]:
        '''token_ref block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        result = self._values.get("token_ref")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlabTokenRef"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGitlab(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGitlabOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGitlabOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42ead097d463c27c6fcc64d002925e0c4b40ba5bdc1181a4805cf603c81732f8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTokenRef")
    def put_token_ref(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGitlabTokenRef(
            key=key, secret_name=secret_name
        )

        return typing.cast(None, jsii.invoke(self, "putTokenRef", [value]))

    @jsii.member(jsii_name="resetAllBranches")
    def reset_all_branches(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllBranches", []))

    @jsii.member(jsii_name="resetApi")
    def reset_api(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetApi", []))

    @jsii.member(jsii_name="resetIncludeSubgroups")
    def reset_include_subgroups(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIncludeSubgroups", []))

    @jsii.member(jsii_name="resetTokenRef")
    def reset_token_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenRef", []))

    @builtins.property
    @jsii.member(jsii_name="tokenRef")
    def token_ref(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderGitlabTokenRefOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderGitlabTokenRefOutputReference", jsii.get(self, "tokenRef"))

    @builtins.property
    @jsii.member(jsii_name="allBranchesInput")
    def all_branches_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allBranchesInput"))

    @builtins.property
    @jsii.member(jsii_name="apiInput")
    def api_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "apiInput"))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="includeSubgroupsInput")
    def include_subgroups_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "includeSubgroupsInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenRefInput")
    def token_ref_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlabTokenRef"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderGitlabTokenRef"], jsii.get(self, "tokenRefInput"))

    @builtins.property
    @jsii.member(jsii_name="allBranches")
    def all_branches(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allBranches"))

    @all_branches.setter
    def all_branches(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d97cae5e97643c34598070d0ccacea19f4682c44431fed6063bcf9dcf564c7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allBranches", value)

    @builtins.property
    @jsii.member(jsii_name="api")
    def api(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "api"))

    @api.setter
    def api(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a1572730d811a193680229469f018c416582a9e85051be1cc1bd2c0af3bb9bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "api", value)

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9caec7db8bcba9136c35a0f9e38f2d5228ef19ee2939f74568307342513f3407)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="includeSubgroups")
    def include_subgroups(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "includeSubgroups"))

    @include_subgroups.setter
    def include_subgroups(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a80107e533dccc624f7be1415475b80f8f72abfb866f87b3d661f913782a287)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "includeSubgroups", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d10f2656e5b25aec0bd5d03c09cd9e741cdae5c8809d5bd6db5fed25707d02f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGitlabTokenRef",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "secret_name": "secretName"},
)
class ApplicationSetSpecGeneratorScmProviderGitlabTokenRef:
    def __init__(self, *, key: builtins.str, secret_name: builtins.str) -> None:
        '''
        :param key: Key containing information in Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param secret_name: Name of Kubernetes ``Secret``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9702d6148c0e65a04beea2304ef34a728555ae74cb9f4a2984856c35a719c2bb)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument secret_name", value=secret_name, expected_type=type_hints["secret_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "key": key,
            "secret_name": secret_name,
        }

    @builtins.property
    def key(self) -> builtins.str:
        '''Key containing information in Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def secret_name(self) -> builtins.str:
        '''Name of Kubernetes ``Secret``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#secret_name ApplicationSet#secret_name}
        '''
        result = self._values.get("secret_name")
        assert result is not None, "Required property 'secret_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderGitlabTokenRef(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderGitlabTokenRefOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderGitlabTokenRefOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__813df355fd5c4ca255aa7e808306b4962ec2d5a5034a9cf7014f82dca8a20de1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="secretNameInput")
    def secret_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secretNameInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e08b3a41d2470fdb7ce950130f59555c28c53e23c29c922a18f5bd343e6ec71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="secretName")
    def secret_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secretName"))

    @secret_name.setter
    def secret_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c2c084a6c00d46f7f58e3bbd15e47715397d32eb8ac4dff4c557bb086c8e1f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secretName", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ed414b004e74cba43a99f67da23639c60771f1e88dcf251757fc058f7424a96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__047816852901e66e44cc487321bf73cde221a3eb9fd8579685cf9fe0ad1c356c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__376593b730025fb13b5a0591d97d48bc03664487de88f9766738d5a718945980)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2b59d16214a66ae72231f690140411fbc6089be024723b80a82efbcc2f361ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afc7f9b518c659c6dd3541cd98abf80a174ccf8c1d284b5c7aefa1bf5dd07640)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f88a1575d448107af9bd0f8a27564bbdd6ab11b7ac734cd4d395ff72272c9396)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProvider]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProvider]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProvider]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23f011913dd2f195d9ba15825b1f2a794120c7136af8ccb24ebf591355bbb1a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1458bedef5bdee40d32bb7dd21b0c9dbefec1408751866531baad5c5c5106a4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAzureDevops")
    def put_azure_devops(
        self,
        *,
        organization: builtins.str,
        team_project: builtins.str,
        access_token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param organization: Azure Devops organization. E.g. "my-organization". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        :param team_project: Azure Devops team project. E.g. "my-team". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#team_project ApplicationSet#team_project}
        :param access_token_ref: access_token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#access_token_ref ApplicationSet#access_token_ref}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The URL to Azure DevOps. Defaults to https://dev.azure.com. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        '''
        value = ApplicationSetSpecGeneratorScmProviderAzureDevops(
            organization=organization,
            team_project=team_project,
            access_token_ref=access_token_ref,
            all_branches=all_branches,
            api=api,
        )

        return typing.cast(None, jsii.invoke(self, "putAzureDevops", [value]))

    @jsii.member(jsii_name="putBitbucketCloud")
    def put_bitbucket_cloud(
        self,
        *,
        owner: builtins.str,
        user: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: Bitbucket workspace to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param user: Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#user ApplicationSet#user}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param app_password_ref: app_password_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_password_ref ApplicationSet#app_password_ref}
        '''
        value = ApplicationSetSpecGeneratorScmProviderBitbucketCloud(
            owner=owner,
            user=user,
            all_branches=all_branches,
            app_password_ref=app_password_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putBitbucketCloud", [value]))

    @jsii.member(jsii_name="putBitbucketServer")
    def put_bitbucket_server(
        self,
        *,
        api: builtins.str,
        project: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        basic_auth: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param api: The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param project: Project to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param basic_auth: basic_auth block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#basic_auth ApplicationSet#basic_auth}
        '''
        value = ApplicationSetSpecGeneratorScmProviderBitbucketServer(
            api=api, project=project, all_branches=all_branches, basic_auth=basic_auth
        )

        return typing.cast(None, jsii.invoke(self, "putBitbucketServer", [value]))

    @jsii.member(jsii_name="putFilter")
    def put_filter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderFilter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f34b1092f2af1bfa07840578eb831b7de5a88514182e3d6dea97c11eb93a042)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFilter", [value]))

    @jsii.member(jsii_name="putGitea")
    def put_gitea(
        self,
        *,
        owner: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param owner: Gitea organization or user to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#owner ApplicationSet#owner}
        :param all_branches: Scan all branches instead of just the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The Gitea URL to talk to. For example https://gitea.mydomain.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param insecure: Allow self-signed TLS / Certificates. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#insecure ApplicationSet#insecure}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGitea(
            owner=owner,
            all_branches=all_branches,
            api=api,
            insecure=insecure,
            token_ref=token_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putGitea", [value]))

    @jsii.member(jsii_name="putGithub")
    def put_github(
        self,
        *,
        organization: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        app_secret_name: typing.Optional[builtins.str] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGithubTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param organization: GitHub org to scan. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#organization ApplicationSet#organization}
        :param all_branches: If true, scan every branch of every repository. If false, scan only the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The GitHub API URL to talk to. Default https://api.github.com/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param app_secret_name: Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#app_secret_name ApplicationSet#app_secret_name}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGithub(
            organization=organization,
            all_branches=all_branches,
            api=api,
            app_secret_name=app_secret_name,
            token_ref=token_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putGithub", [value]))

    @jsii.member(jsii_name="putGitlab")
    def put_gitlab(
        self,
        *,
        group: builtins.str,
        all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        api: typing.Optional[builtins.str] = None,
        include_subgroups: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param group: Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param all_branches: If true, scan every branch of every repository. If false, scan only the default branch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#all_branches ApplicationSet#all_branches}
        :param api: The Gitlab API URL to talk to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#api ApplicationSet#api}
        :param include_subgroups: Recurse through subgroups (true) or scan only the base group (false). Defaults to ``false``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include_subgroups ApplicationSet#include_subgroups}
        :param token_ref: token_ref block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#token_ref ApplicationSet#token_ref}
        '''
        value = ApplicationSetSpecGeneratorScmProviderGitlab(
            group=group,
            all_branches=all_branches,
            api=api,
            include_subgroups=include_subgroups,
            token_ref=token_ref,
        )

        return typing.cast(None, jsii.invoke(self, "putGitlab", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplate(
            metadata=metadata, spec=spec
        )

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetAzureDevops")
    def reset_azure_devops(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAzureDevops", []))

    @jsii.member(jsii_name="resetBitbucketCloud")
    def reset_bitbucket_cloud(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitbucketCloud", []))

    @jsii.member(jsii_name="resetBitbucketServer")
    def reset_bitbucket_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitbucketServer", []))

    @jsii.member(jsii_name="resetCloneProtocol")
    def reset_clone_protocol(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCloneProtocol", []))

    @jsii.member(jsii_name="resetFilter")
    def reset_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilter", []))

    @jsii.member(jsii_name="resetGitea")
    def reset_gitea(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGitea", []))

    @jsii.member(jsii_name="resetGithub")
    def reset_github(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGithub", []))

    @jsii.member(jsii_name="resetGitlab")
    def reset_gitlab(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGitlab", []))

    @jsii.member(jsii_name="resetRequeueAfterSeconds")
    def reset_requeue_after_seconds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequeueAfterSeconds", []))

    @jsii.member(jsii_name="resetTemplate")
    def reset_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemplate", []))

    @builtins.property
    @jsii.member(jsii_name="azureDevops")
    def azure_devops(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderAzureDevopsOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderAzureDevopsOutputReference, jsii.get(self, "azureDevops"))

    @builtins.property
    @jsii.member(jsii_name="bitbucketCloud")
    def bitbucket_cloud(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderBitbucketCloudOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderBitbucketCloudOutputReference, jsii.get(self, "bitbucketCloud"))

    @builtins.property
    @jsii.member(jsii_name="bitbucketServer")
    def bitbucket_server(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderBitbucketServerOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderBitbucketServerOutputReference, jsii.get(self, "bitbucketServer"))

    @builtins.property
    @jsii.member(jsii_name="filter")
    def filter(self) -> ApplicationSetSpecGeneratorScmProviderFilterList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderFilterList, jsii.get(self, "filter"))

    @builtins.property
    @jsii.member(jsii_name="gitea")
    def gitea(self) -> ApplicationSetSpecGeneratorScmProviderGiteaOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderGiteaOutputReference, jsii.get(self, "gitea"))

    @builtins.property
    @jsii.member(jsii_name="github")
    def github(self) -> ApplicationSetSpecGeneratorScmProviderGithubOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderGithubOutputReference, jsii.get(self, "github"))

    @builtins.property
    @jsii.member(jsii_name="gitlab")
    def gitlab(self) -> ApplicationSetSpecGeneratorScmProviderGitlabOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderGitlabOutputReference, jsii.get(self, "gitlab"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="azureDevopsInput")
    def azure_devops_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops], jsii.get(self, "azureDevopsInput"))

    @builtins.property
    @jsii.member(jsii_name="bitbucketCloudInput")
    def bitbucket_cloud_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud], jsii.get(self, "bitbucketCloudInput"))

    @builtins.property
    @jsii.member(jsii_name="bitbucketServerInput")
    def bitbucket_server_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer], jsii.get(self, "bitbucketServerInput"))

    @builtins.property
    @jsii.member(jsii_name="cloneProtocolInput")
    def clone_protocol_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cloneProtocolInput"))

    @builtins.property
    @jsii.member(jsii_name="filterInput")
    def filter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]], jsii.get(self, "filterInput"))

    @builtins.property
    @jsii.member(jsii_name="giteaInput")
    def gitea_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea], jsii.get(self, "giteaInput"))

    @builtins.property
    @jsii.member(jsii_name="githubInput")
    def github_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub], jsii.get(self, "githubInput"))

    @builtins.property
    @jsii.member(jsii_name="gitlabInput")
    def gitlab_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab], jsii.get(self, "gitlabInput"))

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSecondsInput")
    def requeue_after_seconds_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "requeueAfterSecondsInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="cloneProtocol")
    def clone_protocol(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cloneProtocol"))

    @clone_protocol.setter
    def clone_protocol(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1535253e957e2f7315c441610dcec0cb30d6ac2b5bb612ab1a9c1abd63f9fbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cloneProtocol", value)

    @builtins.property
    @jsii.member(jsii_name="requeueAfterSeconds")
    def requeue_after_seconds(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "requeueAfterSeconds"))

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb37d82196ec1096cc6c2802c62fccdf19e3d54cfb2ee9eca18a23d546f40f16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "requeueAfterSeconds", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProvider]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProvider]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProvider]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f7108fd7226eb04885ac2a94edecce74343ae356ee1fd8f8f8c65aac9453b91)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecGeneratorScmProviderTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        spec: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpec", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecGeneratorScmProviderTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecGeneratorScmProviderTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30c1cbebe087bd915da57b827be85ae0b0675c29d4259371791d185e1f291e26)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if metadata is not None:
            self._values["metadata"] = metadata
        if spec is not None:
            self._values["spec"] = spec

    @builtins.property
    def metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateMetadata"]:
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateMetadata"], result)

    @builtins.property
    def spec(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpec"]:
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpec"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6373779e342e9770452d5db8a3895d55dfb6b94cfcc333dd79d26b7cb07a6ecd)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97b22792cec89b5763c041077ce0922014a9c36c3bb536e7f095ac3f7cb99854)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__edde14859bffc9b51b4afa167884e3995b24aebaa4442b3715f95c52ae88eaae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7dd4e0767b9737681dd0edd55ca8efebd790a5b12b3f51134c83a0f3fb3d356)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d59b648ccd3a2405d1c12e937f1e7603288514e5170b873f3f9fa7974da15e1b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25e3c6d395f75503aacc2aee0e2347f7a8309cee647464136ba927d8ada6cb42)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f22029328a884c1b2a309729db6c47f72efb2c73636d942a4a7f8cbeb28fa06)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9703347ef8d93365be8c11c1c85a2d0b1377f2467813566394c8f929e58cc0cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c4cb50a453a1106f191d268e5912fdee9a3a949a715381bc740a0300df31885)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateMetadata(
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            name=name,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpec(
            destination=destination,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            source=source,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @jsii.member(jsii_name="resetMetadata")
    def reset_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadata", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9f2d3c9df7141d70debab0549054d07e789f5c2b5f6f6c4d20694564320bcb0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "source": "source",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]]] = None,
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a99422aa4b3f8af74c24aada345791687c0f19d6c475311b38267b5f3984e01)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if destination is not None:
            self._values["destination"] = destination
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if source is not None:
            self._values["source"] = source
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination"]:
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination"], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource"]]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource"]]], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76fa94b4b2d5b35347f26a6b1f938304eb042de93db2d1022aa8f11da037533a)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ececcc00826c0ff0194cde0dc94daf8e69fa33c73bb01c9a99acd07f05ced0d9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63f678954f1c0a9b011df386d9a12782eb986ae5d6ffb42ea0fe6a2954961ed0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__008835fb8f958be5ba9d00cca0adf6c1badd6dfd7194ecff54d127886f27f161)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1b6dd31bdb8be8421a9d42d55d6f970bea5d8b532d80ddfd925580ace3b61d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fd68b3e6946b771daa35aa6f3a02038945d09aa3c5d81daba20bfec1aeea819)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__291d2ce51c0779bd26f9a027e768aa7244e25e9018314944d707e33ea52bf5e0)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5c7774d0ca3cceda262c13d86715a977e99a6b477869618c556e39a9928d356)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__272cd8b6c1085af146bc080a9e8499b65acf8b7429415a88d9008ae3076a9510)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2eb3ad9c51d50372e65ab72f5c943adf3f11593b4be201ef20bc8b629c05d347)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd77fcff1b86d11c414bff79dfcd5f5cc72b6824bcb0d41f902987701f158781)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27ef46f7acd8cab3eda81f19e984b84404398620b493eff33262f701242d41e8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f4d2e3e2093d64703c7ab06164fa8bca719fa301c0283121d0dfcde1a6766c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__344cc1220f1edc33984d0decc42229d9cfbd2245441f8df6f84352842c5105bc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd5b6737d42531f182d118f9b4bbc3e6ed64207d3e7e77742ddfce93f92102fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd4fd42593e77102c3a7e3333c20e9ba6795b0eea7cf35a6a47bc49bee4e75d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ff585918299f5d606cc2d27214f2af9acb79be9408a349d7b70231ffa5ff0fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cb539fd82a68cc5c3ae18d248f01f0248d9ee114a34ef9f6b3b8f3893727c63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4aae7a9f60525d08faabaefd47c434bc3e8263fd0a74847ff2147e0dd7030790)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17507d534895a3f1ea3071ad34bc63343ff62d0af234da1cc4ae414e37bee345)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9727e2e8c4d2e8c24ce0915d167d1659a075abcd5e3082a70f4d27e9f688ff33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36be111044436b7fa16d7bc7560681c411751baa5dc89f6ffcad68de5b1b6290)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07a423a63ed95840f657dd1793fcdccd9cc9fe65e3bec7a3311cde3e95e3d53e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a4a951cd5d8284b1434a383a147f2df6a5887aa412b1ed952924cc30f122015)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e39265bdef198ebf12d02881423bccb1fe06977a959902d945a960d6a5c7d119)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b78593782d9a2ccbbeeab3920a38d15d9e1a80d3f4b5e7a0cef7595cd6cb5a29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2ba31b814649bcc8ff16ae400d23a445694bd926c013d8988511dfd76ad4f51)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f940bdc7833cf169eba13804d6929a69f4b1d1c9f7be5d48ce2328d1def35ccd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__120d6180b1d7ef87ee0fd497d6509144cf318dc17bfd568c195a7b60718e09d1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84efe8afc6a9bccc12bdbd91c50c8285074ba1fe9bce8745048572cc81f18687)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__462c1eb03a4f2bfcc48644370e99733d936b8e45e5b37ce48f2355d444dff9d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24b62c08620b1e99b76e942bccf97bc9e9686dcef04e9b930e278f5398b70313)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2358274a6404dad1c1f5a3a07b648985712fbfb791b9fe00bb5f073e60c84a3d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21a8208cddfb03d31bafaf093e5d33882a0046783db73a4409fa1f6449498ba6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46ccc8d70206b85f737b7c120b49f082c7e3ce648b70176f92567eb1a9b06203)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09b32fd624f720bdd74c9757f9aca8fa0266373e1cd5c8198fef532f5ccaf880)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetDestination")
    def reset_destination(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestination", []))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b80b7c226b06cd1d0af50b339623c7936fdf25f8900a83ae9926af8d06f8081f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f813a2a8101d1d2cebf07025f4a34daccb32804d3e2cb6f77cfb36fcd09edca0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f4e63d21df7decb501b410aa9c38684ae65e14146c95a43f2f02906629f8bdd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "repo_url": "repoUrl",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSource:
    def __init__(
        self,
        *,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        repo_url: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab608a0e25f9389210715874fd7aa603d4528ec9d42d3d0435b67213c11e214f)
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if repo_url is not None:
            self._values["repo_url"] = repo_url
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repo_url(self) -> typing.Optional[builtins.str]:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e00c4fe63b551b3d35090299bd160a6ab15097b2d0ed7f34abe1954d6122cc40)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8f4328c061cf4e3ad85dc5208dc9ec7cf0c7bd3102c2056637561b19793bb8e)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09cddbefb630e96a34f833c6b396badb4239649c00e8c45315b97c88576e3631)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67711c6cb99a98b16ee9945ded60dc66e0d0c3da6ef4aba8cd641f6e9f61f12c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90418f29b61aa52d990f17943890b6d62d4d49822b4a1dcfdf3cc1afd8f5a974)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3cd04d32bc099ea7fe8923e91570d67c97b5eaff3755f42e4311dadb5eb3e32f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c438f08979540d8e3d584818b2c864af671ce42d1f25f543b3cb88f4e7818ed7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__084e5b0331ce1921c0793b9cd979d0b45749c21f08cb2320747d0ae4a01553dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa931941ec6dfc98c6fcf8e2d033113f36bc98ea90a461cf9fc69f39a7bcfd9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ec372518144974f0e8255438be3272d0659e4a7769f93da2f6ae832667c4506)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a92f966dc8f9bde718275d0f3ff4e3043280c6da587f9a412d3e19bc9b05ebca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__715c8f4b14b3f972469995d6c077caca417aa98b87fdd802ea3520c2cacef13e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c688e4fad626d7c089dd114601169b5c4aea8f859841942e94615c1827737f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01194cfe50803f28c54dac39cd1573c57cb030dd3f3d7105901be6557966d939)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0371594bd432523e4aef7f5c30343350a330cbee92f3982e55481d71e5b7aefd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa6237717d22dbd4fc817b177406383cc55a3d9b3b8542451d4ad1d9e41f02a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f36745ebd7750fb8dd14ae0637fa6eefba77ae5db999f726fdbcc01960d0ddb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__553f73698b35e7be1e99b90f583ec818906aa0eb9a81da6eaa6d27d7dbe6cfab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ffbe7d41b104cb4992d6bd4b198d9a92acb64f18078a81ee83db6fa5df51dae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85f99ea69cc32cd564f7426be32c0444bdcb7cd11373eff4940676b170c2760e)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab0599e05ed7dfaca7845d047830f50aca0710df1853852d9ccb696e50aa1553)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95771c7891c491ad817f0ab7d9baaed4beb4315cead0b531b7873414bdfdfb88)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2466a1e35c1505d96bf9660909f0b3e8fa5b48a15fb7fb78250cb5545faee9e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__914fa2a8086032d0fba037d142e6dd668479187576e453ade19d5aae8a55dedf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f8eeecd5f92995913dece311b6cf64898d8c04eb0369ccf7fa70489dec97da1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67b3ca83893bc88d644330cf8bab68684dbe98207a496e781b7645e0ed380ec7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee51770b02dfb91ee24d26f972ee38bf9b5e33d35ef3d61ab64c24284fd3b702)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f50c545412b1dd789e4407014ab59a82a96b8a4a181901beccd9febd2ab0d025)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__879e80ead91d7a75d0ace3cbcdbdff46f0c6f9be7dd3f7465482756b3b82b7c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83e597428e961204154df686a0e584e96f340e6b8d079a4a708e758d21efe0f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__080ce4936a0b53d693f10b197973e523b1a4e83b9d2026d6de47bd30338ce316)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__910635072f54e6e60eecbf194d6ac4011b5d41c893c0101e60fae1beb6f23f74)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4078d8b384e25bbc47d47d4a37466a40583afe4d3af3dbd174fef24fbcd65ab8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee3d9da7d7d3c660f24e28fd29f4c4af3319b9bba9ea8f72637e2f90dca2653e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d1c0397d8c71e7558b05452709113f134e0871a33c0447761fabb46732755cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f84626611e0472efd80fdea09bf91f4cb81e8ec4635f6dfe3e3aee849872abf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__671ddabba621743e2ad2a74481ea1f4be4d01c28f8720a2927f2da3ba102d439)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7b4ac05a02ac454e029adce94754e8e4abf35dd2b4a9efee69b9036de77ebb7)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6ea4ab4d39987dadebc6cf428d8929535b8063643248f5b80b312d606c67eb3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb0f19ad19cebaa482abe6a6f92cc0d679a2092c679c80e25166d0953cb3ef23)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7264a6a4471ed3b347a19b48930c3de15f9f98c7a9d7f34ca728862d48bcdbba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f018672ce28c08fa151e0bd632cc636e31ec88a00f840add8bb40ad7d39188b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e2ae7004e020af0823b254e71bf3c5998867ceb030d62f7578f34eea934d353)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b91fd0712873351cd44a91302d44910b44eed22e3d6f008f7c2680d88c51eb89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43711e34070d8946969080a8cf634c0a56c6e7a4d45a753d1b832b4386c01e81)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0546a22fb6fe71980d2d661be5667b728d52bfcc0911e07d0160d886a8b80430)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__762b3aa921d5f67c52f7dd1d4ad5383fb0c66ecab29b2972f1341ecba61a0202)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4117390373a35724d838a01d696378f7b0c4db01509a7e60a2c40456ba0b7461)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff80d86205192b860ca7b19720671064961232298f654647cdb385f319716a2f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de842879ae9ccdf992d5ef06a6ae5b408b9fb220024f0afa2c53518f4073c65c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4216c457e394470f36aa37f288c2f7ad10b9350411fb1d56aba8d54e72e09332)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__baf02a385df35de41b301d59482eceb286a277e5ee3422de12bef1582d608a2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31b9b762a87401b7adbc50e000012e8acd9f8b54d5303f17b45036bb0aa9f23e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__090f8732b2762639143c79a6e3bfaa4c9c16a1f521ab2eb58ff0e4376f6e7423)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ddd4b69eec4f11dabe3c2be1ef573d24bd952a43605c25137976c11445cd775)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c941714d01ae995905fddf961afd087a8b54f1b4c72f0e6af8afa143757e3da6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6be50eb68f9a6d08620342994ddb8246f77796668c71fe612e2fbe815ddc2cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb5eada924194d31771ec08c4a4fdb0c64bf9d49cd68957ab99d4e6a059160f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c08dc27ee0569640a2faa8236e76b653f8552b856761ba3a61545556d28d86fc)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b50e0cc8322d8da61d79d25ab0dd013f50026dd4f17ab4c5a61b703e618730d3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d9ec90a204c058da6bf9e12296bb7c7461c509e8cbd5768450d8e3aed0d1b9a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32a2cbb12c0264224ae5729f55291d47ef1a2d0085101cabe7d83b48d39f50e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7e364a9aa93001a1e8681b508f753628d299865745671279949bf81f5c5c5dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc77f39063ff4e082e0c821df7e7c951fdf123eac882e9edba9fbc64e741e593)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e050e7646c71c6fa138fbd0705ad270025b29486eb575bf7c7b139a46db9c96c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b475db6cb3ba600eff24c0fb4199feb985728788660a4563cff1d1ad31bc7816)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f14dd23abc5109b3ec6094b23671be1adddd486578db7689d6482c159ff8ea57)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__590b84e7da4044882d4b37799b14a4834e06ce047123fe8fbaa4f55014394558)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5133efa5af1ab5c7776e433692c7f7188d0b4716e228142b00ce90f26bacd5ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dfa0cd5b698ebd43f6256c0a684ecb4c969d35128a755bc9ad1ab9d1bd98831)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c98ca22a4041435c3d2020af6a259c74ff55ca0327cc6ec262e457e57dd1e81a)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__819bf0cb2bb8f835a017ad38fede23bba6bb494fadaa425c5fa439a598375743)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a114e737073d3fb95519db6b2385a8f59f322676e105bcdf90f86b813e0bd7b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bee0c9036f6f3a4cb7dfb8ba6f849020f1fad3fae2ed996ee3704deaca7f6db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c718e0c3dccc1c261b7f2a0df015a9016d5ce3c5af4d9e5456e0e45d8d9b6f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f49a9691d5b092640764b58393448275a574d31993c2e599c3b9365d4d959eec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6339f8d3feb62fd0a943e15e6784da969d13bc8e5a848c7c414ab1e1a9db68e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee1b54aee2f3bfa255165befc0111a0a75ca7a294a853700c75b8bfbe07564ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__454c3b7e3c9e5811fea5d45d188b2cf34b9eef4aed8e8dfabb6d37b3e25559a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a23a47103f6590c74e6b51d2ec7debd485da6e070a0693d4e6d9546e96154729)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16c3a48bd1e3311ea2f27996b2d310684adec70ca56bda137e323228dde20555)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26308a1c464e0d9ec1106b8cec8daad8206fcf77dd13700ce2ace1a577eb17c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8e54c5f403d46a04b108231f9ce7c0c6400e0e9640e21b82377efa0f3ba5b16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__731aeae81e2683791d298016f3d8d628c2940e65f4444a24334cce7a7315bdcf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4314d4761122f8d081e6a6882483258d7315027d7e9b9d33da867e5f0b90a42c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07c0c51e1f5cb692ccd67d086ce47a95c6b6e99edb05259bd1cfe41c0bcb1825)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin(
            env=env, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetRepoUrl")
    def reset_repo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepoUrl", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee1c4ef8a0029314cd7b443dd90a207996caea42563e5b8b22099cb0caef125c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c70a82972dd254f8fd4185800ef0e16dd51c4524c02fd04244ac0e7be8ff5b03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4005cbdc6f7664fcc6ef09343d527626cb0690ee095b14882edf1396c092faed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43fc0fc2ae1920e610941eb021b6713de43dcbd0413057a338e302b619935c5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55cb7d2bc75a5ebe37ee3ed52d0a3f35b1bda77f1619defc9b3dcb44bd1234e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff733c485a7b09afd3b26adfefce7065916b6bc7cc777b200dfd843ae082d76b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2959f4d7b08f2a9c2144d1672b4ed955addbc69e9d846c00eba2e6da3fcfa92)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d0b262f52ca840ccb440e25261a4ad70cd6532c4ed7204dd0baece5ee690f06)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b47489fbe5119e9eb613106879d4f9d96956a0f3e9eb447caf3d0be60057827)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c82b812d2f3a0cd2f80e751c31755924fe1acea86ba62a1655a045c95fa358e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb291fa19e2358e6a765526e65114017464ae3d91a972859e7667c9c2d4cad82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__412ff07613500baf226718c801929f1a486a585c3c386475cd801b9250c09ecf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fea7e9a5e84a70b4131341ca7bea4039698b4b6bc3fb4ad8be3a5055cc283579)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8139fbbd06548064a759146c0d5341b28d24658236958ed3133a5ce32d1cff50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f75df5be72caa4ee4dad148e293f30e00e6c2aad8b652f714184c4f07d4c9e83)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4a48f1580d723bca2602d39d60e4723109037d0ca96a01ce83dd9c2d76838a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f483090cfcd818d18b4ebfe93ed783853f8a191a8cdf91278b41c1cdb4a3fa6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8998ac51701b7bfc33eeed3c74f0cd0b5080dc603fb193b0ade87ae94471d465)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8a08a8150797ebf31801b98df14da9701bd88ea6c314b504fa7ebf066c55c97)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fe389f4dd3a11b8542a8203957b054cafc542eeb14989afb933c77838d74502)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5aae00c004585f3c59754975bc9180e4becdf6a1e7be370c345f82025e9e8f66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13d1bd3bbe941dc78b23d54d5e145befa0a3777a9f1505425d0fbcc18012636a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62efc84aef519fcfe353eea844e33447f6d1f2f80795f83ae4dab99acd7b56a3)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d3fa4bec52ee2b44bf4e59ac4c643d4b08b77389c07850a0693a6c92f01dd43)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27fda91f1d0000db2cf38eac0242f235b7ca3c1cb58e89deaf63d7d4a5838204)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ef16aaab36013a8505d09075d1ea06fa1b92e266ee5d8f990864dafbd15942a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f9cfbe1c0d286fb454bb0d6c2cc726543fc3e0d419566f333a8f60880e88efb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52a75a575f02c2d43835a77ad9f47d9dca1f90a4ecfdac09f66e52f718b328fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb1e4850cf24fb0df73e44bece0b49428766fedf096817bcd44a757c8ad5f81a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6849195c2c3eae9a5d77ba43a8e6e68c5bc291a6a449e32a059c590e75fac858)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea736e1ded644b5a12ab95639b6473b1eb959d6ef65b74adb4e522c3945faafa)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7329d694017c2f3a3a4abed9aa938999af2d1ae5aa7e7a1168e84180b9b8f70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e64bccb4c5ec6f00322af9dafce84faeda76f504248a39b95f5b5b8458737725)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d512ae46d7e3c376d2dccee3f4d4919618d45919aad7b331292e824377a54ee9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c64d9dbcc490fe3bf380931f2f9bf20125ec48608e5c74983d65df93cb7f8846)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(
        self,
    ) -> "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc54d25e74124b889d43cc378d1ca123d9ef6eb19c09ae2852e63dbb0605e021)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36aa20df9d148d6eed914151d5646abdc53ff209960a2b795c9a5bc774354306)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbded9f2877930e8ca5c455a6d6ed68704c609cb0cd7f97c114aa7d65d12e535)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da8a6731f318862ab4ac3d58dcec93ee9530942b31d9dbfde1471bf9113d6f86)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6494a4adb44ae852c6680fcd708301552338ac165effe54c01fb6dbf86bf20a3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__103b6959daaf27bb3d02d8548db650dc6bc2d850064b8c7e925f4cc04ab5ff20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a3d291c6e6b319cfe64a703969b2bbaf9f44b41ae0f196ab08018c8a7492293)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9464bc194e2087822d04fa42760b7fd8b56a79a4c84bce589c042b3832297a82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84e8b79d865dc88da709930f6efe454c34ebb3dff279f3930daafaaa0624da1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c946b9c83b51617189a0ceb876a1e9f4630dd72f1c548e8cfe94acbce94bb3f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__677bcd214016ee158a8dbd41bf7844b3107a726ab9c24ee33a6c0b02fe0e1a48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8a8b4107fdb9ee7b65e4fc47fcceb1077842b1c8144f5d642717b95e0934db0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorSelector",
    jsii_struct_bases=[],
    name_mapping={
        "match_expressions": "matchExpressions",
        "match_labels": "matchLabels",
    },
)
class ApplicationSetSpecGeneratorSelector:
    def __init__(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecGeneratorSelectorMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param match_labels: A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f0e56ec1381f03f747d8cadf04d824ed0d6604ad65523b8b5f5b2ca71d53602)
            check_type(argname="argument match_expressions", value=match_expressions, expected_type=type_hints["match_expressions"])
            check_type(argname="argument match_labels", value=match_labels, expected_type=type_hints["match_labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if match_expressions is not None:
            self._values["match_expressions"] = match_expressions
        if match_labels is not None:
            self._values["match_labels"] = match_labels

    @builtins.property
    def match_expressions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorSelectorMatchExpressions"]]]:
        '''match_expressions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        '''
        result = self._values.get("match_expressions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecGeneratorSelectorMatchExpressions"]]], result)

    @builtins.property
    def match_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''A map of {key,value} pairs.

        A single {key,value} in the matchLabels map is equivalent to an element of ``match_expressions``, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_labels ApplicationSet#match_labels}
        '''
        result = self._values.get("match_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorSelectorMatchExpressions",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "operator": "operator", "values": "values"},
)
class ApplicationSetSpecGeneratorSelectorMatchExpressions:
    def __init__(
        self,
        *,
        key: typing.Optional[builtins.str] = None,
        operator: typing.Optional[builtins.str] = None,
        values: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param key: The label key that the selector applies to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param operator: A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        :param values: An array of string values. If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b6631b3293901914246704e3ae584c85324af744aa0e503b45d9899862b7589)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument operator", value=operator, expected_type=type_hints["operator"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if key is not None:
            self._values["key"] = key
        if operator is not None:
            self._values["operator"] = operator
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def key(self) -> typing.Optional[builtins.str]:
        '''The label key that the selector applies to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def operator(self) -> typing.Optional[builtins.str]:
        '''A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        '''
        result = self._values.get("operator")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of string values.

        If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecGeneratorSelectorMatchExpressions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecGeneratorSelectorMatchExpressionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorSelectorMatchExpressionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a28661f2bcbb89ce5bd3d9b0a622bf08ed061f3f9b0b24033109b537cad74cc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecGeneratorSelectorMatchExpressionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8773333d1dcc0422935e4963eaf1ea8c6d5e7fa2d0dbf16f7ed5cbe3c77b4c0f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecGeneratorSelectorMatchExpressionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a03fff1225e9a06d04cf4a910c7834c91d9d530795ab16496250eec252ca4642)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dc278f08786b9d8a81007485b5d322d215c1d79218537ca793ba3021e3b4f58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a4de3c3430b8be4580184685f52959fd752bd5de1629396dd3feea7a6a88ec5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__068bca9ea317af16782244ed3568c6e7dae5e90744137bf0a1acf86b5dbbfad1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorSelectorMatchExpressionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorSelectorMatchExpressionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd543d3e8c1bbd2705064f3b9492a44d4194b6b0db9d8ab34b5c573345ffc72f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetKey")
    def reset_key(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKey", []))

    @jsii.member(jsii_name="resetOperator")
    def reset_operator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOperator", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="operatorInput")
    def operator_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "operatorInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb329bedd8783905fd70a9c124cf6f96f3e53d051337a13b11b9fa1481897d02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="operator")
    def operator(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "operator"))

    @operator.setter
    def operator(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4aceea51f63efcf83b8f00a469657eed3933799424bc355987e42d85c4dc706)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "operator", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5c1bb70274255b47c717aef93314635adb5c2de90691e79ae48fc239bfea13b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorSelectorMatchExpressions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorSelectorMatchExpressions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorSelectorMatchExpressions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d16658195fd478b73c60b5c2ef4e56254acbaa8b1180b414180b7595086be740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecGeneratorSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecGeneratorSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1db0ee2cfc67d0de703a10e9f4b90fcd3aa92b3323e6d632ab36a9e5b9c387d7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMatchExpressions")
    def put_match_expressions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c61d5941cf002e113660eb165208d0b4e06fc3ca054b3bc8349010a80854f34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMatchExpressions", [value]))

    @jsii.member(jsii_name="resetMatchExpressions")
    def reset_match_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchExpressions", []))

    @jsii.member(jsii_name="resetMatchLabels")
    def reset_match_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchLabels", []))

    @builtins.property
    @jsii.member(jsii_name="matchExpressions")
    def match_expressions(
        self,
    ) -> ApplicationSetSpecGeneratorSelectorMatchExpressionsList:
        return typing.cast(ApplicationSetSpecGeneratorSelectorMatchExpressionsList, jsii.get(self, "matchExpressions"))

    @builtins.property
    @jsii.member(jsii_name="matchExpressionsInput")
    def match_expressions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]], jsii.get(self, "matchExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabelsInput")
    def match_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "matchLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="matchLabels")
    def match_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "matchLabels"))

    @match_labels.setter
    def match_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75562c0a8fa82721babd9d21cf0333323477e599888a5826b8956456b489bbdd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "matchLabels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecGeneratorSelector]:
        return typing.cast(typing.Optional[ApplicationSetSpecGeneratorSelector], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecGeneratorSelector],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__274d3f5d93951cbbaf5328b03a5380378801325d9215217c1d5ab6525ca40447)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adedb22a2eb37e27fce06ef5a79aae4f3723386890e8e655da099157e279fd88)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putGenerator")
    def put_generator(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce4891af45829518810d2450c14c447d85ea92b25388c6d6474a2fb6e8909e71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putGenerator", [value]))

    @jsii.member(jsii_name="putStrategy")
    def put_strategy(
        self,
        *,
        type: builtins.str,
        rolling_sync: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSync", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param type: Type of progressive sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#type ApplicationSet#type}
        :param rolling_sync: rolling_sync block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#rolling_sync ApplicationSet#rolling_sync}
        '''
        value = ApplicationSetSpecStrategy(type=type, rolling_sync=rolling_sync)

        return typing.cast(None, jsii.invoke(self, "putStrategy", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        preserve_resources_on_deletion: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param preserve_resources_on_deletion: Label selector used to narrow the scope of targeted clusters. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#preserve_resources_on_deletion ApplicationSet#preserve_resources_on_deletion}
        '''
        value = ApplicationSetSpecSyncPolicy(
            preserve_resources_on_deletion=preserve_resources_on_deletion
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="putTemplate")
    def put_template(
        self,
        *,
        metadata: typing.Union["ApplicationSetSpecTemplateMetadata", typing.Dict[builtins.str, typing.Any]],
        spec: typing.Union["ApplicationSetSpecTemplateSpec", typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        value = ApplicationSetSpecTemplate(metadata=metadata, spec=spec)

        return typing.cast(None, jsii.invoke(self, "putTemplate", [value]))

    @jsii.member(jsii_name="resetGoTemplate")
    def reset_go_template(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGoTemplate", []))

    @jsii.member(jsii_name="resetStrategy")
    def reset_strategy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStrategy", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="generator")
    def generator(self) -> ApplicationSetSpecGeneratorList:
        return typing.cast(ApplicationSetSpecGeneratorList, jsii.get(self, "generator"))

    @builtins.property
    @jsii.member(jsii_name="strategy")
    def strategy(self) -> "ApplicationSetSpecStrategyOutputReference":
        return typing.cast("ApplicationSetSpecStrategyOutputReference", jsii.get(self, "strategy"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(self) -> "ApplicationSetSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(self) -> "ApplicationSetSpecTemplateOutputReference":
        return typing.cast("ApplicationSetSpecTemplateOutputReference", jsii.get(self, "template"))

    @builtins.property
    @jsii.member(jsii_name="generatorInput")
    def generator_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]], jsii.get(self, "generatorInput"))

    @builtins.property
    @jsii.member(jsii_name="goTemplateInput")
    def go_template_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "goTemplateInput"))

    @builtins.property
    @jsii.member(jsii_name="strategyInput")
    def strategy_input(self) -> typing.Optional["ApplicationSetSpecStrategy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecStrategy"], jsii.get(self, "strategyInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(self) -> typing.Optional["ApplicationSetSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="templateInput")
    def template_input(self) -> typing.Optional["ApplicationSetSpecTemplate"]:
        return typing.cast(typing.Optional["ApplicationSetSpecTemplate"], jsii.get(self, "templateInput"))

    @builtins.property
    @jsii.member(jsii_name="goTemplate")
    def go_template(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "goTemplate"))

    @go_template.setter
    def go_template(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b58bb59f147cf9a65cccc2c6f6b79aa807ac4a546342ab63d65ef6f8b62f6540)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "goTemplate", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(self, value: typing.Optional[ApplicationSetSpec]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fff38c7c718bf9bde9c25b0a9d514ded1c07909fe2e1374f6be4ded9a5ca3568)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategy",
    jsii_struct_bases=[],
    name_mapping={"type": "type", "rolling_sync": "rollingSync"},
)
class ApplicationSetSpecStrategy:
    def __init__(
        self,
        *,
        type: builtins.str,
        rolling_sync: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSync", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param type: Type of progressive sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#type ApplicationSet#type}
        :param rolling_sync: rolling_sync block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#rolling_sync ApplicationSet#rolling_sync}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fb99ffb21242908ae39c790c113889d9dd5506eb01e05dd878b5c5e41334c81)
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument rolling_sync", value=rolling_sync, expected_type=type_hints["rolling_sync"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "type": type,
        }
        if rolling_sync is not None:
            self._values["rolling_sync"] = rolling_sync

    @builtins.property
    def type(self) -> builtins.str:
        '''Type of progressive sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#type ApplicationSet#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def rolling_sync(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSync"]]]:
        '''rolling_sync block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#rolling_sync ApplicationSet#rolling_sync}
        '''
        result = self._values.get("rolling_sync")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSync"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecStrategy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecStrategyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fbfbb17fabe75f2ad9003d8956001b69ed90029f0b7440f7def3242961d7e8f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putRollingSync")
    def put_rolling_sync(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSync", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c486cfe7ab60e0c5ec76c0902b10547fbfe919ce8ae909f405984876cf7b970e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putRollingSync", [value]))

    @jsii.member(jsii_name="resetRollingSync")
    def reset_rolling_sync(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRollingSync", []))

    @builtins.property
    @jsii.member(jsii_name="rollingSync")
    def rolling_sync(self) -> "ApplicationSetSpecStrategyRollingSyncList":
        return typing.cast("ApplicationSetSpecStrategyRollingSyncList", jsii.get(self, "rollingSync"))

    @builtins.property
    @jsii.member(jsii_name="rollingSyncInput")
    def rolling_sync_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSync"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSync"]]], jsii.get(self, "rollingSyncInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a3077c23445a3c907ea76d85ffc05a7099679a2038939f584065039b7994ea6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecStrategy]:
        return typing.cast(typing.Optional[ApplicationSetSpecStrategy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecStrategy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40c35fd4fa07feb040fcb6ef0be679e40e9d1cb86e5a496e5beaa0b0cf806546)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSync",
    jsii_struct_bases=[],
    name_mapping={"step": "step"},
)
class ApplicationSetSpecStrategyRollingSync:
    def __init__(
        self,
        *,
        step: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSyncStep", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param step: step block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#step ApplicationSet#step}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efef0a0a1b42e3950bbb1404dba1c81ccb3a3fb61845b3c8fc1af38a47c4aa3a)
            check_type(argname="argument step", value=step, expected_type=type_hints["step"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "step": step,
        }

    @builtins.property
    def step(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStep"]]:
        '''step block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#step ApplicationSet#step}
        '''
        result = self._values.get("step")
        assert result is not None, "Required property 'step' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStep"]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecStrategyRollingSync(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecStrategyRollingSyncList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d2a2585b2ae45a178fc961418856121588b157fe8a133df992094670993adde)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecStrategyRollingSyncOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e45292002d09780707d168858351018fcafe050d40369dfd6e58ba3f43770bf)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecStrategyRollingSyncOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__111fea687c2c94151555fe93bc7f0946e4600550db9b3d7839eb0a508ca6788f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0aaf5700a0b36e7232b545e03f841ca003bcd41a8d3a070391623f536c0b75c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cddf05ce2c3855843ce80caff0d1045b19ad3980daefa3c1dbc9f9a8e59f089)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSync]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSync]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSync]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a32938e7f89773f30de7f0cfcee715d2400f69bd3265777b5482e5b844a5b1f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecStrategyRollingSyncOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c931375096579790907ad03c6b0548ab5b4cf0e4dfb1b96cf9bfcfd53b7a2b39)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putStep")
    def put_step(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSyncStep", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0f3ef3b4eafd489b2e8a372813f56452ecb77ab1b9b9d93b141947dcc269cd7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putStep", [value]))

    @builtins.property
    @jsii.member(jsii_name="step")
    def step(self) -> "ApplicationSetSpecStrategyRollingSyncStepList":
        return typing.cast("ApplicationSetSpecStrategyRollingSyncStepList", jsii.get(self, "step"))

    @builtins.property
    @jsii.member(jsii_name="stepInput")
    def step_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStep"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStep"]]], jsii.get(self, "stepInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSync]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSync]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSync]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c8dad5c113c5c9100b4f0094467639a036deda03d8f6ff0d551042d5527b02a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStep",
    jsii_struct_bases=[],
    name_mapping={"match_expressions": "matchExpressions", "max_update": "maxUpdate"},
)
class ApplicationSetSpecStrategyRollingSyncStep:
    def __init__(
        self,
        *,
        match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecStrategyRollingSyncStepMatchExpressions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        max_update: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param match_expressions: match_expressions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        :param max_update: Maximum number of simultaneous Application updates in a group. Supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%). Default is 100%, unbounded. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_update ApplicationSet#max_update}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b5d88cd42609535ed9d062c1253115b84d09977119035b8e7401aa38e49eb77)
            check_type(argname="argument match_expressions", value=match_expressions, expected_type=type_hints["match_expressions"])
            check_type(argname="argument max_update", value=max_update, expected_type=type_hints["max_update"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if match_expressions is not None:
            self._values["match_expressions"] = match_expressions
        if max_update is not None:
            self._values["max_update"] = max_update

    @builtins.property
    def match_expressions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStepMatchExpressions"]]]:
        '''match_expressions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#match_expressions ApplicationSet#match_expressions}
        '''
        result = self._values.get("match_expressions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecStrategyRollingSyncStepMatchExpressions"]]], result)

    @builtins.property
    def max_update(self) -> typing.Optional[builtins.str]:
        '''Maximum number of simultaneous Application updates in a group.

        Supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%). Default is 100%, unbounded.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_update ApplicationSet#max_update}
        '''
        result = self._values.get("max_update")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecStrategyRollingSyncStep(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecStrategyRollingSyncStepList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStepList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d845b6024ada0a75d72cbb435f288609640eae3735d0a71aba55ae994ae71e8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecStrategyRollingSyncStepOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25e2c67950acda8f1fe24b8002a7141cfe15b3fcb2844ef0e35fdcca310679ad)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecStrategyRollingSyncStepOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5275d52537388df18447ca255481c7f61dd3d4583cf8709a3689d777192e28dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c101df05dced6091a31b623e01e65f4a48cd4098b53fb886ce36c2e8220780de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cae43dfdb759f980d56d3223f1caac04d3c461fc729667c8875f92ef0a86df60)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStep]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStep]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStep]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c44cd65f4bcdc54ad5287325a0f6e095d8b5180662446705fc5e4b263ee7cbb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStepMatchExpressions",
    jsii_struct_bases=[],
    name_mapping={"key": "key", "operator": "operator", "values": "values"},
)
class ApplicationSetSpecStrategyRollingSyncStepMatchExpressions:
    def __init__(
        self,
        *,
        key: typing.Optional[builtins.str] = None,
        operator: typing.Optional[builtins.str] = None,
        values: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param key: The label key that the selector applies to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        :param operator: A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        :param values: An array of string values. If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61911add57dff6eb8cdec390c6203e06bcd081d0d154e89136b0082ce4198642)
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument operator", value=operator, expected_type=type_hints["operator"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if key is not None:
            self._values["key"] = key
        if operator is not None:
            self._values["operator"] = operator
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def key(self) -> typing.Optional[builtins.str]:
        '''The label key that the selector applies to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#key ApplicationSet#key}
        '''
        result = self._values.get("key")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def operator(self) -> typing.Optional[builtins.str]:
        '''A key's relationship to a set of values. Valid operators ard ``In``, ``NotIn``, ``Exists`` and ``DoesNotExist``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#operator ApplicationSet#operator}
        '''
        result = self._values.get("operator")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def values(self) -> typing.Optional[typing.List[builtins.str]]:
        '''An array of string values.

        If the operator is ``In`` or ``NotIn``, the values array must be non-empty. If the operator is ``Exists`` or ``DoesNotExist``, the values array must be empty. This array is replaced during a strategic merge patch.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecStrategyRollingSyncStepMatchExpressions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b8415cc59104ff76880f7f43a2a70bbcfd48d05389ee6751984e43e532e6e3d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43d5b742f61836c2ae3c45c492683e7aac60e72bc5084630714c6ea7c435fc0c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__406a2e6329695d469fdfc3da95ed26662a450f8145d6b49c0d67ff6d2688da0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__940cc493e28217131012d210a8c021ef4e6a693e6e0b63ded035ad5ebb363732)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfc6b8493e178c5217a14a07a610c2350e0ef0a7486c11975906f5d2b1d74d2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6759b2519c71438ab4b4f1b75ad6a1e3b676ba21b0c542c5b9cfa91018b0e077)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23dce80747cce59f1cf75213c08a8d45eda27b58689aeb6fc3e3f0809abcda7b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetKey")
    def reset_key(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKey", []))

    @jsii.member(jsii_name="resetOperator")
    def reset_operator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOperator", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="operatorInput")
    def operator_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "operatorInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5bf62ad01bce49883a5ce385470b552415ec284e7e1af5abe38ce50019c98710)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value)

    @builtins.property
    @jsii.member(jsii_name="operator")
    def operator(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "operator"))

    @operator.setter
    def operator(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3d6408fad9bcd336261b9eed8cdd887e58f900f48d29a94184b1ab88b8f11f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "operator", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "values"))

    @values.setter
    def values(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d07a8167b459a3bf4d8969297222d1f94fa1525948b3c48b2b3c7666d4fddf0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1556f6909265d4ae9521ab122aa1464a316be577ebb7c9f94cd9a2f5ee900f64)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecStrategyRollingSyncStepOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecStrategyRollingSyncStepOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc015ac97b3a54d7212b1c418e2da1f2da0821d432ff1d4e32e1ad4f01622bb3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putMatchExpressions")
    def put_match_expressions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f0d6b9f6901825515fa05d582bc1abcda5cb3952da23cfc6307613e6f95fe5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMatchExpressions", [value]))

    @jsii.member(jsii_name="resetMatchExpressions")
    def reset_match_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMatchExpressions", []))

    @jsii.member(jsii_name="resetMaxUpdate")
    def reset_max_update(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxUpdate", []))

    @builtins.property
    @jsii.member(jsii_name="matchExpressions")
    def match_expressions(
        self,
    ) -> ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsList:
        return typing.cast(ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsList, jsii.get(self, "matchExpressions"))

    @builtins.property
    @jsii.member(jsii_name="matchExpressionsInput")
    def match_expressions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]], jsii.get(self, "matchExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="maxUpdateInput")
    def max_update_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxUpdateInput"))

    @builtins.property
    @jsii.member(jsii_name="maxUpdate")
    def max_update(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxUpdate"))

    @max_update.setter
    def max_update(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e54c3cc07ee12e8fb8e560c452ab49c803307d8a97185e249f2cc1a3738118fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxUpdate", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStep]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStep]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStep]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e27a3202ac18b1c0eef7909f691c9e14d3d6b3906c90565518dbaacb251ddc77)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={"preserve_resources_on_deletion": "preserveResourcesOnDeletion"},
)
class ApplicationSetSpecSyncPolicy:
    def __init__(
        self,
        *,
        preserve_resources_on_deletion: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param preserve_resources_on_deletion: Label selector used to narrow the scope of targeted clusters. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#preserve_resources_on_deletion ApplicationSet#preserve_resources_on_deletion}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7211661c8a00c38acf5b739d464751edc5302a0f094c86a389968772653a787)
            check_type(argname="argument preserve_resources_on_deletion", value=preserve_resources_on_deletion, expected_type=type_hints["preserve_resources_on_deletion"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if preserve_resources_on_deletion is not None:
            self._values["preserve_resources_on_deletion"] = preserve_resources_on_deletion

    @builtins.property
    def preserve_resources_on_deletion(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Label selector used to narrow the scope of targeted clusters.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#preserve_resources_on_deletion ApplicationSet#preserve_resources_on_deletion}
        '''
        result = self._values.get("preserve_resources_on_deletion")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90b9a1961976695c04b65047de05017e818752c3fe8b5b842940ca76a8318b90)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPreserveResourcesOnDeletion")
    def reset_preserve_resources_on_deletion(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPreserveResourcesOnDeletion", []))

    @builtins.property
    @jsii.member(jsii_name="preserveResourcesOnDeletionInput")
    def preserve_resources_on_deletion_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "preserveResourcesOnDeletionInput"))

    @builtins.property
    @jsii.member(jsii_name="preserveResourcesOnDeletion")
    def preserve_resources_on_deletion(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "preserveResourcesOnDeletion"))

    @preserve_resources_on_deletion.setter
    def preserve_resources_on_deletion(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ffdb9702e8ac99e095f0ef696b1dbeae93b51f67f3aba979efe37f31442aaf3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "preserveResourcesOnDeletion", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb7dba7be83f2890c7e9d607c29bd497b7a19a71ab3051bf3167ab44606a24bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplate",
    jsii_struct_bases=[],
    name_mapping={"metadata": "metadata", "spec": "spec"},
)
class ApplicationSetSpecTemplate:
    def __init__(
        self,
        *,
        metadata: typing.Union["ApplicationSetSpecTemplateMetadata", typing.Dict[builtins.str, typing.Any]],
        spec: typing.Union["ApplicationSetSpecTemplateSpec", typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param metadata: metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        :param spec: spec block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        if isinstance(metadata, dict):
            metadata = ApplicationSetSpecTemplateMetadata(**metadata)
        if isinstance(spec, dict):
            spec = ApplicationSetSpecTemplateSpec(**spec)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46f8654ad45a23d790d0cffcc89bac341e809c457109309edc82c7fb02ca7f3a)
            check_type(argname="argument metadata", value=metadata, expected_type=type_hints["metadata"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "metadata": metadata,
            "spec": spec,
        }

    @builtins.property
    def metadata(self) -> "ApplicationSetSpecTemplateMetadata":
        '''metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#metadata ApplicationSet#metadata}
        '''
        result = self._values.get("metadata")
        assert result is not None, "Required property 'metadata' is missing"
        return typing.cast("ApplicationSetSpecTemplateMetadata", result)

    @builtins.property
    def spec(self) -> "ApplicationSetSpecTemplateSpec":
        '''spec block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#spec ApplicationSet#spec}
        '''
        result = self._values.get("spec")
        assert result is not None, "Required property 'spec' is missing"
        return typing.cast("ApplicationSetSpecTemplateSpec", result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateMetadata",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "annotations": "annotations",
        "finalizers": "finalizers",
        "labels": "labels",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecTemplateMetadata:
    def __init__(
        self,
        *,
        name: builtins.str,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cf51731b1b5080611f839025082e682d2bc8f484a5bd2608195c3c100913bcc)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument finalizers", value=finalizers, expected_type=type_hints["finalizers"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
        }
        if annotations is not None:
            self._values["annotations"] = annotations
        if finalizers is not None:
            self._values["finalizers"] = finalizers
        if labels is not None:
            self._values["labels"] = labels
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def finalizers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of finalizers to apply to the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        '''
        result = self._values.get("finalizers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Namespace of the resulting Application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2ddebe9be586a17405ea40ee7be4eb8700a2c37052dfbf67b0907720dc2abdb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetFinalizers")
    def reset_finalizers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFinalizers", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="finalizersInput")
    def finalizers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "finalizersInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29a2cf992f970b143118ae613f1c2adae8a42625c89de969cafa07d83da896f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="finalizers")
    def finalizers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "finalizers"))

    @finalizers.setter
    def finalizers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ce86f5093b26e81dc7c10f2515c47f688c55580ad70186d2deffac957cea8a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "finalizers", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e169976bfabf82b1bc58afd1147e6a739e61a1db2e63bbe3a521e722072bdb64)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__531e2ae2fec9ef5fe1790af5f5febea5b98c47dc7db43bdfc1013e4e79dd726b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c7ca3f2900b46c0fb29bcd45c1eda3ecfb8127cab19fe0d28fe0bf484f5d374)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa528ca48ec81640125fe4bde037a58dafc4dd135b0aec304ebb30256ee0fc8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9117af4bfaa6be8dab278cb8b37a3a80f417d1e559c2bc54d024a4bda698a94d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMetadata")
    def put_metadata(
        self,
        *,
        name: builtins.str,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param annotations: An unstructured key value map that may be used to store arbitrary metadata for the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param finalizers: List of finalizers to apply to the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#finalizers ApplicationSet#finalizers}
        :param labels: Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        :param namespace: Namespace of the resulting Application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        value = ApplicationSetSpecTemplateMetadata(
            name=name,
            annotations=annotations,
            finalizers=finalizers,
            labels=labels,
            namespace=namespace,
        )

        return typing.cast(None, jsii.invoke(self, "putMetadata", [value]))

    @jsii.member(jsii_name="putSpec")
    def put_spec(
        self,
        *,
        destination: typing.Union["ApplicationSetSpecTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]],
        source: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        value = ApplicationSetSpecTemplateSpec(
            destination=destination,
            source=source,
            ignore_difference=ignore_difference,
            info=info,
            project=project,
            revision_history_limit=revision_history_limit,
            sync_policy=sync_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putSpec", [value]))

    @builtins.property
    @jsii.member(jsii_name="metadata")
    def metadata(self) -> ApplicationSetSpecTemplateMetadataOutputReference:
        return typing.cast(ApplicationSetSpecTemplateMetadataOutputReference, jsii.get(self, "metadata"))

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> "ApplicationSetSpecTemplateSpecOutputReference":
        return typing.cast("ApplicationSetSpecTemplateSpecOutputReference", jsii.get(self, "spec"))

    @builtins.property
    @jsii.member(jsii_name="metadataInput")
    def metadata_input(self) -> typing.Optional[ApplicationSetSpecTemplateMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateMetadata], jsii.get(self, "metadataInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(self) -> typing.Optional["ApplicationSetSpecTemplateSpec"]:
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpec"], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecTemplate]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bd4e9421f4650943f6622005d981a98346355a53292c09253e542121354adc0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpec",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "source": "source",
        "ignore_difference": "ignoreDifference",
        "info": "info",
        "project": "project",
        "revision_history_limit": "revisionHistoryLimit",
        "sync_policy": "syncPolicy",
    },
)
class ApplicationSetSpecTemplateSpec:
    def __init__(
        self,
        *,
        destination: typing.Union["ApplicationSetSpecTemplateSpecDestination", typing.Dict[builtins.str, typing.Any]],
        source: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
        ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecIgnoreDifference", typing.Dict[builtins.str, typing.Any]]]]] = None,
        info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecInfo", typing.Dict[builtins.str, typing.Any]]]]] = None,
        project: typing.Optional[builtins.str] = None,
        revision_history_limit: typing.Optional[jsii.Number] = None,
        sync_policy: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicy", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        :param source: source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        :param ignore_difference: ignore_difference block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        :param info: info block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        :param project: The project the application belongs to. Defaults to ``default``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        :param revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        :param sync_policy: sync_policy block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        if isinstance(destination, dict):
            destination = ApplicationSetSpecTemplateSpecDestination(**destination)
        if isinstance(sync_policy, dict):
            sync_policy = ApplicationSetSpecTemplateSpecSyncPolicy(**sync_policy)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c6f3218c2e30fd7c8593100f717ae6f22210233f7d08f16abac917afc8dec58)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument ignore_difference", value=ignore_difference, expected_type=type_hints["ignore_difference"])
            check_type(argname="argument info", value=info, expected_type=type_hints["info"])
            check_type(argname="argument project", value=project, expected_type=type_hints["project"])
            check_type(argname="argument revision_history_limit", value=revision_history_limit, expected_type=type_hints["revision_history_limit"])
            check_type(argname="argument sync_policy", value=sync_policy, expected_type=type_hints["sync_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
            "source": source,
        }
        if ignore_difference is not None:
            self._values["ignore_difference"] = ignore_difference
        if info is not None:
            self._values["info"] = info
        if project is not None:
            self._values["project"] = project
        if revision_history_limit is not None:
            self._values["revision_history_limit"] = revision_history_limit
        if sync_policy is not None:
            self._values["sync_policy"] = sync_policy

    @builtins.property
    def destination(self) -> "ApplicationSetSpecTemplateSpecDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#destination ApplicationSet#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("ApplicationSetSpecTemplateSpecDestination", result)

    @builtins.property
    def source(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSource"]]:
        '''source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#source ApplicationSet#source}
        '''
        result = self._values.get("source")
        assert result is not None, "Required property 'source' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSource"]], result)

    @builtins.property
    def ignore_difference(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecIgnoreDifference"]]]:
        '''ignore_difference block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_difference ApplicationSet#ignore_difference}
        '''
        result = self._values.get("ignore_difference")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecIgnoreDifference"]]], result)

    @builtins.property
    def info(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecInfo"]]]:
        '''info block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#info ApplicationSet#info}
        '''
        result = self._values.get("info")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecInfo"]]], result)

    @builtins.property
    def project(self) -> typing.Optional[builtins.str]:
        '''The project the application belongs to. Defaults to ``default``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#project ApplicationSet#project}
        '''
        result = self._values.get("project")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def revision_history_limit(self) -> typing.Optional[jsii.Number]:
        '''Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.

        This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#revision_history_limit ApplicationSet#revision_history_limit}
        '''
        result = self._values.get("revision_history_limit")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def sync_policy(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicy"]:
        '''sync_policy block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_policy ApplicationSet#sync_policy}
        '''
        result = self._values.get("sync_policy")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicy"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpec(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecDestination",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "namespace": "namespace", "server": "server"},
)
class ApplicationSetSpecTemplateSpecDestination:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6c8b67b3262d220becb6407d650f61778a99a395bcf51bf53a0c47d3277b6d6)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
            check_type(argname="argument server", value=server, expected_type=type_hints["server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace
        if server is not None:
            self._values["server"] = server

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the target cluster. Can be used instead of ``server``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''Target namespace for the application's resources.

        The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def server(self) -> typing.Optional[builtins.str]:
        '''URL of the target cluster and must be set to the Kubernetes control plane API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        result = self._values.get("server")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3411d93882713d312005b17c39e5ed0d9cfe490bed52ba31d6a671df1d6e3303)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @jsii.member(jsii_name="resetServer")
    def reset_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServer", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="serverInput")
    def server_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06ea7be7c5bca55d8692067609a5b8e24004a6d8bfa294a235f232d96c5e215f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__473a5d8f39b49663676a7d00e11f15455ad4ad7498a492f1dbde06438488b509)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="server")
    def server(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "server"))

    @server.setter
    def server(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__164b943897ab37adf9ba055cbdec67bb9f510f8ded7b0ae98b152eafd2f73426)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "server", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6d48dd312bbacab761646e6285a734b46802ffea0a913e135cfe0653bd3a09e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecIgnoreDifference",
    jsii_struct_bases=[],
    name_mapping={
        "group": "group",
        "jq_path_expressions": "jqPathExpressions",
        "json_pointers": "jsonPointers",
        "kind": "kind",
        "name": "name",
        "namespace": "namespace",
    },
)
class ApplicationSetSpecTemplateSpecIgnoreDifference:
    def __init__(
        self,
        *,
        group: typing.Optional[builtins.str] = None,
        jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
        json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
        kind: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param group: The Kubernetes resource Group to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        :param jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        :param json_pointers: List of JSONPaths strings targeting the field(s) to ignore. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        :param kind: The Kubernetes resource Kind to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        :param name: The Kubernetes resource Name to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: The Kubernetes resource Namespace to match for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7e23ef270d1f8151ef64b52e9474e7684deecd0cf78aa4ad2d1dca511ba6fcb)
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument jq_path_expressions", value=jq_path_expressions, expected_type=type_hints["jq_path_expressions"])
            check_type(argname="argument json_pointers", value=json_pointers, expected_type=type_hints["json_pointers"])
            check_type(argname="argument kind", value=kind, expected_type=type_hints["kind"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument namespace", value=namespace, expected_type=type_hints["namespace"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if group is not None:
            self._values["group"] = group
        if jq_path_expressions is not None:
            self._values["jq_path_expressions"] = jq_path_expressions
        if json_pointers is not None:
            self._values["json_pointers"] = json_pointers
        if kind is not None:
            self._values["kind"] = kind
        if name is not None:
            self._values["name"] = name
        if namespace is not None:
            self._values["namespace"] = namespace

    @builtins.property
    def group(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Group to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#group ApplicationSet#group}
        '''
        result = self._values.get("group")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jq_path_expressions(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JQ path expression strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jq_path_expressions ApplicationSet#jq_path_expressions}
        '''
        result = self._values.get("jq_path_expressions")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def json_pointers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of JSONPaths strings targeting the field(s) to ignore.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#json_pointers ApplicationSet#json_pointers}
        '''
        result = self._values.get("json_pointers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def kind(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Kind to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kind ApplicationSet#kind}
        '''
        result = self._values.get("kind")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Name to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def namespace(self) -> typing.Optional[builtins.str]:
        '''The Kubernetes resource Namespace to match for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        '''
        result = self._values.get("namespace")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecIgnoreDifference(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecIgnoreDifferenceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecIgnoreDifferenceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cddf5e175a43de5ba808d3617860c5d3684d4a5f9bad0fd7458dfad030d76019)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecIgnoreDifferenceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a5982ee1706433e2bbaae014b386f47df86c587759724dac79a661248462a9f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecIgnoreDifferenceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49b0334bcecd413c1c8cfb1086baf73364f996c2529d3f611e5f57ebca0c67e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__785ff9ddaac85dac97d97bd42009bf1dfc981ff5edc4b456e0e19a19968ee989)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1acbb8c496fa3528f3ee7756c185d949fa30a44b167f47b3140c3802333af4bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba3de2d09a188df71aca31d4ce517fce237ecf817302c9f2b7475f8b252200f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecIgnoreDifferenceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecIgnoreDifferenceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a5952f6599f9fbac3b636c97f5e70cae72c062d0aeadeb628a98c5920bded58)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetJqPathExpressions")
    def reset_jq_path_expressions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJqPathExpressions", []))

    @jsii.member(jsii_name="resetJsonPointers")
    def reset_json_pointers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonPointers", []))

    @jsii.member(jsii_name="resetKind")
    def reset_kind(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKind", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNamespace")
    def reset_namespace(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamespace", []))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressionsInput")
    def jq_path_expressions_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jqPathExpressionsInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonPointersInput")
    def json_pointers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "jsonPointersInput"))

    @builtins.property
    @jsii.member(jsii_name="kindInput")
    def kind_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "kindInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="namespaceInput")
    def namespace_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namespaceInput"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "group"))

    @group.setter
    def group(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63e82eac0b916e68f23b4a3cec09711c9230c45583c341c23b641bfc21983a6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "group", value)

    @builtins.property
    @jsii.member(jsii_name="jqPathExpressions")
    def jq_path_expressions(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jqPathExpressions"))

    @jq_path_expressions.setter
    def jq_path_expressions(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b02da3a7880410c56f67e0b9044e3bf2034b2056f23243ecddb18a34b21f85f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jqPathExpressions", value)

    @builtins.property
    @jsii.member(jsii_name="jsonPointers")
    def json_pointers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "jsonPointers"))

    @json_pointers.setter
    def json_pointers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d835819ce6cab1e6f2deaf10bcdada3ff81f2c1eab881cb339cbb8d61215d31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonPointers", value)

    @builtins.property
    @jsii.member(jsii_name="kind")
    def kind(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "kind"))

    @kind.setter
    def kind(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77a924618fa624a037a09731bd4168a282720a33efc2a5d4d82f7803bc377c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kind", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3066a432f36f76215afe116644e1b9ee4e503892ab97e165a06b841e75f04ab6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="namespace")
    def namespace(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namespace"))

    @namespace.setter
    def namespace(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8204d3d90ff3cb9714c3ab34b482c712a4ac6a4f0734e43c7acbf1bf6a9c21a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namespace", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecIgnoreDifference]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecIgnoreDifference]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecIgnoreDifference]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17358c0110a196ac4d208fc7a3a744644d402a22cc11ce28f96d9a5b138932d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecInfo",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecTemplateSpecInfo:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the information. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72b1f2ec7bdca8ee6576193f0a01ca9a39c7c26cbc6c0ed882fa816eaf64eac3)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the information.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecInfo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecInfoList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecInfoList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59cc4a7dc39eee8ab6704079692077bfaa7e6e6282873f3b002263db064e74f1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecInfoOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__914c4ec7bbc2a65f40f3454c3e0bb7495cf9c0a03b77a5db0d0e6e4f7360ad37)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecInfoOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffbac087d1d5e08d97c110c43553240c2488a3ea802a0d70bf9733ebf72adb2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb62261f0d76513dbced3c38ceab8255934d7aa2d50a808986671ed03d32dcc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93a09462f0dd146109af68703be8f6eb4917fdd4cd79f485cdf304324894f176)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02eb9d53931e41325f83072d473a778a025c10f760504600ce20df55be8b0631)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecInfoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecInfoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5238b3d2d84c50add2a4fb0757c55f4fb7f325cd959144824bfeab84ec4a8dfb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33ce30e91ebf67c966151f96d4b188e1ca4ea3e14bb670b867a21e62b0606680)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12b959a4893e2ed4b5bc2ae529fab9a74c2fc02ce11d790cbbe4a4a261eda14c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecInfo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecInfo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecInfo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__055e5e7c4adc8a59b255ce3d0aff1f410a83d376308657fa8bba45dbef5bb94f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9e684598855e446dadf4fca08e96ef7812661f7b0fdc658e1cdc453d2cf08bb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        namespace: typing.Optional[builtins.str] = None,
        server: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the target cluster. Can be used instead of ``server``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#namespace ApplicationSet#namespace}
        :param server: URL of the target cluster and must be set to the Kubernetes control plane API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#server ApplicationSet#server}
        '''
        value = ApplicationSetSpecTemplateSpecDestination(
            name=name, namespace=namespace, server=server
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putIgnoreDifference")
    def put_ignore_difference(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b4095d3d489cea8efa2adf892379e4ab6346abcc9368349371d0b81781bbb52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putIgnoreDifference", [value]))

    @jsii.member(jsii_name="putInfo")
    def put_info(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__672fc7f78b97c32f1f6d00dd71cf839b81bef133c73f22e4bcf00a09a8bc6fc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInfo", [value]))

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fc89370934f4a135ac11821a4ffa5779fb99800a6b3b884789d5b3e50598012)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="putSyncPolicy")
    def put_sync_policy(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        value = ApplicationSetSpecTemplateSpecSyncPolicy(
            automated=automated,
            managed_namespace_metadata=managed_namespace_metadata,
            retry=retry,
            sync_options=sync_options,
        )

        return typing.cast(None, jsii.invoke(self, "putSyncPolicy", [value]))

    @jsii.member(jsii_name="resetIgnoreDifference")
    def reset_ignore_difference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreDifference", []))

    @jsii.member(jsii_name="resetInfo")
    def reset_info(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInfo", []))

    @jsii.member(jsii_name="resetProject")
    def reset_project(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProject", []))

    @jsii.member(jsii_name="resetRevisionHistoryLimit")
    def reset_revision_history_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRevisionHistoryLimit", []))

    @jsii.member(jsii_name="resetSyncPolicy")
    def reset_sync_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(self) -> ApplicationSetSpecTemplateSpecDestinationOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifference")
    def ignore_difference(self) -> ApplicationSetSpecTemplateSpecIgnoreDifferenceList:
        return typing.cast(ApplicationSetSpecTemplateSpecIgnoreDifferenceList, jsii.get(self, "ignoreDifference"))

    @builtins.property
    @jsii.member(jsii_name="info")
    def info(self) -> ApplicationSetSpecTemplateSpecInfoList:
        return typing.cast(ApplicationSetSpecTemplateSpecInfoList, jsii.get(self, "info"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> "ApplicationSetSpecTemplateSpecSourceList":
        return typing.cast("ApplicationSetSpecTemplateSpecSourceList", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicy")
    def sync_policy(self) -> "ApplicationSetSpecTemplateSpecSyncPolicyOutputReference":
        return typing.cast("ApplicationSetSpecTemplateSpecSyncPolicyOutputReference", jsii.get(self, "syncPolicy"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecDestination]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreDifferenceInput")
    def ignore_difference_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]], jsii.get(self, "ignoreDifferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="infoInput")
    def info_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]], jsii.get(self, "infoInput"))

    @builtins.property
    @jsii.member(jsii_name="projectInput")
    def project_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "projectInput"))

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimitInput")
    def revision_history_limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "revisionHistoryLimitInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSource"]]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncPolicyInput")
    def sync_policy_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicy"]:
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicy"], jsii.get(self, "syncPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="project")
    def project(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "project"))

    @project.setter
    def project(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00a402ba0022038ff44053c0125ca58cf478c7861dc5305777d089232c0dcee4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "project", value)

    @builtins.property
    @jsii.member(jsii_name="revisionHistoryLimit")
    def revision_history_limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "revisionHistoryLimit"))

    @revision_history_limit.setter
    def revision_history_limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3052a802025142d5fa277c2c7252e903763ee60d02a96c4b13c9948387c60e9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "revisionHistoryLimit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[ApplicationSetSpecTemplateSpec]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpec], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpec],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__850e691d0d99fa4403b9684b4856a577e61c0a571f598f70c660e64dc9a49667)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSource",
    jsii_struct_bases=[],
    name_mapping={
        "repo_url": "repoUrl",
        "chart": "chart",
        "directory": "directory",
        "helm": "helm",
        "kustomize": "kustomize",
        "path": "path",
        "plugin": "plugin",
        "ref": "ref",
        "target_revision": "targetRevision",
    },
)
class ApplicationSetSpecTemplateSpecSource:
    def __init__(
        self,
        *,
        repo_url: builtins.str,
        chart: typing.Optional[builtins.str] = None,
        directory: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSourceDirectory", typing.Dict[builtins.str, typing.Any]]] = None,
        helm: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSourceHelm", typing.Dict[builtins.str, typing.Any]]] = None,
        kustomize: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSourceKustomize", typing.Dict[builtins.str, typing.Any]]] = None,
        path: typing.Optional[builtins.str] = None,
        plugin: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSourcePlugin", typing.Dict[builtins.str, typing.Any]]] = None,
        ref: typing.Optional[builtins.str] = None,
        target_revision: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param repo_url: URL to the repository (Git or Helm) that contains the application manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        :param chart: Helm chart name. Must be specified for applications sourced from a Helm repo. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        :param directory: directory block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        :param helm: helm block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        :param kustomize: kustomize block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        :param path: Directory path within the repository. Only valid for applications sourced from Git. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        :param plugin: plugin block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        :param ref: Reference to another ``source`` within defined sources. See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        :param target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        if isinstance(directory, dict):
            directory = ApplicationSetSpecTemplateSpecSourceDirectory(**directory)
        if isinstance(helm, dict):
            helm = ApplicationSetSpecTemplateSpecSourceHelm(**helm)
        if isinstance(kustomize, dict):
            kustomize = ApplicationSetSpecTemplateSpecSourceKustomize(**kustomize)
        if isinstance(plugin, dict):
            plugin = ApplicationSetSpecTemplateSpecSourcePlugin(**plugin)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c045b18f3a114e9617efdc48a4522c737aa481b3a931cac59c1a5b5ed6a37322)
            check_type(argname="argument repo_url", value=repo_url, expected_type=type_hints["repo_url"])
            check_type(argname="argument chart", value=chart, expected_type=type_hints["chart"])
            check_type(argname="argument directory", value=directory, expected_type=type_hints["directory"])
            check_type(argname="argument helm", value=helm, expected_type=type_hints["helm"])
            check_type(argname="argument kustomize", value=kustomize, expected_type=type_hints["kustomize"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
            check_type(argname="argument plugin", value=plugin, expected_type=type_hints["plugin"])
            check_type(argname="argument ref", value=ref, expected_type=type_hints["ref"])
            check_type(argname="argument target_revision", value=target_revision, expected_type=type_hints["target_revision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "repo_url": repo_url,
        }
        if chart is not None:
            self._values["chart"] = chart
        if directory is not None:
            self._values["directory"] = directory
        if helm is not None:
            self._values["helm"] = helm
        if kustomize is not None:
            self._values["kustomize"] = kustomize
        if path is not None:
            self._values["path"] = path
        if plugin is not None:
            self._values["plugin"] = plugin
        if ref is not None:
            self._values["ref"] = ref
        if target_revision is not None:
            self._values["target_revision"] = target_revision

    @builtins.property
    def repo_url(self) -> builtins.str:
        '''URL to the repository (Git or Helm) that contains the application manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#repo_url ApplicationSet#repo_url}
        '''
        result = self._values.get("repo_url")
        assert result is not None, "Required property 'repo_url' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def chart(self) -> typing.Optional[builtins.str]:
        '''Helm chart name. Must be specified for applications sourced from a Helm repo.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#chart ApplicationSet#chart}
        '''
        result = self._values.get("chart")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSourceDirectory"]:
        '''directory block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#directory ApplicationSet#directory}
        '''
        result = self._values.get("directory")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourceDirectory"], result)

    @builtins.property
    def helm(self) -> typing.Optional["ApplicationSetSpecTemplateSpecSourceHelm"]:
        '''helm block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#helm ApplicationSet#helm}
        '''
        result = self._values.get("helm")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourceHelm"], result)

    @builtins.property
    def kustomize(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSourceKustomize"]:
        '''kustomize block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#kustomize ApplicationSet#kustomize}
        '''
        result = self._values.get("kustomize")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourceKustomize"], result)

    @builtins.property
    def path(self) -> typing.Optional[builtins.str]:
        '''Directory path within the repository. Only valid for applications sourced from Git.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def plugin(self) -> typing.Optional["ApplicationSetSpecTemplateSpecSourcePlugin"]:
        '''plugin block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#plugin ApplicationSet#plugin}
        '''
        result = self._values.get("plugin")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourcePlugin"], result)

    @builtins.property
    def ref(self) -> typing.Optional[builtins.str]:
        '''Reference to another ``source`` within defined sources.

        See associated documentation on `Helm value files from external Git repository <https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository>`_ regarding combining ``ref`` with ``path`` and/or ``chart``.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ref ApplicationSet#ref}
        '''
        result = self._values.get("ref")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_revision(self) -> typing.Optional[builtins.str]:
        '''Revision of the source to sync the application to.

        In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#target_revision ApplicationSet#target_revision}
        '''
        result = self._values.get("target_revision")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectory",
    jsii_struct_bases=[],
    name_mapping={
        "exclude": "exclude",
        "include": "include",
        "jsonnet": "jsonnet",
        "recurse": "recurse",
    },
)
class ApplicationSetSpecTemplateSpecSourceDirectory:
    def __init__(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet", typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        if isinstance(jsonnet, dict):
            jsonnet = ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet(**jsonnet)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__306b07f66c7fd790d9bfdfdf51df81c0fd36f2284105b59810b00587a366a59a)
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument jsonnet", value=jsonnet, expected_type=type_hints["jsonnet"])
            check_type(argname="argument recurse", value=recurse, expected_type=type_hints["recurse"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if exclude is not None:
            self._values["exclude"] = exclude
        if include is not None:
            self._values["include"] = include
        if jsonnet is not None:
            self._values["jsonnet"] = jsonnet
        if recurse is not None:
            self._values["recurse"] = recurse

    @builtins.property
    def exclude(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.

        This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(self) -> typing.Optional[builtins.str]:
        '''Glob pattern to match paths against that should be explicitly included during manifest generation.

        If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def jsonnet(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet"]:
        '''jsonnet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        '''
        result = self._values.get("jsonnet")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet"], result)

    @builtins.property
    def recurse(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to scan a directory recursively for manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        result = self._values.get("recurse")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceDirectory(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet",
    jsii_struct_bases=[],
    name_mapping={"ext_var": "extVar", "libs": "libs", "tla": "tla"},
)
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet:
    def __init__(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ceea3e0e9fae94a4ce90760003df37b362d47e4951528e705d2931d7011a3fcf)
            check_type(argname="argument ext_var", value=ext_var, expected_type=type_hints["ext_var"])
            check_type(argname="argument libs", value=libs, expected_type=type_hints["libs"])
            check_type(argname="argument tla", value=tla, expected_type=type_hints["tla"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ext_var is not None:
            self._values["ext_var"] = ext_var
        if libs is not None:
            self._values["libs"] = libs
        if tla is not None:
            self._values["tla"] = tla

    @builtins.property
    def ext_var(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar"]]]:
        '''ext_var block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        '''
        result = self._values.get("ext_var")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar"]]], result)

    @builtins.property
    def libs(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Additional library search dirs.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        '''
        result = self._values.get("libs")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def tla(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla"]]]:
        '''tla block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        result = self._values.get("tla")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8a10f5342964342c1fdfcd62703da75e25c524eeba2850e231e309d4f1d4248)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a43439efddc742e83e249a511e135e54b291255681b3d2d4873af9aa823e0b1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10d74c86234a02431836eee20554202a97abfeae85de15e1592ad588f881dcec)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__deaf418d1ba1188081b230e3bd316b7374f11d21499b9620853aaa38f99fa11b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab32e12d60b2e87cffbf3a1ac6526939ecb26bf9a0506a41889261334651830c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c29f4bc3f6edced319d9aa689cf1745c6c6a635ba393246eb55d4c599c1f1569)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e2311768dbe0ea9e11ea4799d9ec90e5822116b0e1101cbc7a0ead0575343d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1086d5157e92d3f7af735f4e6bae3806369f4120fcb4f0afc8e3d16f6949a82)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ac404625f0e6d1f216b226081fe99ea6e4dd15337a052cc46e9a41ec7fed027)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__885f4885b4e8e80e8be58ca922b9e36cafdbc37889c257b6533101adcfc56fef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f686e3f201608019e5d7583e2658acb87ce97e87244d6bbb7093efb4b84bd3da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89e31e7ce5fef7687af3383884988c024177bcf6a02696c0781dc121b2935e2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ae7c79e6beffe65aa37095c9aa489b843558402000521e481ee02f9970b8ade)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putExtVar")
    def put_ext_var(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23da8bb8187288979fbbc7bf75029e641d052011da97186eb563d60130d829a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExtVar", [value]))

    @jsii.member(jsii_name="putTla")
    def put_tla(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa53feec4cfdc5110b1868dc46140483a857fc1e6a0cbff337e6f00db56e0dd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTla", [value]))

    @jsii.member(jsii_name="resetExtVar")
    def reset_ext_var(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtVar", []))

    @jsii.member(jsii_name="resetLibs")
    def reset_libs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLibs", []))

    @jsii.member(jsii_name="resetTla")
    def reset_tla(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTla", []))

    @builtins.property
    @jsii.member(jsii_name="extVar")
    def ext_var(self) -> ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarList:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarList, jsii.get(self, "extVar"))

    @builtins.property
    @jsii.member(jsii_name="tla")
    def tla(self) -> "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaList":
        return typing.cast("ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaList", jsii.get(self, "tla"))

    @builtins.property
    @jsii.member(jsii_name="extVarInput")
    def ext_var_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]], jsii.get(self, "extVarInput"))

    @builtins.property
    @jsii.member(jsii_name="libsInput")
    def libs_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "libsInput"))

    @builtins.property
    @jsii.member(jsii_name="tlaInput")
    def tla_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla"]]], jsii.get(self, "tlaInput"))

    @builtins.property
    @jsii.member(jsii_name="libs")
    def libs(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "libs"))

    @libs.setter
    def libs(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc0c175917f03cfec5ad858cca9976312ccc0f5e6c5d4be470efc2a98bcdbdfa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "libs", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcf0c98fcf771fa54def11361b3ffd8e64af8eb981c1323cccd8a5aa657047d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla",
    jsii_struct_bases=[],
    name_mapping={"code": "code", "name": "name", "value": "value"},
)
class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla:
    def __init__(
        self,
        *,
        code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param code: Determines whether the variable should be evaluated as jsonnet code or treated as string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        :param name: Name of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of Jsonnet variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b8a9dafb62e22427c94bb538577d7d19138cb14056d2a0f2ec5f2d835d8951d)
            check_type(argname="argument code", value=code, expected_type=type_hints["code"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if code is not None:
            self._values["code"] = code
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def code(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether the variable should be evaluated as jsonnet code or treated as string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#code ApplicationSet#code}
        '''
        result = self._values.get("code")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of Jsonnet variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f818994e8c0d13c014a59b3e5596b43943394ce67a25c1638ed8825a0676b7b3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abcc562ad240adf671c9e4b83dee0b4bef78e5c745f7acab61e73e3b346ddfee)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a06aa6eaa9dfd56f27f8be761f85b606b3912ca07b4d0ea7837547f619384127)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1db544731811d1601e4ee4a3a2883f4cdfa671033c0e32f62e9794752e9e7b06)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21cc300d8063b0013393f317049e141f6437b3c18cec9956827ccf624a7b7129)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ede63c90ee65fbd7fa418051ec5cbb34accc3ece3d28d84a35d2607a2807dfa1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8467736c16d7e8054f6d9f090912060ac643e63d3fd43d63c06329be6b22fb4b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCode")
    def reset_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCode", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="codeInput")
    def code_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "codeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="code")
    def code(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "code"))

    @code.setter
    def code(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__414dc84a9d6dc00ac536f11a27ddea25d58842d4656c1c12f666591dbd7bec75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "code", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3ca0e38ab9a0fd553763d7b7cd6aa2c7f70f0b1b45fb6f176a23d6f02536efc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af19dc25e605c6effd73b6e8ae280747eaded6468f73cf890e14d71638a470fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ba8a52d4bd0e70964c914013f9ebf02e56867039bd6d2bc856cef56bfe11b50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceDirectoryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceDirectoryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f7c000e6374212b6fb2ef7458b672486d33d45b2598c9976068167a893fdb0d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putJsonnet")
    def put_jsonnet(
        self,
        *,
        ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
        libs: typing.Optional[typing.Sequence[builtins.str]] = None,
        tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param ext_var: ext_var block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ext_var ApplicationSet#ext_var}
        :param libs: Additional library search dirs. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#libs ApplicationSet#libs}
        :param tla: tla block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#tla ApplicationSet#tla}
        '''
        value = ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet(
            ext_var=ext_var, libs=libs, tla=tla
        )

        return typing.cast(None, jsii.invoke(self, "putJsonnet", [value]))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetJsonnet")
    def reset_jsonnet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetJsonnet", []))

    @jsii.member(jsii_name="resetRecurse")
    def reset_recurse(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRecurse", []))

    @builtins.property
    @jsii.member(jsii_name="jsonnet")
    def jsonnet(
        self,
    ) -> ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetOutputReference, jsii.get(self, "jsonnet"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="jsonnetInput")
    def jsonnet_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet], jsii.get(self, "jsonnetInput"))

    @builtins.property
    @jsii.member(jsii_name="recurseInput")
    def recurse_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "recurseInput"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "exclude"))

    @exclude.setter
    def exclude(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b9322e6b388ea22e53c874fde16343597fd74db1b9d2fe13c2666a6b7c06212)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "exclude", value)

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "include"))

    @include.setter
    def include(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca23d705a02f7ed61e6bff1987c6109734ce25b607350ebadc35201a46575665)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "include", value)

    @builtins.property
    @jsii.member(jsii_name="recurse")
    def recurse(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "recurse"))

    @recurse.setter
    def recurse(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f320ab76be149b67660bb52bd2ff61df056c82c8d756bf5154a13b9da1b98ad9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recurse", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d11ff54ce661a5680092fca3f0d21f5d59e699c885f5521220873ddaf8846159)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelm",
    jsii_struct_bases=[],
    name_mapping={
        "file_parameter": "fileParameter",
        "ignore_missing_value_files": "ignoreMissingValueFiles",
        "parameter": "parameter",
        "pass_credentials": "passCredentials",
        "release_name": "releaseName",
        "skip_crds": "skipCrds",
        "value_files": "valueFiles",
        "values": "values",
    },
)
class ApplicationSetSpecTemplateSpecSourceHelm:
    def __init__(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceHelmFileParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8154061ac244f9e12ad6f0b3713f815a0e90847b41f357d2c7e63beacf598aa)
            check_type(argname="argument file_parameter", value=file_parameter, expected_type=type_hints["file_parameter"])
            check_type(argname="argument ignore_missing_value_files", value=ignore_missing_value_files, expected_type=type_hints["ignore_missing_value_files"])
            check_type(argname="argument parameter", value=parameter, expected_type=type_hints["parameter"])
            check_type(argname="argument pass_credentials", value=pass_credentials, expected_type=type_hints["pass_credentials"])
            check_type(argname="argument release_name", value=release_name, expected_type=type_hints["release_name"])
            check_type(argname="argument skip_crds", value=skip_crds, expected_type=type_hints["skip_crds"])
            check_type(argname="argument value_files", value=value_files, expected_type=type_hints["value_files"])
            check_type(argname="argument values", value=values, expected_type=type_hints["values"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if file_parameter is not None:
            self._values["file_parameter"] = file_parameter
        if ignore_missing_value_files is not None:
            self._values["ignore_missing_value_files"] = ignore_missing_value_files
        if parameter is not None:
            self._values["parameter"] = parameter
        if pass_credentials is not None:
            self._values["pass_credentials"] = pass_credentials
        if release_name is not None:
            self._values["release_name"] = release_name
        if skip_crds is not None:
            self._values["skip_crds"] = skip_crds
        if value_files is not None:
            self._values["value_files"] = value_files
        if values is not None:
            self._values["values"] = values

    @builtins.property
    def file_parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmFileParameter"]]]:
        '''file_parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        '''
        result = self._values.get("file_parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmFileParameter"]]], result)

    @builtins.property
    def ignore_missing_value_files(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        '''
        result = self._values.get("ignore_missing_value_files")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def parameter(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmParameter"]]]:
        '''parameter block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        '''
        result = self._values.get("parameter")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmParameter"]]], result)

    @builtins.property
    def pass_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        '''
        result = self._values.get("pass_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def release_name(self) -> typing.Optional[builtins.str]:
        '''Helm release name. If omitted it will use the application name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        '''
        result = self._values.get("release_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_crds(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        '''
        result = self._values.get("skip_crds")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def value_files(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Helm value files to use when generating a template.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        '''
        result = self._values.get("value_files")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def values(self) -> typing.Optional[builtins.str]:
        '''Helm values to be passed to 'helm template', typically defined as a block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        result = self._values.get("values")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceHelm(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmFileParameter",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "path": "path"},
)
class ApplicationSetSpecTemplateSpecSourceHelmFileParameter:
    def __init__(self, *, name: builtins.str, path: builtins.str) -> None:
        '''
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param path: Path to the file containing the values for the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db8c1fcb3e32e7e09fef57ab3cfb9c14df79ff4c14da435a359477d21cada966)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument path", value=path, expected_type=type_hints["path"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "path": path,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def path(self) -> builtins.str:
        '''Path to the file containing the values for the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#path ApplicationSet#path}
        '''
        result = self._values.get("path")
        assert result is not None, "Required property 'path' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceHelmFileParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourceHelmFileParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmFileParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18394124e0171b5e5d9208370b29cb4c36e411bf3cbbe917e6a0f83a7f1433d4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourceHelmFileParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6646d6ae6957f2ba466e5685eaf25a214a1b68723528316eff06b0ee6dd7a72)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourceHelmFileParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a4450c8f36d73bcf83b34e64d46b2285b509d673e92fe8368b70ac1ce14d605)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff263d1b5a4683445e490fd9b609dae1868ac5050f264c3b3aaac9ea791a4b52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1c181d13935716dfcd53e3fda7aa2bb3c55c625738f3944d9346f0618eba7c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8058ff53b1e83ce20a707fa1b5b1271b54dc0045692da90b60b968dea0afba2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceHelmFileParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmFileParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0df4df6b5e666d9ef4777a1b97ebc6d0c107cba420ee368e9c12c4ce192761b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe6deed152fb0367a85dff9c0485d663125885f825b96407620e6c7bad7b969d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7223e0c5f6085c7d4cac94f3d7a2f3049acaa9d4e7ecb1e1ad2b948c6079954)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmFileParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmFileParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b1dce51699af5431736d4cfc153ea0459b6cdec60f87fc50f0aba9b47a4cd6c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceHelmOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a26a4091ac69f235e417f7ee409264ed2dc733ec6cbc06df77b018783a7e75ce)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFileParameter")
    def put_file_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7e7ccf73ddd162da5cb8ecf0d553845c54f5ab79786275128ba1516de478d78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFileParameter", [value]))

    @jsii.member(jsii_name="putParameter")
    def put_parameter(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourceHelmParameter", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cd9f1eff796cbbea78d4e83720046cf284499a95c67702a5de5edcfb379f854)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putParameter", [value]))

    @jsii.member(jsii_name="resetFileParameter")
    def reset_file_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFileParameter", []))

    @jsii.member(jsii_name="resetIgnoreMissingValueFiles")
    def reset_ignore_missing_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreMissingValueFiles", []))

    @jsii.member(jsii_name="resetParameter")
    def reset_parameter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParameter", []))

    @jsii.member(jsii_name="resetPassCredentials")
    def reset_pass_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassCredentials", []))

    @jsii.member(jsii_name="resetReleaseName")
    def reset_release_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReleaseName", []))

    @jsii.member(jsii_name="resetSkipCrds")
    def reset_skip_crds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipCrds", []))

    @jsii.member(jsii_name="resetValueFiles")
    def reset_value_files(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValueFiles", []))

    @jsii.member(jsii_name="resetValues")
    def reset_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValues", []))

    @builtins.property
    @jsii.member(jsii_name="fileParameter")
    def file_parameter(
        self,
    ) -> ApplicationSetSpecTemplateSpecSourceHelmFileParameterList:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceHelmFileParameterList, jsii.get(self, "fileParameter"))

    @builtins.property
    @jsii.member(jsii_name="parameter")
    def parameter(self) -> "ApplicationSetSpecTemplateSpecSourceHelmParameterList":
        return typing.cast("ApplicationSetSpecTemplateSpecSourceHelmParameterList", jsii.get(self, "parameter"))

    @builtins.property
    @jsii.member(jsii_name="fileParameterInput")
    def file_parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]], jsii.get(self, "fileParameterInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFilesInput")
    def ignore_missing_value_files_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreMissingValueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="parameterInput")
    def parameter_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmParameter"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourceHelmParameter"]]], jsii.get(self, "parameterInput"))

    @builtins.property
    @jsii.member(jsii_name="passCredentialsInput")
    def pass_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "passCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseNameInput")
    def release_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "releaseNameInput"))

    @builtins.property
    @jsii.member(jsii_name="skipCrdsInput")
    def skip_crds_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipCrdsInput"))

    @builtins.property
    @jsii.member(jsii_name="valueFilesInput")
    def value_files_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "valueFilesInput"))

    @builtins.property
    @jsii.member(jsii_name="valuesInput")
    def values_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valuesInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreMissingValueFiles")
    def ignore_missing_value_files(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreMissingValueFiles"))

    @ignore_missing_value_files.setter
    def ignore_missing_value_files(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__407b54c592451c100dd19abf461218c3c4f8717f62441e3c9a7754bb80d7057f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreMissingValueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="passCredentials")
    def pass_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "passCredentials"))

    @pass_credentials.setter
    def pass_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__538eb49cb525c48e67d96369e9ffbe1276544096e55fbfcc791904972064032d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passCredentials", value)

    @builtins.property
    @jsii.member(jsii_name="releaseName")
    def release_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "releaseName"))

    @release_name.setter
    def release_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5286da795458c59844417ee3b6f8c7f40ff952542cc5cb86dc80ef427486249)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "releaseName", value)

    @builtins.property
    @jsii.member(jsii_name="skipCrds")
    def skip_crds(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipCrds"))

    @skip_crds.setter
    def skip_crds(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9962c85c99c35ab709df230ab9f43a07bdeb5d4291b46a70d23893597507e89e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipCrds", value)

    @builtins.property
    @jsii.member(jsii_name="valueFiles")
    def value_files(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "valueFiles"))

    @value_files.setter
    def value_files(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59ffca03f3b281edf7321b0a4a1fac7769796140d0ef0a12d6487ab171bfc561)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "valueFiles", value)

    @builtins.property
    @jsii.member(jsii_name="values")
    def values(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "values"))

    @values.setter
    def values(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49b56f28150bd614cbfad677bf9e86ce4a95434674ac73395d48a40e9b6693bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "values", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdce71c6e6199e57150a934fc87b6b65a9b208d4ac4460d216dfd4f905910c23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmParameter",
    jsii_struct_bases=[],
    name_mapping={"force_string": "forceString", "name": "name", "value": "value"},
)
class ApplicationSetSpecTemplateSpecSourceHelmParameter:
    def __init__(
        self,
        *,
        force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param force_string: Determines whether to tell Helm to interpret booleans and numbers as strings. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        :param name: Name of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the Helm parameter. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72f84cab7146ee6d2e9c65907f402a9f018261d6fc29be1d57dfd6b52e2e2ca0)
            check_type(argname="argument force_string", value=force_string, expected_type=type_hints["force_string"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if force_string is not None:
            self._values["force_string"] = force_string
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def force_string(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines whether to tell Helm to interpret booleans and numbers as strings.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#force_string ApplicationSet#force_string}
        '''
        result = self._values.get("force_string")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the Helm parameter.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceHelmParameter(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourceHelmParameterList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmParameterList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd4c906fd837496617fd630b3cd1e44800039099f2ac7c79eb0c5a617270cff0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourceHelmParameterOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95fe23c64c6d53bba261a5f5143782c826579611aaf0784da5b2105a0c4d960c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourceHelmParameterOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4d47639c794724ef3a08e96760bd8a8f315a03767548dfd9143d7ba1a4b5e9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c91276b18aa36d63956d28a74ed23f63eeae5b77b6a582e1e4b63fc780cafc88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62977ac59ac5ba0da6ea5697de48f11c1451ae9b042494dbafdf35a7c15e3748)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmParameter]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmParameter]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmParameter]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a516e6cfa45e0298188da6f8f2ccf2fa65e2d02ec0f0f633e0901789b9ddc45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceHelmParameterOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceHelmParameterOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77f1e97fce6d6a43a844cd191f0f54184152c3eeae658b61a2b5900396698617)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetForceString")
    def reset_force_string(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceString", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="forceStringInput")
    def force_string_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "forceStringInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="forceString")
    def force_string(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "forceString"))

    @force_string.setter
    def force_string(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c04d17098e0a0db9cfc161fb7fe1f8a09bc749c27c845037677df936efee5b9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceString", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9903e3d151fc9f14d6739031ca5bd0568811628bdda390dde588b59b1125326e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d74e3c38aee6292a01abfd1642ce7597891aaf7ac48433c6239f94c61caf49c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmParameter]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmParameter]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmParameter]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f17c583ed321ab2e4b6db54424b9ad962e55a1f3cc5390d0faa0cd191dac61fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceKustomize",
    jsii_struct_bases=[],
    name_mapping={
        "common_annotations": "commonAnnotations",
        "common_labels": "commonLabels",
        "images": "images",
        "name_prefix": "namePrefix",
        "name_suffix": "nameSuffix",
        "version": "version",
    },
)
class ApplicationSetSpecTemplateSpecSourceKustomize:
    def __init__(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37a2d9eff792016908eadf0813db37e337b24f91939db8cb0dedea9fa2d131c8)
            check_type(argname="argument common_annotations", value=common_annotations, expected_type=type_hints["common_annotations"])
            check_type(argname="argument common_labels", value=common_labels, expected_type=type_hints["common_labels"])
            check_type(argname="argument images", value=images, expected_type=type_hints["images"])
            check_type(argname="argument name_prefix", value=name_prefix, expected_type=type_hints["name_prefix"])
            check_type(argname="argument name_suffix", value=name_suffix, expected_type=type_hints["name_suffix"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if common_annotations is not None:
            self._values["common_annotations"] = common_annotations
        if common_labels is not None:
            self._values["common_labels"] = common_labels
        if images is not None:
            self._values["images"] = images
        if name_prefix is not None:
            self._values["name_prefix"] = name_prefix
        if name_suffix is not None:
            self._values["name_suffix"] = name_suffix
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def common_annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional annotations to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        '''
        result = self._values.get("common_annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def common_labels(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''List of additional labels to add to rendered manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        '''
        result = self._values.get("common_labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def images(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of Kustomize image override specifications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        '''
        result = self._values.get("images")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def name_prefix(self) -> typing.Optional[builtins.str]:
        '''Prefix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        '''
        result = self._values.get("name_prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_suffix(self) -> typing.Optional[builtins.str]:
        '''Suffix appended to resources for Kustomize apps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        '''
        result = self._values.get("name_suffix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def version(self) -> typing.Optional[builtins.str]:
        '''Version of Kustomize to use for rendering manifests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourceKustomize(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourceKustomizeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceKustomizeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d92732905eff41104ec4cdcb0c5aecf321957851024bb379fddeed7cdb0ce919)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCommonAnnotations")
    def reset_common_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonAnnotations", []))

    @jsii.member(jsii_name="resetCommonLabels")
    def reset_common_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonLabels", []))

    @jsii.member(jsii_name="resetImages")
    def reset_images(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImages", []))

    @jsii.member(jsii_name="resetNamePrefix")
    def reset_name_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNamePrefix", []))

    @jsii.member(jsii_name="resetNameSuffix")
    def reset_name_suffix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameSuffix", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotationsInput")
    def common_annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonAnnotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="commonLabelsInput")
    def common_labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "commonLabelsInput"))

    @builtins.property
    @jsii.member(jsii_name="imagesInput")
    def images_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "imagesInput"))

    @builtins.property
    @jsii.member(jsii_name="namePrefixInput")
    def name_prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "namePrefixInput"))

    @builtins.property
    @jsii.member(jsii_name="nameSuffixInput")
    def name_suffix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameSuffixInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="commonAnnotations")
    def common_annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonAnnotations"))

    @common_annotations.setter
    def common_annotations(
        self,
        value: typing.Mapping[builtins.str, builtins.str],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a195f48ae47d64721e157f3dfdc051553760528d7d50541f9585d25358a6e0da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonAnnotations", value)

    @builtins.property
    @jsii.member(jsii_name="commonLabels")
    def common_labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "commonLabels"))

    @common_labels.setter
    def common_labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b458cc6182317780dcd1105a25511f15477f457e272187aff03086f06acd60de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonLabels", value)

    @builtins.property
    @jsii.member(jsii_name="images")
    def images(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "images"))

    @images.setter
    def images(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd2a86930f5a147625c3a099fc15e6dabfefd5e7b8a26dcf9e3f4fa9a73ea538)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "images", value)

    @builtins.property
    @jsii.member(jsii_name="namePrefix")
    def name_prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "namePrefix"))

    @name_prefix.setter
    def name_prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9cc8c6eeaaa041ca6be1d49cd63ee07657afb8bb86bedc18e704dc69227604b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "namePrefix", value)

    @builtins.property
    @jsii.member(jsii_name="nameSuffix")
    def name_suffix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameSuffix"))

    @name_suffix.setter
    def name_suffix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a53601bdddeae0a346297e9a2ec53da9d7eeabc03a5e53f52dcabb1b7043710c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameSuffix", value)

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "version"))

    @version.setter
    def version(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b82b5af32a53cba3de8118bae2179f055151cef398e9993d72f8242481b5cad4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "version", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9ae6d0c68a0e1cedd11647a78d277be41d6ebb59009121ad379f3d5a6474db0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__454eeed82bb513d3c216c06d3fb9ff909932f00b65ac9d6df0facf3f1a0d725f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20031efc4324cbaa3a3cc7010eec837a59360d83e0a911fefed182b567c5ba45)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae21370a8c7d536e65c5b2c2a5a05618470094229f1bba17664ff26e76851410)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c50c46f41b940c487bf880f41f02f43aa402c8a0ebf8c6b39bad79eb2c3c19b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68c5b0214ad6351f85f0f891047a09734e9056052ed573b6858e0455fce03aeb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__974c0d65a6b79fd9a44c19bc2d09fc71e679beac29c2a7a35bb0de668fb8e36f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d57c7978273a12c7422f68ac34a594e9db1f920f0ffbb1c0044fc34bbbb9f369)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDirectory")
    def put_directory(
        self,
        *,
        exclude: typing.Optional[builtins.str] = None,
        include: typing.Optional[builtins.str] = None,
        jsonnet: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
        recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the ``include`` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#exclude ApplicationSet#exclude}
        :param include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}' Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#include ApplicationSet#include}
        :param jsonnet: jsonnet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#jsonnet ApplicationSet#jsonnet}
        :param recurse: Whether to scan a directory recursively for manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#recurse ApplicationSet#recurse}
        '''
        value = ApplicationSetSpecTemplateSpecSourceDirectory(
            exclude=exclude, include=include, jsonnet=jsonnet, recurse=recurse
        )

        return typing.cast(None, jsii.invoke(self, "putDirectory", [value]))

    @jsii.member(jsii_name="putHelm")
    def put_helm(
        self,
        *,
        file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
        pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        release_name: typing.Optional[builtins.str] = None,
        skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
        values: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param file_parameter: file_parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#file_parameter ApplicationSet#file_parameter}
        :param ignore_missing_value_files: Prevents 'helm template' from failing when ``value_files`` do not exist locally by not appending them to 'helm template --values'. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#ignore_missing_value_files ApplicationSet#ignore_missing_value_files}
        :param parameter: parameter block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#parameter ApplicationSet#parameter}
        :param pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#pass_credentials ApplicationSet#pass_credentials}
        :param release_name: Helm release name. If omitted it will use the application name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#release_name ApplicationSet#release_name}
        :param skip_crds: Whether to skip custom resource definition installation step (Helm's `--skip-crds <https://helm.sh/docs/chart_best_practices/custom_resource_definitions/>`_). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#skip_crds ApplicationSet#skip_crds}
        :param value_files: List of Helm value files to use when generating a template. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value_files ApplicationSet#value_files}
        :param values: Helm values to be passed to 'helm template', typically defined as a block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#values ApplicationSet#values}
        '''
        value = ApplicationSetSpecTemplateSpecSourceHelm(
            file_parameter=file_parameter,
            ignore_missing_value_files=ignore_missing_value_files,
            parameter=parameter,
            pass_credentials=pass_credentials,
            release_name=release_name,
            skip_crds=skip_crds,
            value_files=value_files,
            values=values,
        )

        return typing.cast(None, jsii.invoke(self, "putHelm", [value]))

    @jsii.member(jsii_name="putKustomize")
    def put_kustomize(
        self,
        *,
        common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        images: typing.Optional[typing.Sequence[builtins.str]] = None,
        name_prefix: typing.Optional[builtins.str] = None,
        name_suffix: typing.Optional[builtins.str] = None,
        version: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param common_annotations: List of additional annotations to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_annotations ApplicationSet#common_annotations}
        :param common_labels: List of additional labels to add to rendered manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#common_labels ApplicationSet#common_labels}
        :param images: List of Kustomize image override specifications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#images ApplicationSet#images}
        :param name_prefix: Prefix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_prefix ApplicationSet#name_prefix}
        :param name_suffix: Suffix appended to resources for Kustomize apps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name_suffix ApplicationSet#name_suffix}
        :param version: Version of Kustomize to use for rendering manifests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#version ApplicationSet#version}
        '''
        value = ApplicationSetSpecTemplateSpecSourceKustomize(
            common_annotations=common_annotations,
            common_labels=common_labels,
            images=images,
            name_prefix=name_prefix,
            name_suffix=name_suffix,
            version=version,
        )

        return typing.cast(None, jsii.invoke(self, "putKustomize", [value]))

    @jsii.member(jsii_name="putPlugin")
    def put_plugin(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        value = ApplicationSetSpecTemplateSpecSourcePlugin(env=env, name=name)

        return typing.cast(None, jsii.invoke(self, "putPlugin", [value]))

    @jsii.member(jsii_name="resetChart")
    def reset_chart(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChart", []))

    @jsii.member(jsii_name="resetDirectory")
    def reset_directory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectory", []))

    @jsii.member(jsii_name="resetHelm")
    def reset_helm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHelm", []))

    @jsii.member(jsii_name="resetKustomize")
    def reset_kustomize(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKustomize", []))

    @jsii.member(jsii_name="resetPath")
    def reset_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPath", []))

    @jsii.member(jsii_name="resetPlugin")
    def reset_plugin(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPlugin", []))

    @jsii.member(jsii_name="resetRef")
    def reset_ref(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRef", []))

    @jsii.member(jsii_name="resetTargetRevision")
    def reset_target_revision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetRevision", []))

    @builtins.property
    @jsii.member(jsii_name="directory")
    def directory(self) -> ApplicationSetSpecTemplateSpecSourceDirectoryOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceDirectoryOutputReference, jsii.get(self, "directory"))

    @builtins.property
    @jsii.member(jsii_name="helm")
    def helm(self) -> ApplicationSetSpecTemplateSpecSourceHelmOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceHelmOutputReference, jsii.get(self, "helm"))

    @builtins.property
    @jsii.member(jsii_name="kustomize")
    def kustomize(self) -> ApplicationSetSpecTemplateSpecSourceKustomizeOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSourceKustomizeOutputReference, jsii.get(self, "kustomize"))

    @builtins.property
    @jsii.member(jsii_name="plugin")
    def plugin(self) -> "ApplicationSetSpecTemplateSpecSourcePluginOutputReference":
        return typing.cast("ApplicationSetSpecTemplateSpecSourcePluginOutputReference", jsii.get(self, "plugin"))

    @builtins.property
    @jsii.member(jsii_name="chartInput")
    def chart_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "chartInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryInput")
    def directory_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory], jsii.get(self, "directoryInput"))

    @builtins.property
    @jsii.member(jsii_name="helmInput")
    def helm_input(self) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm], jsii.get(self, "helmInput"))

    @builtins.property
    @jsii.member(jsii_name="kustomizeInput")
    def kustomize_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize], jsii.get(self, "kustomizeInput"))

    @builtins.property
    @jsii.member(jsii_name="pathInput")
    def path_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pathInput"))

    @builtins.property
    @jsii.member(jsii_name="pluginInput")
    def plugin_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSourcePlugin"]:
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSourcePlugin"], jsii.get(self, "pluginInput"))

    @builtins.property
    @jsii.member(jsii_name="refInput")
    def ref_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refInput"))

    @builtins.property
    @jsii.member(jsii_name="repoUrlInput")
    def repo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "repoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="targetRevisionInput")
    def target_revision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "targetRevisionInput"))

    @builtins.property
    @jsii.member(jsii_name="chart")
    def chart(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "chart"))

    @chart.setter
    def chart(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2be9f59029fd520439ce24d0b6bc882a18513a92ce407929efc0ff3297672fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "chart", value)

    @builtins.property
    @jsii.member(jsii_name="path")
    def path(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "path"))

    @path.setter
    def path(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d22cd820927cc145b397d9dafb8cc05cffa3eb6329fa64339c4369c4bf3dcf97)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "path", value)

    @builtins.property
    @jsii.member(jsii_name="ref")
    def ref(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ref"))

    @ref.setter
    def ref(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9f13418e891d0585e18c537a53364c264b480d0a4d1d9eb0f51724c9a2db4fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ref", value)

    @builtins.property
    @jsii.member(jsii_name="repoUrl")
    def repo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "repoUrl"))

    @repo_url.setter
    def repo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a4299f768a3158943f989f1221f698c0c763f29c0a1f119b3ffc7ad83867136)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repoUrl", value)

    @builtins.property
    @jsii.member(jsii_name="targetRevision")
    def target_revision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "targetRevision"))

    @target_revision.setter
    def target_revision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a84a7e20ef79765d7c9a0dd55322bec5df12271e0554ccc726e63da289a0fbc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetRevision", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b404eda25fed9242b96a1cc312f1b45b88a123fe719d6842325acec4f65c899)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourcePlugin",
    jsii_struct_bases=[],
    name_mapping={"env": "env", "name": "name"},
)
class ApplicationSetSpecTemplateSpecSourcePlugin:
    def __init__(
        self,
        *,
        env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ApplicationSetSpecTemplateSpecSourcePluginEnv", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param env: env block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        :param name: Name of the plugin. Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fb03e4885644eb5cff900636e8d8e06856b1dce5e7e87201f7fea7101b0d177)
            check_type(argname="argument env", value=env, expected_type=type_hints["env"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if env is not None:
            self._values["env"] = env
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def env(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourcePluginEnv"]]]:
        '''env block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#env ApplicationSet#env}
        '''
        result = self._values.get("env")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ApplicationSetSpecTemplateSpecSourcePluginEnv"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the plugin.

        Only set the plugin name if the plugin is defined in ``argocd-cm``. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourcePlugin(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourcePluginEnv",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "value": "value"},
)
class ApplicationSetSpecTemplateSpecSourcePluginEnv:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        value: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name: Name of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        :param value: Value of the environment variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2056709f949d6661849d240e4d46773d1d817f02cfa25c7d670b3f6ddacf8ee)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#name ApplicationSet#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def value(self) -> typing.Optional[builtins.str]:
        '''Value of the environment variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#value ApplicationSet#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSourcePluginEnv(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSourcePluginEnvList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourcePluginEnvList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a20aa0b0f5634cad0f1a4f4530a97a75695b1dcf295f3ba95b42f3889f9c6cf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ApplicationSetSpecTemplateSpecSourcePluginEnvOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38d921d65f2cb960aa00f09ffad814ebeeba716292f11977215fc17cb9334e7e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ApplicationSetSpecTemplateSpecSourcePluginEnvOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a5d5df66a6e36d8dd28d385a69b842a8e3168f1e789d7cc4ad3a7e32f176326)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value)

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1ee5c9ec0274355cce2a90d5c703378a82d4a5700167a3c1a5cfc149d07429a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value)

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ec914fc98199c5b4bf4ebc806fbd770526378c31d01dac7fdffaaae2a88de73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfcc582943348d5b8815d61654f7cc2388bd2b3ad7715f810686bcb74906554d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourcePluginEnvOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourcePluginEnvOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25ef72651d38722ae23deb8f7089463d20c3dc0ab608e936737f2dfc5b32c2b4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d4530cd9f2725987bfc3fef305922df3cde0c241d400ef0589682f61a224771)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__411950d2fa93cc89056cf7062312b6cf768432b866c7332e175bcb35ad0630d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourcePluginEnv]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourcePluginEnv]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourcePluginEnv]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__504f1d5d07c7441d528be79a72221d6f2d1e1f59cb567ec822b4dac41537343b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSourcePluginOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSourcePluginOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c0adc8f8d06f181b6fd8fa52206e56236d186412ac3b585eb42a10ad15adf3a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putEnv")
    def put_env(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__042e6ca21ec6656989442f5c193b7677165929629a3fec84be834e8fdd886854)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEnv", [value]))

    @jsii.member(jsii_name="resetEnv")
    def reset_env(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnv", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="env")
    def env(self) -> ApplicationSetSpecTemplateSpecSourcePluginEnvList:
        return typing.cast(ApplicationSetSpecTemplateSpecSourcePluginEnvList, jsii.get(self, "env"))

    @builtins.property
    @jsii.member(jsii_name="envInput")
    def env_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]], jsii.get(self, "envInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__808e036b4b49f35fcc59b0151b6cc13160043033bf8e019d662b6b143cb32ff4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSourcePlugin]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSourcePlugin], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSourcePlugin],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9928055e93eb27c3ec587d1fa0927c3d4c2e1b86abe6bd8bd9f3344338d1311)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicy",
    jsii_struct_bases=[],
    name_mapping={
        "automated": "automated",
        "managed_namespace_metadata": "managedNamespaceMetadata",
        "retry": "retry",
        "sync_options": "syncOptions",
    },
)
class ApplicationSetSpecTemplateSpecSyncPolicy:
    def __init__(
        self,
        *,
        automated: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyAutomated", typing.Dict[builtins.str, typing.Any]]] = None,
        managed_namespace_metadata: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata", typing.Dict[builtins.str, typing.Any]]] = None,
        retry: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyRetry", typing.Dict[builtins.str, typing.Any]]] = None,
        sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param automated: automated block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        :param managed_namespace_metadata: managed_namespace_metadata block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        :param retry: retry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        :param sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        if isinstance(automated, dict):
            automated = ApplicationSetSpecTemplateSpecSyncPolicyAutomated(**automated)
        if isinstance(managed_namespace_metadata, dict):
            managed_namespace_metadata = ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata(**managed_namespace_metadata)
        if isinstance(retry, dict):
            retry = ApplicationSetSpecTemplateSpecSyncPolicyRetry(**retry)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25aec0e25e62b0b354c6da57984077f04b1e3c22b25227b13151508962537917)
            check_type(argname="argument automated", value=automated, expected_type=type_hints["automated"])
            check_type(argname="argument managed_namespace_metadata", value=managed_namespace_metadata, expected_type=type_hints["managed_namespace_metadata"])
            check_type(argname="argument retry", value=retry, expected_type=type_hints["retry"])
            check_type(argname="argument sync_options", value=sync_options, expected_type=type_hints["sync_options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if automated is not None:
            self._values["automated"] = automated
        if managed_namespace_metadata is not None:
            self._values["managed_namespace_metadata"] = managed_namespace_metadata
        if retry is not None:
            self._values["retry"] = retry
        if sync_options is not None:
            self._values["sync_options"] = sync_options

    @builtins.property
    def automated(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyAutomated"]:
        '''automated block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#automated ApplicationSet#automated}
        '''
        result = self._values.get("automated")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyAutomated"], result)

    @builtins.property
    def managed_namespace_metadata(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata"]:
        '''managed_namespace_metadata block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#managed_namespace_metadata ApplicationSet#managed_namespace_metadata}
        '''
        result = self._values.get("managed_namespace_metadata")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata"], result)

    @builtins.property
    def retry(self) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetry"]:
        '''retry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#retry ApplicationSet#retry}
        '''
        result = self._values.get("retry")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetry"], result)

    @builtins.property
    def sync_options(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#sync_options ApplicationSet#sync_options}
        '''
        result = self._values.get("sync_options")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSyncPolicy(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyAutomated",
    jsii_struct_bases=[],
    name_mapping={
        "allow_empty": "allowEmpty",
        "prune": "prune",
        "self_heal": "selfHeal",
    },
)
class ApplicationSetSpecTemplateSpecSyncPolicyAutomated:
    def __init__(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba8b9cadc6a878196215c3908c9843afa0a2b0ac13762a18773155c67aa33a64)
            check_type(argname="argument allow_empty", value=allow_empty, expected_type=type_hints["allow_empty"])
            check_type(argname="argument prune", value=prune, expected_type=type_hints["prune"])
            check_type(argname="argument self_heal", value=self_heal, expected_type=type_hints["self_heal"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_empty is not None:
            self._values["allow_empty"] = allow_empty
        if prune is not None:
            self._values["prune"] = prune
        if self_heal is not None:
            self._values["self_heal"] = self_heal

    @builtins.property
    def allow_empty(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows apps have zero live resources.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        '''
        result = self._values.get("allow_empty")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def prune(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        '''
        result = self._values.get("prune")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def self_heal(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to revert resources back to their desired state upon modification in the cluster.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        result = self._values.get("self_heal")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSyncPolicyAutomated(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSyncPolicyAutomatedOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyAutomatedOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7d0191a2bc0ba64f24616aec0db687f8a2da2ef97d625d8e569139e32f2966e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmpty")
    def reset_allow_empty(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmpty", []))

    @jsii.member(jsii_name="resetPrune")
    def reset_prune(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrune", []))

    @jsii.member(jsii_name="resetSelfHeal")
    def reset_self_heal(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHeal", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmptyInput")
    def allow_empty_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmptyInput"))

    @builtins.property
    @jsii.member(jsii_name="pruneInput")
    def prune_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pruneInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHealInput")
    def self_heal_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "selfHealInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmpty")
    def allow_empty(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmpty"))

    @allow_empty.setter
    def allow_empty(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f677203691eb23203e676be1a8a5bec4b137e884b03fa1d97b5e1ee5d84b990e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmpty", value)

    @builtins.property
    @jsii.member(jsii_name="prune")
    def prune(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "prune"))

    @prune.setter
    def prune(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed5d0597fb7ee014ec3d922ba5a359aa17c70596ad495aec4f2fc738fd98ab99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prune", value)

    @builtins.property
    @jsii.member(jsii_name="selfHeal")
    def self_heal(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "selfHeal"))

    @self_heal.setter
    def self_heal(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e67855a858beb9d43c58b3ae615112ba38dc203e47085d5d56138d889aa6d909)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHeal", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97c9542fa5a96c17abc2c75fe23dcb5193fd56b2d3ba98b55f230b54a9ea2d2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata",
    jsii_struct_bases=[],
    name_mapping={"annotations": "annotations", "labels": "labels"},
)
class ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata:
    def __init__(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2726e0f928e48b66a489ca969566c7c6891ee5826eacf212e966fcb05da433e7)
            check_type(argname="argument annotations", value=annotations, expected_type=type_hints["annotations"])
            check_type(argname="argument labels", value=labels, expected_type=type_hints["labels"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if annotations is not None:
            self._values["annotations"] = annotations
        if labels is not None:
            self._values["labels"] = labels

    @builtins.property
    def annotations(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Annotations to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        '''
        result = self._values.get("annotations")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def labels(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Labels to apply to the namespace.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        result = self._values.get("labels")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60e382734d318aa68f8695ee286c1db1eef11f10567a4900efd82e84459b00ad)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAnnotations")
    def reset_annotations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnnotations", []))

    @jsii.member(jsii_name="resetLabels")
    def reset_labels(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabels", []))

    @builtins.property
    @jsii.member(jsii_name="annotationsInput")
    def annotations_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "annotationsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelsInput")
    def labels_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "labelsInput"))

    @builtins.property
    @jsii.member(jsii_name="annotations")
    def annotations(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "annotations"))

    @annotations.setter
    def annotations(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__395c1100ad138a2a51945dee43e95bc5b609ceb33d647735d135fdc83a3d4503)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "annotations", value)

    @builtins.property
    @jsii.member(jsii_name="labels")
    def labels(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "labels"))

    @labels.setter
    def labels(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c928dbb7007d9fbd66afbade1057b498c9ac4b70fb2ae9a7c9affef4ecfe648e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "labels", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4e4a70459287d00e0b3e20d51fd535b8c382093edab135a57b2f4ec8d45a1e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSyncPolicyOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96a50fa12ad00a2cab2a86beecca1fd09fe434e096d62385757e77a9510c3cdd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAutomated")
    def put_automated(
        self,
        *,
        allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param allow_empty: Allows apps have zero live resources. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#allow_empty ApplicationSet#allow_empty}
        :param prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#prune ApplicationSet#prune}
        :param self_heal: Whether to revert resources back to their desired state upon modification in the cluster. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#self_heal ApplicationSet#self_heal}
        '''
        value = ApplicationSetSpecTemplateSpecSyncPolicyAutomated(
            allow_empty=allow_empty, prune=prune, self_heal=self_heal
        )

        return typing.cast(None, jsii.invoke(self, "putAutomated", [value]))

    @jsii.member(jsii_name="putManagedNamespaceMetadata")
    def put_managed_namespace_metadata(
        self,
        *,
        annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param annotations: Annotations to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#annotations ApplicationSet#annotations}
        :param labels: Labels to apply to the namespace. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#labels ApplicationSet#labels}
        '''
        value = ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata(
            annotations=annotations, labels=labels
        )

        return typing.cast(None, jsii.invoke(self, "putManagedNamespaceMetadata", [value]))

    @jsii.member(jsii_name="putRetry")
    def put_retry(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        value = ApplicationSetSpecTemplateSpecSyncPolicyRetry(
            backoff=backoff, limit=limit
        )

        return typing.cast(None, jsii.invoke(self, "putRetry", [value]))

    @jsii.member(jsii_name="resetAutomated")
    def reset_automated(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomated", []))

    @jsii.member(jsii_name="resetManagedNamespaceMetadata")
    def reset_managed_namespace_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManagedNamespaceMetadata", []))

    @jsii.member(jsii_name="resetRetry")
    def reset_retry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetry", []))

    @jsii.member(jsii_name="resetSyncOptions")
    def reset_sync_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncOptions", []))

    @builtins.property
    @jsii.member(jsii_name="automated")
    def automated(
        self,
    ) -> ApplicationSetSpecTemplateSpecSyncPolicyAutomatedOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSyncPolicyAutomatedOutputReference, jsii.get(self, "automated"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadata")
    def managed_namespace_metadata(
        self,
    ) -> ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference, jsii.get(self, "managedNamespaceMetadata"))

    @builtins.property
    @jsii.member(jsii_name="retry")
    def retry(self) -> "ApplicationSetSpecTemplateSpecSyncPolicyRetryOutputReference":
        return typing.cast("ApplicationSetSpecTemplateSpecSyncPolicyRetryOutputReference", jsii.get(self, "retry"))

    @builtins.property
    @jsii.member(jsii_name="automatedInput")
    def automated_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated], jsii.get(self, "automatedInput"))

    @builtins.property
    @jsii.member(jsii_name="managedNamespaceMetadataInput")
    def managed_namespace_metadata_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata], jsii.get(self, "managedNamespaceMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="retryInput")
    def retry_input(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetry"]:
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetry"], jsii.get(self, "retryInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptionsInput")
    def sync_options_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "syncOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="syncOptions")
    def sync_options(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "syncOptions"))

    @sync_options.setter
    def sync_options(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1c6feaba6e3df555ebf06568606e8ab3c48afb37a3dd13c18eb1e81d87cdcc2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncOptions", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicy]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicy], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicy],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c443d242e5f6610feae47def0db8c5258cb54811d23ca1792b34b36be0479e19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyRetry",
    jsii_struct_bases=[],
    name_mapping={"backoff": "backoff", "limit": "limit"},
)
class ApplicationSetSpecTemplateSpecSyncPolicyRetry:
    def __init__(
        self,
        *,
        backoff: typing.Optional[typing.Union["ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff", typing.Dict[builtins.str, typing.Any]]] = None,
        limit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param backoff: backoff block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        :param limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        if isinstance(backoff, dict):
            backoff = ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff(**backoff)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dece2392abc873708a3dbbe239a7308f82d6836f1c90e4968f64f0e63309e774)
            check_type(argname="argument backoff", value=backoff, expected_type=type_hints["backoff"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if backoff is not None:
            self._values["backoff"] = backoff
        if limit is not None:
            self._values["limit"] = limit

    @builtins.property
    def backoff(
        self,
    ) -> typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff"]:
        '''backoff block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#backoff ApplicationSet#backoff}
        '''
        result = self._values.get("backoff")
        return typing.cast(typing.Optional["ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff"], result)

    @builtins.property
    def limit(self) -> typing.Optional[builtins.str]:
        '''Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#limit ApplicationSet#limit}
        '''
        result = self._values.get("limit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSyncPolicyRetry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff",
    jsii_struct_bases=[],
    name_mapping={
        "duration": "duration",
        "factor": "factor",
        "max_duration": "maxDuration",
    },
)
class ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff:
    def __init__(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c83288e2b53b9790cd19cd5b5eb513ecae2c61440ac993a24dbab0450ebda6c0)
            check_type(argname="argument duration", value=duration, expected_type=type_hints["duration"])
            check_type(argname="argument factor", value=factor, expected_type=type_hints["factor"])
            check_type(argname="argument max_duration", value=max_duration, expected_type=type_hints["max_duration"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if duration is not None:
            self._values["duration"] = duration
        if factor is not None:
            self._values["factor"] = factor
        if max_duration is not None:
            self._values["max_duration"] = max_duration

    @builtins.property
    def duration(self) -> typing.Optional[builtins.str]:
        '''Duration is the amount to back off.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        '''
        result = self._values.get("duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def factor(self) -> typing.Optional[builtins.str]:
        '''Factor to multiply the base duration after each failed retry.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        '''
        result = self._values.get("factor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_duration(self) -> typing.Optional[builtins.str]:
        '''Maximum amount of time allowed for the backoff strategy.

        Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        result = self._values.get("max_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b310e81c09a9080711e37bec75bc916e8e35f99a5f72f7f10e8d0cb7603c2c03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDuration")
    def reset_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDuration", []))

    @jsii.member(jsii_name="resetFactor")
    def reset_factor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFactor", []))

    @jsii.member(jsii_name="resetMaxDuration")
    def reset_max_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxDuration", []))

    @builtins.property
    @jsii.member(jsii_name="durationInput")
    def duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "durationInput"))

    @builtins.property
    @jsii.member(jsii_name="factorInput")
    def factor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "factorInput"))

    @builtins.property
    @jsii.member(jsii_name="maxDurationInput")
    def max_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maxDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="duration")
    def duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "duration"))

    @duration.setter
    def duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2253a2c021c077a4266d559b0aad0a29293cac2053bc17a53bd088761b4f4078)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "duration", value)

    @builtins.property
    @jsii.member(jsii_name="factor")
    def factor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "factor"))

    @factor.setter
    def factor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5546b2144a615ad0cdd9483cf8568527e84fbdcc1f518c336f51b194801bd5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "factor", value)

    @builtins.property
    @jsii.member(jsii_name="maxDuration")
    def max_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maxDuration"))

    @max_duration.setter
    def max_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e979ef5c9f1b9cd9bede8ea631945a419a24eb0883d2a4faa713031076fe3db1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxDuration", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffb406483f46202c8ec0e084d0483861c6844e50f1d3832c433dfedc7602dbf3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


class ApplicationSetSpecTemplateSpecSyncPolicyRetryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="argocd.applicationSet.ApplicationSetSpecTemplateSpecSyncPolicyRetryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc7e5cbc2acd09e36c6d6d43ae16a51e7fd163cfaa310480f51a8a08ab7404d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putBackoff")
    def put_backoff(
        self,
        *,
        duration: typing.Optional[builtins.str] = None,
        factor: typing.Optional[builtins.str] = None,
        max_duration: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#duration ApplicationSet#duration}
        :param factor: Factor to multiply the base duration after each failed retry. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#factor ApplicationSet#factor}
        :param max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. ``2m``, ``1h``), as a string. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/oboukili/argocd/6.0.3/docs/resources/application_set#max_duration ApplicationSet#max_duration}
        '''
        value = ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff(
            duration=duration, factor=factor, max_duration=max_duration
        )

        return typing.cast(None, jsii.invoke(self, "putBackoff", [value]))

    @jsii.member(jsii_name="resetBackoff")
    def reset_backoff(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackoff", []))

    @jsii.member(jsii_name="resetLimit")
    def reset_limit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLimit", []))

    @builtins.property
    @jsii.member(jsii_name="backoff")
    def backoff(
        self,
    ) -> ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffOutputReference:
        return typing.cast(ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffOutputReference, jsii.get(self, "backoff"))

    @builtins.property
    @jsii.member(jsii_name="backoffInput")
    def backoff_input(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff], jsii.get(self, "backoffInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1259fac705852c455f5647d345af0d8f89e1c4bff0645ca99422ce0526fe3d15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetry]:
        return typing.cast(typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetry], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetry],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6beba19841e37127e439d0946e81e9e594b3e0024dc9b58af6c986ba19c63f43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


__all__ = [
    "ApplicationSet",
    "ApplicationSetConfig",
    "ApplicationSetMetadata",
    "ApplicationSetMetadataOutputReference",
    "ApplicationSetSpec",
    "ApplicationSetSpecGenerator",
    "ApplicationSetSpecGeneratorClusterDecisionResource",
    "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector",
    "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions",
    "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressionsOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplate",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorClusters",
    "ApplicationSetSpecGeneratorClustersList",
    "ApplicationSetSpecGeneratorClustersOutputReference",
    "ApplicationSetSpecGeneratorClustersSelector",
    "ApplicationSetSpecGeneratorClustersSelectorMatchExpressions",
    "ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsList",
    "ApplicationSetSpecGeneratorClustersSelectorMatchExpressionsOutputReference",
    "ApplicationSetSpecGeneratorClustersSelectorOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplate",
    "ApplicationSetSpecGeneratorClustersTemplateMetadata",
    "ApplicationSetSpecGeneratorClustersTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpec",
    "ApplicationSetSpecGeneratorClustersTemplateSpecDestination",
    "ApplicationSetSpecGeneratorClustersTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecInfo",
    "ApplicationSetSpecGeneratorClustersTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSource",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorGit",
    "ApplicationSetSpecGeneratorGitDirectory",
    "ApplicationSetSpecGeneratorGitDirectoryList",
    "ApplicationSetSpecGeneratorGitDirectoryOutputReference",
    "ApplicationSetSpecGeneratorGitFile",
    "ApplicationSetSpecGeneratorGitFileList",
    "ApplicationSetSpecGeneratorGitFileOutputReference",
    "ApplicationSetSpecGeneratorGitList",
    "ApplicationSetSpecGeneratorGitOutputReference",
    "ApplicationSetSpecGeneratorGitTemplate",
    "ApplicationSetSpecGeneratorGitTemplateMetadata",
    "ApplicationSetSpecGeneratorGitTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpec",
    "ApplicationSetSpecGeneratorGitTemplateSpecDestination",
    "ApplicationSetSpecGeneratorGitTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecInfo",
    "ApplicationSetSpecGeneratorGitTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorGitTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSource",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorList",
    "ApplicationSetSpecGeneratorListStruct",
    "ApplicationSetSpecGeneratorListStructList",
    "ApplicationSetSpecGeneratorListStructOutputReference",
    "ApplicationSetSpecGeneratorListTemplate",
    "ApplicationSetSpecGeneratorListTemplateMetadata",
    "ApplicationSetSpecGeneratorListTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorListTemplateOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpec",
    "ApplicationSetSpecGeneratorListTemplateSpecDestination",
    "ApplicationSetSpecGeneratorListTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecInfo",
    "ApplicationSetSpecGeneratorListTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorListTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSource",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorMatrix",
    "ApplicationSetSpecGeneratorMatrixList",
    "ApplicationSetSpecGeneratorMatrixOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplate",
    "ApplicationSetSpecGeneratorMatrixTemplateMetadata",
    "ApplicationSetSpecGeneratorMatrixTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpec",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecDestination",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecInfo",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSource",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorMerge",
    "ApplicationSetSpecGeneratorMergeList",
    "ApplicationSetSpecGeneratorMergeOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplate",
    "ApplicationSetSpecGeneratorMergeTemplateMetadata",
    "ApplicationSetSpecGeneratorMergeTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpec",
    "ApplicationSetSpecGeneratorMergeTemplateSpecDestination",
    "ApplicationSetSpecGeneratorMergeTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecInfo",
    "ApplicationSetSpecGeneratorMergeTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSource",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorOutputReference",
    "ApplicationSetSpecGeneratorPullRequest",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServer",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthOutputReference",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRefOutputReference",
    "ApplicationSetSpecGeneratorPullRequestBitbucketServerOutputReference",
    "ApplicationSetSpecGeneratorPullRequestFilter",
    "ApplicationSetSpecGeneratorPullRequestFilterList",
    "ApplicationSetSpecGeneratorPullRequestFilterOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGitea",
    "ApplicationSetSpecGeneratorPullRequestGiteaOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGiteaTokenRef",
    "ApplicationSetSpecGeneratorPullRequestGiteaTokenRefOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGithub",
    "ApplicationSetSpecGeneratorPullRequestGithubOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGithubTokenRef",
    "ApplicationSetSpecGeneratorPullRequestGithubTokenRefOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGitlab",
    "ApplicationSetSpecGeneratorPullRequestGitlabOutputReference",
    "ApplicationSetSpecGeneratorPullRequestGitlabTokenRef",
    "ApplicationSetSpecGeneratorPullRequestGitlabTokenRefOutputReference",
    "ApplicationSetSpecGeneratorPullRequestList",
    "ApplicationSetSpecGeneratorPullRequestOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplate",
    "ApplicationSetSpecGeneratorPullRequestTemplateMetadata",
    "ApplicationSetSpecGeneratorPullRequestTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpec",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSource",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorScmProvider",
    "ApplicationSetSpecGeneratorScmProviderAzureDevops",
    "ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef",
    "ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderAzureDevopsOutputReference",
    "ApplicationSetSpecGeneratorScmProviderBitbucketCloud",
    "ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef",
    "ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderBitbucketCloudOutputReference",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServer",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthOutputReference",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderBitbucketServerOutputReference",
    "ApplicationSetSpecGeneratorScmProviderFilter",
    "ApplicationSetSpecGeneratorScmProviderFilterList",
    "ApplicationSetSpecGeneratorScmProviderFilterOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGitea",
    "ApplicationSetSpecGeneratorScmProviderGiteaOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGiteaTokenRef",
    "ApplicationSetSpecGeneratorScmProviderGiteaTokenRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGithub",
    "ApplicationSetSpecGeneratorScmProviderGithubOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGithubTokenRef",
    "ApplicationSetSpecGeneratorScmProviderGithubTokenRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGitlab",
    "ApplicationSetSpecGeneratorScmProviderGitlabOutputReference",
    "ApplicationSetSpecGeneratorScmProviderGitlabTokenRef",
    "ApplicationSetSpecGeneratorScmProviderGitlabTokenRefOutputReference",
    "ApplicationSetSpecGeneratorScmProviderList",
    "ApplicationSetSpecGeneratorScmProviderOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplate",
    "ApplicationSetSpecGeneratorScmProviderTemplateMetadata",
    "ApplicationSetSpecGeneratorScmProviderTemplateMetadataOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpec",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecInfoOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSource",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryOutputReference",
    "ApplicationSetSpecGeneratorSelector",
    "ApplicationSetSpecGeneratorSelectorMatchExpressions",
    "ApplicationSetSpecGeneratorSelectorMatchExpressionsList",
    "ApplicationSetSpecGeneratorSelectorMatchExpressionsOutputReference",
    "ApplicationSetSpecGeneratorSelectorOutputReference",
    "ApplicationSetSpecOutputReference",
    "ApplicationSetSpecStrategy",
    "ApplicationSetSpecStrategyOutputReference",
    "ApplicationSetSpecStrategyRollingSync",
    "ApplicationSetSpecStrategyRollingSyncList",
    "ApplicationSetSpecStrategyRollingSyncOutputReference",
    "ApplicationSetSpecStrategyRollingSyncStep",
    "ApplicationSetSpecStrategyRollingSyncStepList",
    "ApplicationSetSpecStrategyRollingSyncStepMatchExpressions",
    "ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsList",
    "ApplicationSetSpecStrategyRollingSyncStepMatchExpressionsOutputReference",
    "ApplicationSetSpecStrategyRollingSyncStepOutputReference",
    "ApplicationSetSpecSyncPolicy",
    "ApplicationSetSpecSyncPolicyOutputReference",
    "ApplicationSetSpecTemplate",
    "ApplicationSetSpecTemplateMetadata",
    "ApplicationSetSpecTemplateMetadataOutputReference",
    "ApplicationSetSpecTemplateOutputReference",
    "ApplicationSetSpecTemplateSpec",
    "ApplicationSetSpecTemplateSpecDestination",
    "ApplicationSetSpecTemplateSpecDestinationOutputReference",
    "ApplicationSetSpecTemplateSpecIgnoreDifference",
    "ApplicationSetSpecTemplateSpecIgnoreDifferenceList",
    "ApplicationSetSpecTemplateSpecIgnoreDifferenceOutputReference",
    "ApplicationSetSpecTemplateSpecInfo",
    "ApplicationSetSpecTemplateSpecInfoList",
    "ApplicationSetSpecTemplateSpecInfoOutputReference",
    "ApplicationSetSpecTemplateSpecOutputReference",
    "ApplicationSetSpecTemplateSpecSource",
    "ApplicationSetSpecTemplateSpecSourceDirectory",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarList",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVarOutputReference",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetOutputReference",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaList",
    "ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTlaOutputReference",
    "ApplicationSetSpecTemplateSpecSourceDirectoryOutputReference",
    "ApplicationSetSpecTemplateSpecSourceHelm",
    "ApplicationSetSpecTemplateSpecSourceHelmFileParameter",
    "ApplicationSetSpecTemplateSpecSourceHelmFileParameterList",
    "ApplicationSetSpecTemplateSpecSourceHelmFileParameterOutputReference",
    "ApplicationSetSpecTemplateSpecSourceHelmOutputReference",
    "ApplicationSetSpecTemplateSpecSourceHelmParameter",
    "ApplicationSetSpecTemplateSpecSourceHelmParameterList",
    "ApplicationSetSpecTemplateSpecSourceHelmParameterOutputReference",
    "ApplicationSetSpecTemplateSpecSourceKustomize",
    "ApplicationSetSpecTemplateSpecSourceKustomizeOutputReference",
    "ApplicationSetSpecTemplateSpecSourceList",
    "ApplicationSetSpecTemplateSpecSourceOutputReference",
    "ApplicationSetSpecTemplateSpecSourcePlugin",
    "ApplicationSetSpecTemplateSpecSourcePluginEnv",
    "ApplicationSetSpecTemplateSpecSourcePluginEnvList",
    "ApplicationSetSpecTemplateSpecSourcePluginEnvOutputReference",
    "ApplicationSetSpecTemplateSpecSourcePluginOutputReference",
    "ApplicationSetSpecTemplateSpecSyncPolicy",
    "ApplicationSetSpecTemplateSpecSyncPolicyAutomated",
    "ApplicationSetSpecTemplateSpecSyncPolicyAutomatedOutputReference",
    "ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata",
    "ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadataOutputReference",
    "ApplicationSetSpecTemplateSpecSyncPolicyOutputReference",
    "ApplicationSetSpecTemplateSpecSyncPolicyRetry",
    "ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff",
    "ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoffOutputReference",
    "ApplicationSetSpecTemplateSpecSyncPolicyRetryOutputReference",
]

publication.publish()

def _typecheckingstub__37accf080b635ae7d022e37a2502786aaf7af8bbde822f588149c846a2ecc5a7(
    scope: _constructs_77d1e7e8.Construct,
    id_: builtins.str,
    *,
    metadata: typing.Union[ApplicationSetMetadata, typing.Dict[builtins.str, typing.Any]],
    spec: typing.Union[ApplicationSetSpec, typing.Dict[builtins.str, typing.Any]],
    id: typing.Optional[builtins.str] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61eb4b146a41ffe20e75f95f41a6b272e7db96e094685f106b35be870d26d4d2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6488100d5708480b97efe90a1ddfd05a0301f97c878b6f0d5cb60aa99d3c5d73(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    metadata: typing.Union[ApplicationSetMetadata, typing.Dict[builtins.str, typing.Any]],
    spec: typing.Union[ApplicationSetSpec, typing.Dict[builtins.str, typing.Any]],
    id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0dbd043024bf9674af9a9ac8c09139a08e436108c0a343d61b5e021a4a8727c8(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbe5245b0e6e7e493b385cfec03fc24ad8c925e96d77abeb802a93987e1b51cb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06a2f36ad8faa8983870e88c7db759e7d31fc92c46387a60db9c3ce5a163ba1d(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c27ca23c7729c08322a503a1e8b45df193a426d8eddc516f819bded8d5ed0a2b(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82dc8e2bcd49cde38c40a135aa401c8a3b1d80e015e53089d603368b0858d7fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8885fca70e3a863d0babc56a9dbcbcb99a18de48ba5552a357d133f6fceb75fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e2fe742fed44d89227fe2ea980d88e06505527f21a27d439579b570b19225a7(
    value: typing.Optional[ApplicationSetMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ede94e758422f01449a1d604c076aa4d4c86da885b1a7c9eaa327aa70683159(
    *,
    generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    template: typing.Union[ApplicationSetSpecTemplate, typing.Dict[builtins.str, typing.Any]],
    go_template: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    strategy: typing.Optional[typing.Union[ApplicationSetSpecStrategy, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18f27778356d7bc45d903e37ac24c027253dd9307c3e4eedd46eb8f00f6b69a2(
    *,
    cluster_decision_resource: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    clusters: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusters, typing.Dict[builtins.str, typing.Any]]]]] = None,
    git: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGit, typing.Dict[builtins.str, typing.Any]]]]] = None,
    list: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListStruct, typing.Dict[builtins.str, typing.Any]]]]] = None,
    matrix: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrix, typing.Dict[builtins.str, typing.Any]]]]] = None,
    merge: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMerge, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pull_request: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequest, typing.Dict[builtins.str, typing.Any]]]]] = None,
    scm_provider: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProvider, typing.Dict[builtins.str, typing.Any]]]]] = None,
    selector: typing.Optional[typing.Union[ApplicationSetSpecGeneratorSelector, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13ae9c9570cd36c050eabda61034f61257365556cef8215fdbc8b5fe179fabbb(
    *,
    config_map_ref: builtins.str,
    label_selector: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector, typing.Dict[builtins.str, typing.Any]]] = None,
    name: typing.Optional[builtins.str] = None,
    requeue_after_seconds: typing.Optional[builtins.str] = None,
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
    values: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92d2004933491779511724ec945dc94e4494aeafd523edc75ef43cfd84b53bba(
    *,
    match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b358f5100b3b8a15d6309b61ebbae0d14314c94f33af85e06cea2474642e00a3(
    *,
    key: typing.Optional[builtins.str] = None,
    operator: typing.Optional[builtins.str] = None,
    values: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cb7a8462034012b1e72693a6ea643830969d0bfd76ca19a318346e31632f894(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4da6a5366ed77282aa4b23f0071b7cc517d88a9bed701ba138b14e1955bb9761(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b415e633013bbe094e88fc820fcc7a2a43f90814c53b154a6a5475810fad91bf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cba2d3d26b25c570a0db2a5aeefb75557c6fde0b0e97f426183fa6ec650acc9d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94a7c2fa4505442f2dcaad57fce9e6590ce6101ed88b5537723ae222726a9cae(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__271dcd7c5629e0e3ccdc6cdb31356e81aba3730a4605602e5147dc1c3c06b5fc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d0963c193cf6b0946e0ca8b79ea4fcd35dcb8e02c42811bd0d6f2916489b4b1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f5e2de8bdf6fc6d8f0b062daee81ddf94c54be02ddf569bd522afe020a3a522(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b340a2d60d76321b318aa0e28628a7e4734ec49fcf5f104611a77c966fe0d74(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c83bcf9de8ab75d9c8a7d40c60c6017446e1ce75eb22fa5b557f3f4cc3a87858(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__941c4942354141376c5e19fd9bc75f0ad633533d22396da20a5cb27506ae3814(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12e3504963cbc84e0ab4f5aec094760195fff13b3942daacf2367df7dfe0d7ee(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5e607c420bc90a369907a9fe45bce83ed437a6b0d4367b1ff08654673c30a2d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e707ca0372a9394f0426b5a5af7be451665058fd55c74254f31cbc7f4e560ea(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a14e65e4db35f2c786e680c366b39f8fc1a48d6ae7a99008adfcf2cf6dec88d(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f22edca681079c46ff084a1595fa521816455d74b8c8a1935c980a32a58bf6a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa75213c387c9318b08f26a00c6564d8a7e30aa20111339ede8477825b2eef05(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__132b12600c361bc42ff982f1af544f0171265e60f7579eedb7bf965bf945df2c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1677726511ca8632d7926f5bb329946e56b91a6998af3e7339b04c145aa55e87(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e686b811a0eb35800a1da4bcd1b3e136ad2cadec10f40d2bccceec7682e022fc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd4e337448cc797fccf7d0f163eacea57b9da9dbc4e60a9040701ca719ab1962(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__826463df23d08019a3298eb2897ad675af3df8317a59f1b9db0117f051e42ac7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7796d7bbd8017653e4451feb08de71ab6d9cb8d48c5767bd49f829cf10bbbffc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f12c0e488279e3bdfa580c8ac11ac58c3b74ea1ddbef28ef4d66e95afcf0b43(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__393b8b1c963631b0d46acf7f9d34f0b919b6b762e9a0c253143d7c302df36dbf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__500dacbf08d1d63de53d2e4346103bcb49615c4babb51c576d8561a43a04d4c3(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2332f89fc1b6a6b4876d2692df79cbdd62872f628711aa54105a0f59a0dede53(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19b2d7e36999068309ec7e05a29efe88cc26e82d3037224da6144a0a4a4ccd0c(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52e815b1e4d32e23c697d8313be5697514812341512efed213fe585cbd72b008(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34c5a36647a3c089b567b6c70d9495d33255406eda359e0d2bdf39868111a44e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83897102553048d1db74ab5d894ff6c904dc508452aa3159bd4df8115b8cc82a(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae8d3c5aa9d047080045ef200b0a6b1b434b20904c92319fecf0268e7abe8332(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a1d6102a65b730929ab16a952d4ca8d54a24e822d1ae1caef1fe387cba30d02(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf2b4bd51da229bd3458944528151cf38078e10e372a518e79d8e6125112b7c7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0953ebf51f42d170acaae0527d7cf93d1c76c5ddce54e597f40c96bea1f0bcc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d593c003bb19f15d4476270f6a6425f5eadc73bbb76147aea167f7771a23e074(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b17504741556e6f1099c3476719eb95aa2bbff0eb0c3f17d8beac6cd076d652d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__282dc7f8f00db608185e19ca8a5d74f1f0ca24c6226384b55ff937803eceb074(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3227befa4d6641ee08514854c5f95dc7274c3ec549e945da1c9bfa100136045(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdae4eb34ec2c7353fc62876f687d9557b09af362c0e944088f74c4e13afe447(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7994f734bdf4fb0aa37839f80f4a1c70a9b0ab9314dd282be65bd4a4c48fc946(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a84921063efdbd9537365602337f094643f2b2ac1455144a819f11e5e546c6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ca708fc910d3f1deac24c2263f4afa4c2c7a1dae91b68517e221b66560c402a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43a2a0102c3b9cbb9d7f35ad23a683756c8cf29686c847cfedda18bd413d0c6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a88948bc2ddbbf3f087d759362808664540809b02e1c2eb9ca50c1893e5b0d1a(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b761666bfc8773c369aa9227c9fe9090a6980657994340f4ca5a63f078258486(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__999715d5d1a4372bb1b6015b1a44e42c1f2d6b1641a9f66a45642a601c5aabe1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf56a525a6a831e66dd5903b27a70584ddb54891b41b47a3a9e619069ed91e8f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__caa29a72371b8a6ff641f0785961009981518319626015edf1a936394f7fc0dd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94a6ba83572d6d5cb233513ff26b6bcf5311b0f4d5f0fb1b937ceb8376d682c4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4cabd6a563cae345ca955d41e1593b2de7f94ad3370169281132f1a9442851f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d1811d252bfbba6da049e63be6789010035a8fc94917a1706b94d6d6894baab(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18c20e214e9912dbf1933ffaa5712a8048ff3e7b84cb4b8685f07f933fbbcccf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d88b4632b14fc33d728590cc63360f9a418b885831229c21350943e617196e26(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d4b7f7777854eedc5d98b22428272703e5198389c1dce702adfbc44f31281a9(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24f23b40b2d0cf6ef6a56fb53627e53bbb3a3f493a7c03b27c81c15de834cd23(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__640feb5ef2af1fbebfce8ca9248ad6b4e61127735eb4d95a4b8de65093ca76c3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c23968c4fd52f67e471b7a0058d20b58bdb03e6bd97399d0ebee6176cf1993b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65603ef14ffce208363eee94695c3c6b75b1dee2829c4aac7845e72c18500d75(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cb25a1bac1419190356deb53b13c8add963cd5ae6730adae047b7ef89a7fec9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c926f526de6085b4c4ceaca6f71d56ed1a025ce2a305f5e84f50d963449491c(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56a3e3ce2b9024f1c688c692337247e582aaffb8e7b0674b45b0590e0370a66d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6777bef9548ef3545c3cd10663afb8a02893e02f9d1549ddb4323a2ed15a5c85(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07f059fcc3afe41a8f9e8d565cbae5ea94e9752fe5a731fbb7a4e75eff224435(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01082f7fd56b52dfee69657755b7e2f8207b54f9175589eac1b5952b3a7df21c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da82716d454e75be1a565758d9505f2674c46a46240eee7cc25cc1d0caeb389f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aabe7ca79f18169710c3fa3efb1e2d3527e16e44070ff2f2d5a1e35420e31c84(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f63ded7ecce3ddc500412e340af9f136ff966c8f4fa63cb6cf9cc7b736063d16(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27c766c1e3d5a4c197cc622c68053cd25e3e667ce4f2a2c2000459fff4261770(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d69b1c7e892acf98b1a58ebc8502b4a7e3ced9f48af109511af0d6be46f63d5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c899c43c4ead44f8766d9c6db0f7e7998bb8735efacfae258f7acabd93fcdd2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc97c429e27c0139d416ec47e7cf1c0e0a2983cb49a2c9ed039a196068055083(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee7cf8b4e7b55ad06d9b0406c155b93ed2d639f455f2b7abcd5815e84c055458(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4335cdea6d527a38b49f0173147c8c7d39df8f5808ff93a8736636b7697683f2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d889776854ad650645afa62c5654d000942b5781d91ceda30d1279321fc24ac3(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53501073eb03dd23cbff1191722b1a9d1c421732fa67d0d67346175ce0b26b63(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ee44495e3ea8438d626b49d3d117b6898ad0321a5a4f60582a9eb81842de319(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__303dc7bf35140957e4b5c2d011f5c85e458c7cb961b9dc94515f01e37fce7ba1(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c12357726790385801bbccb1d0f4e8e49cc11eb5e40c55bc224ba8b4afbfe235(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfcd473ab25e96ca4ce6811dbb8b08aaf9665d3b7b3638a598f8eb1d00235048(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d30519d2172896f7ce81cf0ee8827872086365e43ac19e8ae9703b2ea32ced64(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ca9ad1f6f1db9376924e3f85ab9aa62c2f238e571a7ae63a677b8ddea39a599(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bc7648f4140687e1a92e1fae86f07d7a58611b59a4a6e6c08d66a68cf4a99d5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ed29c09aaa90f33677f3159de481599417903d9892d13209dc3f1f10015080c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc5a75231530c8d8b5656e73e30a62910215560eef2a6fbabda540f7fcc0cece(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48a33720a40e9f13ab03d746d4fd16d7f1f4028cc7d9cc35d384ee7120eb063b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ab0ec8ec6d71b695351fdbd61c04d6990f724e1b0d07bfa5f803fd385987674(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcb1f0b218e873ba84d61ac822eed02d23234e7b785e5aeba48d5975d12f3fd5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe23b0c90f7601c5a834b249001a18eadff22151ffed5bab4b26fd7cecac4729(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8717eea364a08f01855f54dccb53c47bba55ff98c78034881af61382ce8cb87(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03eb441e157f40fa069c687fc2e8cf636b170448885dc3f23c8546cb00a3ea88(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__641dfb34c22632246784915536b151cfd407b53cc65498543bbb70d94f5026ca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__092d45c1db07d12ec33bbd31ffcbfdf7046bbd16a7124ccd8dd0248d66080e09(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc2ea81ba648850b9f72479771a7af2b427ab6a658b44362b543633a5349391e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__748a508b018063a71b6b8ac22eeefe798fa135c98c9e5540c4bcea55ce2a748a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f401093fadb2a201a5c9f99ba39f659c2c75fd5e0dc95d4863af1ec985284852(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a190aa886bc06dc23fb4abe467c62863b04ff69b7b2c7a2b8e812e395f15439(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c406564b19fc46b923e4f6ed81f6f81920f07ccc9e9a40bd1f69c5ceb827b37(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4bfb1ff2a37843e3ef0fab2258c68492c7d0608e9736efdd526ed1a7e21df67(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f940ac9e6b26483f5443609f4b189073dfe011a6ff9d731cc4dbcc22b39599b4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8ebc1ae485a85e1fcb40c7cda1d522d5a83384ea0e0c6522a71e31d9a0546e6(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6281493b7a172d0009950f5d95f7e25a3af6e311116653bc0343b978b0eb5e3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dd64af1da515615f471d1af54b8bf512e2dd8088aa2e4c6347c0dce010232b5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33fa597ddec07e065db10211875a3645e37d9ecb2576a8f5644decccf254a8bd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e502ae76843fdf8297bd5d66cc82e7d14d4aa78387232517b216d6975c7c77b5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__535e68d2ac5d732b69d2f5f2fd6389d4bd18f0d79233fca5a3f2a0e7747b94db(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aeab63461dd8c839fbbddf3dc73d682415976c83f4e5bb92bcce169dee6d8649(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26993b461b8a944fc6ff549fedb8ef2ab723800eff2d7dc658cccdc5d718cb9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2edcfc840a5f6c9ea685babe6a1d5bbe0c6ac229ae9518ee65256e94d886314(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d568d10e63f0b1b79b9d18f24bd6cc095c49081cc2c56f09a63a00d6e7b97346(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb66e33a5c66f4483c2db4925d77be83e5c3fe0c6a76ee51fcaabd861e0b28b7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ac0fcf9e9ed4a0ff7adad182af87e2a18557bc5d7e9dc17f743a6465fa52e29(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba03c2388ebb57b395529453878ab989763ba9beea06769f6aa85f47b0534a9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__282e1bc5d89c8efa2abce0f9aed018f55640fac5103a1aded8f45d72cb13eecf(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__508082b24ceaf69e3482266476b14da3c1ccb2cf85584122ab85e323ae4c7067(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87a4ab827f8bd7c10879f65efe73f24cc6c2b86733a304c06c541ac0e661ea01(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1fa6251881ffdc9d2fd8ccdc88b1017a0fcd872de3fabf7c6d4482a55314c8e(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7df4fa01b7c7ebcc8e921aaffa51b3afeaf1c74813eed6d974fbeaa79d1e0d3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1acf95dbe5a50ac58fc61c6facdf6063096856b652b59f2b37a9df2648b50ec7(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efb51d46f0254c00653eb5e9b912e798e5e931b42c689f197c2dfd45403d173e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9d35365e4033f991ea008692efb8aec3cc201e68dc715d4f95d3d8a462df161(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__407a633125acb4b46c41f07bc43a32e5abbd0c7bb1e87c1150dfcb26dcf1526c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7debc38719b59bf29979d3877019477eb6d6dc166c88333c66de073e0024f1d4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e32ef244f1a0f0a3fc7d7a205ddb9bb796ba0a3e931d80cf335cd03a189cb2ce(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fac7ef4da7f5f85714e4f4091d5efbd91f374b0efa4b50f57c4c2da55d3ee92(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acef3d14c6206f0a9a75b720378712054cada41c9f0a7e94cea39ed0311b0214(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1505725acd2af99f3ade9739434806b913f0fdb302583b37be8dd7af8fd88ecf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d7b7ee1b19078a0bc71f69bcdfc4a2a4cbc6706d4ef71183b5a5126f48adafa(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca2ed3fcc92344e176fa275d5ea90aa2a7a0e963c60a1b0f16718da9a7079806(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d09edf97f0cae689437b28ffa7113ad305210613d2c8481ae17aca6bd677510(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__322c59e9c914c2bc2bb03e95041b88cc51006e4b8df68a49b3f6227115eeba1e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5633cc204cdb7b7ac0e72cf26646e593dea8d04e0aa2f68221fe770307c820d9(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1906085b0aca31d57913c36aa22dd0422a533b19bc60699c8688b530f3f4c319(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7463bd4a7233ac408d9f534c34e7b9436f131f0e193ecb136069a6f4e70030c2(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3930f0481099b9bce4fb09e978a6ef637f07efe892938ef43683862935bcae4c(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a41652fdb7f93257b86eb161e342f42e7ca5cb1788fe9c883aa93ae88c1ce40(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f22bc04872031862f3350235ef11fb2e8cedaf775d5679546cad1cd7e037a15d(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a562d8018f89d4d3110101b387fafb856eb9a216af86f06cb7fb18dfdeec38b(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__605f92c62a9de68737f6d7d4d64ffe29382d305506c0347f095fa4a1906b8a23(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0df24b378da624480222509fdf3291e93972f75fdd2e6ae310cb7aab16c9fdf(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f556a6454348d9dc52daae545215292d643332e26c816499c4872e6c5295b46(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ddc17e09ebf06fd741ee2433b476d7bc2628f214296b24a4e7767beab9eaa26(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__add9137b9f9d316a052ad6d4921c9220cbef539fe333c2c9c41992eda1fbfc3d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9135bb78d082362eae0b66eaa4f86820988a82d3c9418e19b80748f2bc87ea33(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88c4f71e0a8ee4a776ece959866377eacdcee62e79409223cf74c77e2fbdf8d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcf17da1134c211e863774edbcd4be8243189b51d1ba2c10e537291ffc1673de(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5319f196cd7c160832893ffc6321e70603858af5bae81203e4213cc1e436f90(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fb82a5662883799a100235f299963f267ce4e55b29b92683cdc9259edc83823(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__907c03b8d8182bfe95ac0abf0f5f7f2848bf2b75c93e42a9dd0c5eaa335c61b0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf4a7ad7782ee7f7c011a51f34767720dded77f4298a933b9a52f0a0fd1db727(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__716c685d163bf1c5ea5240336d4097d36af97df71a474bab8703e16e6be77a21(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12add44af06e5ab3ba72e56c8c434c4f50f21de11dcd182699b82bbceb5262b1(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbf828cb126baeb8250cee9a62e786cee5bf762a5432e4d32d4a0f0a3b92d823(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__728344cb93b680701e3835662f77d7e536de9890491d625a0eb93e5427de51e2(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3208ca6f949851e8873a9a064552a98da9d5936b735dae7db4b1374dca954b6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da57095569b8a9de87b47ee1f4b15aeca13c2432da866e9b4508be6d4b32f0e4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62950d5664c76c892767fb133cbe2b472442b11a7f98e74a4ff74d329c92c497(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dfaa94ccf1c197054e70924297ab6273219047500ed42025d74c3aa8f624c0b(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19d68d49437a0d556eb9a2a6ecba8130ae0a41033353b44cd20162a5d97e4c60(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a628c53677b10a6e93dabba1a18e9351f84bd78312dedf5e4937b3bda06add4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a146a7fa815b9643164637ff0bad60111415cb17e8f4fd9d4e465f54e8204718(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19f92935000edb8f959b350e5fdbbf75847c75d67a01749f7fc6834115272164(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2016e1d748d97a84212f5294f1890fdb7cd6eda8ed7b068e10c577af21da03e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c537abeaae57e10dcd6ce8b485b80898ee71855e00350fa84f565eb62397fc60(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5de37d831738e1612dcf62e9dbd51fecd968c9e28e8498efa05ed7a377546ed8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b42582f1c3cc5f367c2dfbcd53169cb2eb345f0578d47f36a174b309dd439ae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c468f628b68f9e31cc7f585b393f3c37ad4f075d9ae5394c3f9a89f21854ac3a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5f99ff9326430882136678a4ae92bc9a4647ef9b6489e40ac7c3633bba3d5fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d50c59c9d6d3a70341d695bf6c2c83e40490151338b80387174aa25d4ad1757a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c78939a05fe5fb17485a03cd372b6a801803f0056c4336182b8a28f46b1857d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3017ad83393e1821ca0a72bcd5352c15f1120d7d1add2f5ade0cf267327e039(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a9ccb8e03cb5abed1ab890041ef96b6a131c613a859d1be051cd2e742f0d3af(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__258394ba2e7cf5159d4e18d41d6c9e24c7e32cf1421056235539c9d6c78cf612(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae7fbfd7eeea1a6e387069809154613b40d6fec76b2a57db9b1f39dbf649cbeb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1df1346e7ea4c01f2a3145560020a39e0a44dd816757147dfc0d250b04e1c116(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7dd517c33ec81d21ab7f6ce01642403758d96b38197b86ed7e95cf5ec887f9af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c03aee7f0e05d35552c0c446dbf010b168cf6d16041728a1a43c0e09e722fe7c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4aa39f649c3ac5b21bc4cc8cc77791f4729d791298043ba6c195f9fa5e48af5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__805575ea73af5403ce8c87ef919598f72d528ff9894d00130752d0358cd2a04f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a62d53bd4e957b15e427c33e38e84013d89c25b314db4c59b4d20149fe0dea76(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46fbf4487347f9cd5c6d50e4546e8e174e680d9eba55ad5062b740a99cf6b51e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__501b93da881ab300ffc4e36414ff284dd275347cf5d78b00cedba17e0ed51029(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b38f66c95ab866c708943cba86b802d5d2ea65c9259c4161f68fd07b9082d2da(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9811cd64fc260bd94b2b7bcae2dba89b554be0fb2e4c95e4a554eb5c60f13af(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37420fe2af22f6b6bd314035f377c5086dcfa3059a467deea04f827ef1b83e89(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1120fa37ee01b88df9c0dd09355d68263a25484ea8ef6ca5fed137df6255d813(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e41c5fa4945484ea9b2cfc20519286b7e3722b88f7dc8d6693dd5eee66668ff9(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c286cb90601d7d074cb66f54d86c085403f671060c0ee6297e09aa7be2e80025(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a322769a119dcf461a69f3e71b69b1497dfe4ef3f875e04fb03910abe01b14ec(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3d5a742532fb3b705a41ce79f50077e52c372c69912573dd9bbf574faf9ca8c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e94169d1e15996d25902d03126d29388a1e866cd4e5181b62c75e2b0b7c4997(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88015c62b6f82bbbc6e6c63a0aaec294b81807c61fcbcc2f93bfb0b813406f97(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44e3968828ec6d9ae256f685e0c1491d8bf4d480da8c1f54efbdb226b1b0a46a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ecd5a90d3e88b40f2407265129e5c5511b30f46de4112a8f9381e92ab8cf7ff4(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a72bf2094f6c7a19c62f606ce6051f1b8f5378230c6d532aa0c8d75d24971a33(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfc415608b11a197e723406cea65101e49974dcf069a7cc9648124913605e882(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72d9f746a7c7a784f1bc257fe3d11d34b5f34a55625058058de4dc8ecab09e70(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9e15f8881d4743f0b298e19d7d7a0b81cae9bb2abf641cbdb9a66351a2ddd26(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e92423e3473153d2c0951030555f4c3823c1021ccef027c3e6af21585fca64de(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5b94a82e129547479f4b12efa4d2056eaaa1e75e8a7e18e9f13e1d8073bd943(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5544e2c6a73a00f4383bb18abe38d0eace62a5d46515fa4d4d51f7c78138b46(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53fe3df28d39ab353c462734932424fb63207e0c53239d14d4c3c275aab418f3(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f97dcd96c217c0354854b4512b1bc2e7885c81d9d3cac4f5fa4ef29a5a30dd3(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fee4dd18e590e43ff7315313dd056dd1ddd209c4934f55ffbde889bfc422f24a(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d5a42fe7d017b8841eb4f549967622adeea1605aef2c4dd13dac53fb17bad55(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0614bd03b41b87ef1f3e882a1445dcb974ec29bc40bad1227d93b995e805c05(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__626e508d48e304c2e184e062d24e28f1381bf3c5d3af8ea36bf64091c04abc9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9f973cb55d7a1b430b41f3c24f7641191a8d26a1d3259af023ea4d8ef7e53df(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ab85bc3da5c1f51a178828a5d806e5a157fdee26739505340b372511aa5e70b(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8dba350f94fb0dda973deb068de2c7e2ce5c69a2efb32b44b9d48b4d2bfdf1c9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77897ae77c79b40c76116079a2c677cbcab64670c036eb6286b6c60afc0380a8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24e2aa6212f01f6423b8b6c302f5da8fa956cd43734d771f15913cbefaeeedba(
    value: typing.Optional[ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec98e1ea0caa6ad565396a471155fdbf64759a9274bc45dc9618958e449ee6e7(
    *,
    enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    selector: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersSelector, typing.Dict[builtins.str, typing.Any]]] = None,
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
    values: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe8a642c3fc7950aa7454c1849ce7f5243befe8089ef68b3c269f98dab53a289(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57288c15f52a92d0ee330c31a77e6c4f79f276c4e0ad88195224733ed9cace04(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0a1cc4b71cd563f0f994b2190e21df597343bd93ca8d40d3f075bdba0af13b8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa20281b0062691a1dd5105b6eaeefaec481378952d22d5456a754345f301ef1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__514324460866e9fa7bdf3851e5a4bb018ea00e4d6b245b098fc23c203d8989d3(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d98a5ae9c8c864debb48ae03d0c1c399b9d32927ab1be3e1ee604e389eb9785(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClusters]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1dca7e4e366db8fe862531b7ad53f2ea08998e6b3719f9694d3c8aef3b1b0ab(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa9f37c88302f928db0393410cf44e2105ea1c6611e2be5f4b053cd9818f2d6f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84264cde8b57b353f67e6999262c26eb94f4576bd0f08c7a77387a5f3ef837a2(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cf7f56c39c9ba5bc08f3e0a24d9e8b62ca11e5e94ccb26ea47a80df1fab9d61(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClusters]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c856793268fc9b82863ea74a2b3f9545fefeb3f395eef2cf60f23e0739d8239(
    *,
    match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c04a200d8aec4b283986d501cd304bf72f85bfc1c806a593b7de66a6e8e6bee(
    *,
    key: typing.Optional[builtins.str] = None,
    operator: typing.Optional[builtins.str] = None,
    values: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0f92e55402ff9cb1e878e2391079cbdad10419ddb340799b8c559a9760da794(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f207978b425ad1259698eb68acd556f7b505e6c2f95838872316097f0c5017d8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3acd0e4337aa3e9271809d2ac501c2dd0bd49eb0cf251ca957665e88301180f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18db6e33810d909a608ea9238c1fb23d709386ee0a4d47c612839e98bcbdb46a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4230b25f07cc988193a779472ba66b097f813c0a908ff9d2c93c0fa9b1f76021(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc6640080d42e34a69618715a58d9f55b352bb9aef48f76ac45b007baa099b1e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34ea4cbe6bc33b274022fa6ba3e3e0deeca6933d0615ee13ca856249f5e7c417(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18f64a4a448a347bf91fde07e55377b05ba096388badee4adf39caa3c33bbe3e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52ce8967f10da98b7efc1c70d1abfeaeefbb1b439273b4fa6d99a04aab870726(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8826855a45aa609170dd549c9042db0ae086fab357dd4d620557c26a6f7e5d43(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c007837d871c18c97cb244755eb6ae3bf04edee900afac3cc84548722a27605a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersSelectorMatchExpressions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ad5c5f2c3cb58826fc1cd220f05f9f48a16986235c712086689abeef53de958(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1aa706556b4ccc115dfa563e83b39147c916f9bfa0322b06d7c6289390c17d91(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f100c4eb9344e60fc54e9b1bbdb5da0a0fe6881a26f984dc113600fb992b1fe(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b281875083010f98ed128ee591e312bd098a4234bbedd28ef7da903acfe01d6(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersSelector],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d7fc271c3d6532954df739aa82929f37f73dba3eb4c0c0f6e6a765287e87abf(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc896ed89f16289580d158d82d4338b0db09d20fb5019aa92ccd101b221065ce(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f1b3186d8638089e00b47f566f34c6a758958645d25af37eba3db7d3667fb07(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cab16af8b783f6d59a9c84757098cb267d9c08b53cdf4307bb871c8cb6f19605(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c78cf95831daffc6c3ef2c6c06a278b833ee422271726ffecad772c7bf8c7ac(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa9cf997b8866c94d82f74decdb0768e3c66000c80714f3dc24cb1f72aa75a45(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43d21b4f5cb6a30783540f93ec94a39c4a8e73cd2928c8649c0666a1c916fd1a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1478bc4e23a9acebd003522d17037463d8d553408de5a2b7bb1ffe913e41541b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60565c2c215d62ad75027ef35251aa5fbd9fc50a88841506e7d4bdd136935b47(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f6854b845169d5b770786de19ea1c5d243050b46e260dab791ec1d5ccccebba(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31642cbc0d361f510693bedf3999341b5b299c715898795dfae4e101b02394ab(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78e361edd06ac633945ef29c1ee04735517f0c4140707bc3b6f73cf629ed85e2(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3491b80a5e45ae5b1e9b9d7c4a6f2420247ab75b8af56c2321acb287ce3985be(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ecdc5202abe31c414cf639612e3a7472e8c54026a239c8be5fbc057077f8c1c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__619df85c839b8a6b45c39a3848bcf1aa9f0dd080991ad8c846ea9a077640c5ab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f2006a21a1515e066046c5c83497fa49d981d5d9b79c180c0c0fe28f7145832(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f008f931db49a7d4eecde637b2f06975024c7c8ba45060621faec5dead965f1d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7268188f38f5f862e0918f869ab06e0989188f97dcc2573251285910447d4f86(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3a1bf6adf7fe08c3e9f26600a1f8bcdcf8f740b73d0cdb9b807a8bce7464886(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5414a3b11b56fb3053792708161f0f5c80506db5ffe7049b952bf8f0d86b325f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ad93fcd0a5e5dda4dd0886ee87d517f664f8dda45ece11953908ce1a4f5aef2(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3c020cfff1172ef56b71ef4dd73062c8394517f6e6759ec63be4c46fd935618(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06b86631b1effbea1bea0930b68352b28f5cc85e2b32ba8a3d570075c8c42847(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07efef27759c61f464f95e0e987d79eda8050aa93a9e5b4d409fec4ea1c10253(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2431910c4c9426f22dfd7d351de2127aeb838d5ab1fbf3fb170d70345ad2a05(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dea59e7e047d096a23b44cfe37d9803129e4db5846137d7f2d8582b7057ae9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02c1428591162ddbb174371dc935cec71a60f86522720644237ad018c608bc3e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85e9aea0a4b8ba93aa314ea197afcc0a81c3dec94ae518ca8ff2aaa8c42de8de(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__850c35c1a42846a6686925f66fd0e1d67545853a284b5649b4b9e5697029c532(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__918aeaa709e919672cfa26754bd024de867f18dab4bec94cfce7158ade5fad70(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a163584f81426794da04debe98e5d1366730344540e326a5d1c9c033176e529d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6927317a20cfb9e1a293a5b031e777bfcf73723dd232a8fbd1e612c4232470a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a55eb791cf9f985574a0ff00412fb6de6bc0c7ba3461df917bcfb9b2b830d02f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1b3dc155c403deb52c724ed27fb5745bbeb14008f3bd0cb1872eb64309bf7ee(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d1cde93ace2752b82adc7e48d3e38cb69c943479e208c3bb23271876f14a987(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b52469d07024d4a5807bc484f5beb32408fbb7877a890898a9470bbe877aa99f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26e0895b90b8e66b30ed9bfd21f1c7d7dfdf968e2bc8655b484f45bc866b233e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b85ed052e3883702e4ffaae965813d564e6e1b558e687f929b16d4350b5a26c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__472188bb055b58513ee5e03ae05fcc16dbf03275916e66964a361020c57221aa(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f212479867dcdc75d15b5a007d66078eae711e3bb363ee184def55cbb003c8d3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7203830454f45961ea74c9a85006dc3b2591534e1308bc410100cb88ba739271(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4b3110e002514bd64e6d7cba6b2ce64f26603eac392d5d43be824bc64fa4b86(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b31687c02512a08627fc431a9a6edfaf4a7a326f26977dd2a6c66063b823b29d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ac5bd773af6b9deca522849061d24ce56e668b625313f115fe1a849d224f570(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1f4393785c9d48482657ba982b99cc913a256411e3a650c826e4914bb66398d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__254f1af9b8d6e8b62421b519e5a4c414d5c81cc432f5b3004876a4038d343dff(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28466beff9ddc31dbfd10170a511120d184e73d98f476d3dbd775f85ad22eb56(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0817b8818e4da3307d7fb74b4cfeebb95876e6fddb21dc5fc3e0aaf259a7d32d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e32742f4c2f6d6d7e85055bc0008e0045a35ce85a233633e0bfa785d4a44be0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b2384eb8505838e8d32d28d45b5fcde3dc40d98027d6f9f1ccb60266a00dca9b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e2cc54b713c2ce5da4eb60d4606c0d6027b80c522a7878a33485dc240af3694(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77ab5d44dc515392c5f278dd3af7c7948a7e13931b76912d907ec7beecf07c8(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3d86b41cb312c007ba40c52190e1f71b441cdf9a8b5f8a605b068965f43e881(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a5e487951d0b8ce0326b6991cefaf5899a3b9f423d64f63bd44b0fd381d33dd(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__123d8201875cb4ab0bda1bb801af2a90acf86cb60e85b43f8399ad891d94494c(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad9b574b85c293a775f7339f8748180dedbc6ace21a25c17998b579d43388092(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__023980a85c0a3c42ef2bb55944e6460102670007086f3586f6de34915f5abe7c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6982b1a44afbbe5232f902d07c33c6921125e57545fdbda9db5a0d81db602d7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3e925270517b8f299506aaef26d725fc70110afeed0477a13fb2c1bc1d556c9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdddf8801f7ae2ff33972df0a227928f9704424d5723604b1a7a6dd9c831cda9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8083cc797de1e6513ec6a50e4a5aa53b3243cc9f143e132cf17ce3908f7f74f7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c4b82649dd95cdb0cd0939c66c969a45dbb0bfc6eb36592d1b280b5d4e58257(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea18320ee6af3f5b07e8316af27ae90faed3ec00acc3151a96c82340d2f489aa(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faafae9cad0246d07f64d12846cd55da8383ba9d2c7cde739dadcc00c3e48595(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7238d7886ef06132ece26cd5e4e43f4afa16863bac4fb6e9142e09eb68d0fa4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77c9165f823ad668ea21393299d0e9d5771f149140c1d48cfd469176146257b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f5b924024a2fe2fb61789b1dbfb2dfc6348df982a48ab1d74aacf7fca91c559(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db672a325b848b87d3250d59c3ce596e4247d08e8a08e3981da0be58429156df(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45962963b18442e4b646dff625b177bd95bbea155250732ba9a58342e3419105(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__168ed651030dc42c1d07bd1d6126c57c6122e0b0c30c4037774d885693d1d191(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d95792e78418cbb8a0c5b925449f4da45a559b0b6c5029d200d289fc0f8b4b2d(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2ee86cc6a1de2044cb69f72c94ed614b18ee0956502ba725f0499683d761148(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__674c65a784cc0c52f26bc07e08638069b2eaf8c26f448ce9eb7c60d8b2d42b2c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70f152ace30ba20dbf6cb8ee2f25a24fca1f339a34593077ceb102c79b7caf8b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2505d87551bc8a253ec2a7d77a4bc92ead830c74fcb5f5140910b49f9e1d3e2f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10518511fa508739b5efa636824c5291c557acd580e7b6d3dede6d9c6c2ae2cc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fa2c26eae143af38ba51abb4952cdbc7e39fec27d50a0230e78cb20b3889b3a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23b86a321b32b92fd469efa21bc7d42934764189148a77a7ef1f489aec4d30f1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cf517506a57fe7d2b54ae43fef1a62f4dd65da335c2a5a930b6881378c3452a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b134ac43576755e6accf2b34851132a345b308f4c75ecd62caa5afc279103b1a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d13d99fadc58ea28ea252cf4ff6f46fb1eb321aa3b6a006a3ec09b0d8836d2ae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77d69ef6d9c553de9f19d837e279dc8f65f08dddf7407c8eaa859965beb53ab7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e48259d1f7583b0d5f8a19708fe55a946c5d674b4c368e649600e455c0faa2a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab72a1acc81ed749ae2f63625f64c3db092abc4a2abeb96e63d31cc699c61221(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a29527dc7aec99ad8f9f195fe71f2ecccbf6a47e73527f2b4f97b7596b6d505(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2115ed35b46930ef2e1f43310d4f83704f099ddca0136bdbbbedb8ae22bc4837(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2a428e1304805f002e44d3a9efbac2e159094bd0c9b0acdb9152e6d25116793(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5dc4ff595eb9ca936face0acfba663a36cabe5c524b6ede6739ca09a2459a5f(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d733658ce57f5370c4492082271231f02edfb7cdbabaa5dfb28d64a236a7a077(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__179da913b4aeeab082a2112a9c9c0c749e08d82c41023bad35182a64525147c7(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cf33e4d27826ba7716430b24179403839f48593ba44007d20de25a1d996ccbc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97906841fe4681cd51d80adf7b70317f55eb6369540974bbd93e267f6e9bd30c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e201d756a17abc9c7720192fd8effbd86dabbc016b64ffb05e166513dbc8f0a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd47cfbc2737ccaf8b6a89feb2570ca7c11237452fc8877fc8380f74ab109765(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__615eaac752d76041ed811c379299036fa9dd631c31e48b4ad520fcd0206550fa(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f97ab78e33c0c96eb0fcc971cdf501e6cb2bbe0646471d4461cdb03bfcda5148(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f87b41b184ed22d95b76c75fa9f0f0ff74ee423bd2d666284e055ed9ddfe7766(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d82efdb23a6af198b38d50f3f845816869b3ea700dc3df62f20b126422afef5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b0604dab2c6783b05cac2e75970007dacbcb734a66cad447fc8466e5fe9d8af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cbc4ee6544dc024eb52f913c335a968a8d2d6dcaf81b7f977c07d3b85d2bfe9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7721b0832d06b7d46a829812eacf4320eaa71b9715246b835c8efe1fb3d5383a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__345afd2a0c2fb5db340fa14f0f3e6cc8b017081883330b37586e2373281df8c9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__584fa98dfabb152cbdb5d2a0e36d4406a2c6bd7c815aaeaa1000d3dbb2c3ee47(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b97892242a503a1f21ea541c9e5066086cc015c79a37f034b1ee922e29e16b42(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1129cbcc80a721ecbdc0739a342d5eb235cb18954a21d6649bbf683da41165db(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4019bb30ac104e14e9d491e395b6bd9005037a147d388d84f4ebc9fadda941b6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a2e33008e4784f6a240a899ce3fc288d9ea28c868acdd02ed7eb3e70ab83de4(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9af13b15207710aa060f3af5127533c941756f9616569af4f8eae08f016b59a5(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89e3df03d9a653c714c8b3c271d82a28a34a4ed98a765437671e0f99dcbf71a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b3584c8fc8c824ecd0556bc335d4f769ccd6dd2eaa17c26d2ed079f68ebd253(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d48635012384a742478783f547d06de9346c0c1b703a3f8ee595715b7950a18b(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62ffc1aa2bcba6a79a555eb798de79ff05c205b28cf8a7cf13dcc3468e0eb07d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__505b890624ba44e2e9de22b01cdf5ade5e5ae199becc3097eba1c4a223e406cd(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7415390e249815e12ac1dd76a9794d6e5b6dce8ecaacda2309a33cf0bb0a818d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e02b351c6269dd77484831deae0abb0c10f630d536731da170fc8e881d9d6f24(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a729a93d5cc41fb6fd65c821b1a5b1f2b3b59fbd2e61ea819dfa2203cc15afe7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__addfa95d5fc90adcd5d75eb80ce89504b760c1d6658cda8f1915fb03ea0c423f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a2d6e06a231a1d66034928ad7e273d088c08f3c6378159f4ebb76f1428cfdda(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2af6e2b6130870c7c53652da89745f6a4bd4ac4265afb18707413311410612a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d96eb1d4548d7c0791e4ba8519033cbddd2536884ef65d290a877cd28358b5a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1149692fea49cd9ab8f4f5b8d5ee241a3deee13f1690ce72b6b1992c7349e4a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a5eae0033294d971930c76e3148bf27cfbbb5cf47c05a8423ca3859223ad08d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b5a79374b72d5b84cf49bbcf37bc8ec471a1f188c260c4ed89792bd7d45254f(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45084c9d03b3a5c40e40df679bdcd0519cf5fae94b961fff8b7d5a52a1aebf11(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a3a0d6a760066ecfee566228391b157a1d41c6713339c914c5062d9998e656e(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4b7a0411049064b2934924d8e226e8c1861df8c34a5f453629a5d4b8c93758d(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f40e24cfbdf7fa5344b058d7db9988942a2c702f4f1ad81cd0d9bd1a784a48a(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a107a980db9ef935cc2962b2b324ee82d10b5d09d0a65344715c2df86f97cdf7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6928e0313e43a40d7bd00cc05fe2312c576630db6dbeadc51774c9fbc717f2b1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aff4d457052392f7e0bcd37746bbb71403469953a85edf11a81453a2abdec705(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e4c6608a8c5ce0e0371c9e57538dd3f7b557ab2a20d8d2c4858df637b852f0b(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02f193007ba75416250530f322577bf536f97c5bb6dbfaeade49b45c5bdb6ee6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__209933d3060386b1277fa4c56656ab5cfea31f097fc4b01f8baa16ec0d2214c8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6c04a94f966599aaf0901e154d1df02c43206147025fe974bc1c4a5731d04f3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5c02632716dcefc781989cc7f21179ce2365be94e5b1ce5f4f478a440cc28db(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94e0b01a53883b55b44b64a294e1ee1bd792759aae63d65480bd825984f4b999(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__899d337e3ae3053ca4e002569b87fdd40b49d2854e67b710dd5f3bf7f6355726(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b037a9e8ac1af4a3327edb3c455ff34276b113a2dec6e07b0b8611dac001cb74(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4bf2e2311327036beabd3e3f577bdce4562139af2da053e588426e1a2bd7367(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f4052bcb2c001ef02435b1820c309ac121ccd9c247387553d5bd4e01e66d3fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5480d256671f1080dbc2446d383cbee067198fb9c0f17105de6fe9254b8ab61(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e3d151c21fbd04a299c323f897cb1a8cca94c067f899f7914b06ae36c935b7f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae1e5cf190c41c55733a406f9213579c597d7d83afa34d6064df5e4c2d6375a9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__358b3c40910fa4375c79eb43efe620445634381cae69d32696454f4893cf453e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ffdf9965117df9eeebbcf1701ac91e1b257c0603fd8d8e98fc147108b1326d0(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a0054579afca29c19f1b29bff51fd4b47bb7f6065a7056500e0803087c49ce9(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c19ce20f20f7b693d6217134ea0d5186219db5f33737d75ff12e43be109a84e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c5cdac0a0692005419eed9b531a9b12fb3a61df6f4088cc48b9147685f37e90(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc1d4f128b74cde134ee5b778b595321db88600ef5f3e2e813b689d6a38fd125(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7dcac4aa8784caff9538123e664880aaac5c8e3272122591f80ea5278cc32dec(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e734d584b8de0d0bbec5d08beba76c56de27ef6c769c1fba742f61596cf015b7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17d4c0601c9c494397c93aa111a6bd2f69f381d1704173d641a4e72077c636f2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72a70075eff613d642055f1e20da210336ec5fbf10d5910707142e0a82c26140(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7fa947ae8b8e480b2b394f57654a37d024296d57ad9904eea2dc1f95394a615(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6addd91d63cda921d191f72b4ceffe91d81a78751174252f4c2bb33c79da75a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03ced5b5d6745ebbd27996fe5294b4397ad813565e9578878ff6e3e3f4bda24a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3702d8f9eb00b12a5667d427ad0032b21c471a4cb19f5214a9c55b8e783223e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c0007629d8d11b04aeea14b8373bf10cf1b3db1b0566420b5fcaadacd2191ff(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__276257e1d76fb19e7657a1fcdd65c8ff96e5f33f77de6f1259d1ee8b5ed4b807(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__835f01c25f7719bd89b3704dec2eeb4b064e823e532d0c9cfa2fa9afbf7af973(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0c7b32f55bc552fb1ca76eb8740f41bbc57aa4757b243a377f4659772328aa1(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84141babbe4612589d17a3639dcb754dd3ba995efbf18998c7120873407d1c89(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7148c71c4ceeec36859dd99447f21da01c7beab1c5894004c267cf2af0572d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d7884a59de898092acc8c08df26bfb83c444761d976018aea1e722e0485138a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79315c1ce102626c9a76b6cd69646307855a2704b1939efe1cd5db103a69fddb(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a58d64a675f242cc440d4fd37459e538942010764579bccd3f29b2cb8227e80(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4a9527e2e7a7cc037330f6d57865d479ac64c412eba508ce4461aa8110d3ce8(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bae1356e395848aea2a043703b5f39e3de17ee853553550c82860b208afb8599(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c8e5cdd36dbd37a7b72755e0fe3ed1d424a2ba30e237d5f014c08fcf695afc6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02b8ec66d5e4a90b7b32a888b5497b6e25bed42bb721765d35191c4424e52abf(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fbee24019a16b1dc94bc4ab5f3114cd966c2b74f2e9e35daccbaa43cb3689fc(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7dc3505c35f2e6adea95807a842140102508b33f8d0e0e74b96e10c290a9df66(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d5d84b139a08d87dc764a2911815384e5ee17f7cc77c1115f74712cfc4acc08(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3f55d6b3ddfa046497342acd079ce148868513ec64a1c2303b793182d0b467f(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07f868e122b173ff411568dba3e12d2e9b2bfb0007ce0846afc711f03d68a41c(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27c5d42ad21621a563d95b94a8616b9d86f42a768d8c1fb268d98908896e2e87(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e66a25417652dd79c77545d7ff71627f801c4977ba3a7382adb32346b6fe32be(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a255d9f563dee144ee7954a90ac7e006497013ce77717cba5d60973fc8e8fb8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4064405c7abc46db37f4cd89cea38d11584767ef71ee6a2d4b1da8748bc16406(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffaea07da3a571236724f61acfa87af0b373d77e0c77da08f7ffad6fd3981a1a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca84493d58266535d382932a47ba6d56dcf1a032553b36d79d061c3966382574(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31688538190aa81067b3a18a9b6e196021b7da87175e4b81ba51499e74322ccf(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__686012fea61ea0ae330dd3809f37b2ad7a8af18f082ce0baecb19349c9aa54de(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d991b6ef259a226e6aacf4ac9c702be683b3f419a383578927cafeb7e4d3c936(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2f5b84bdeaaeb1dce1f94df9d62b31379761b02e21feef7afdcdb5ef159bae7(
    value: typing.Optional[ApplicationSetSpecGeneratorClustersTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12652b66b0a199e4f7f1532a00f3de80ded425e7b02c5218cdd9e263f8134982(
    *,
    repo_url: builtins.str,
    directory: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitDirectory, typing.Dict[builtins.str, typing.Any]]]]] = None,
    file: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitFile, typing.Dict[builtins.str, typing.Any]]]]] = None,
    revision: typing.Optional[builtins.str] = None,
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5856fe9edb0cae60845aebcc6ae0040f095633b2f5cc61ae1e5016113dc1e821(
    *,
    path: builtins.str,
    exclude: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1df7f105391c7673ad6697629afaed96ddafb22e68c2dffffec862f95c770161(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1c64c7e909b51efe45312326db9a9942a81e862f23b77e7563c85fc49cfb4af(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f690020751ed019ba13a6b809eddc98beec6933e9391153b9f5d007d4ec6f8a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e65f6c982834b476d8eef2460bbbd0eb46f2650e0c1c6730c3e2af5d6d642d94(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e84f47420b030bced9201d614fbaa2440ff60cd0690a85d55e72a61e8d49a91(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec0874863cb0cb9b670481b1d3a994a1c97bbdd6158ad46ce4ce7c92cdc692ac(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitDirectory]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99871452a13d2340e53b8313089f2a30c41cc13d54aad289e8d3d159a3d846ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f0b0989436bc54e9d6ea4ac57fcd59353d82e6627bf16b251e384f2627f03df(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68ed32dfc632a69d78cc9fc657b4e4b52608f057a5a9b75b6631571d1f1439f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bbea883c7179af70d2b0f317e243ad7b5d62759e4a3ce845de8fc0cca71f99c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitDirectory]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6cde93f5417cb589819a45ac38c99c6862046d5f0608143740c34f9261871059(
    *,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d655d4fa68dc9baac9e971a0879838180919763524360de15aad3f2ee87c7aa8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b5307dad38be1803f0f3c85ea4abd6ac7a5aacadd3c4e174ac75c1670f8348e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1a87c24479f8bb316c01816bdd2934089533ec87b4dbffbd25b1710756c50cf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bebd32750b7dc74aa39ed887914e96a418ea64c8017ac16ef56c880cb13eee4e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d186b9bd30feaa09fb340ac9843decd32cac3a2d5dcfb223b659c4e41dc9d88(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf1c72bf705094742d4e279dda1480aab7b2a1d2aeef3088ced9992cd37112c0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitFile]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__715e256599660dd41fd8c893c05befb862f43bc9658aef9f3994426eb93ae3da(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__093e2c5669e63634a77a8f01a6ccf68be90ea295ebb2e1e08456ddd4c3986483(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2bec4694b88d90fab4110694e7f8c0c73cf0d0d3d614af210c1d5cddf297973(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitFile]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be2509f0e163ff14732b27037615574dd78f049f9a20fbf442f14cd755fa5d83(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d61ba5dacb92b1c2773b384ebdcc669e36d3474e14ed12b2bb84c1eadff30576(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f99f5a8581df4d6acc4bc9e53a6e69a7ad263b6ec20f4132b90e090f4b9c5f07(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a344d82d9d1f6af9f284a391464322510a6c7f85fe557d754a64201f49637712(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d549803a11c514564aa4ab5bb2ff37460348dc4a8a33193c2c60d943403bfdf(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c04cfbf2f596e9457b9b4aa5814992ad35242c203342ea1f38469a6f7ea73c9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGit]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__857de6e319225c2fa08bf8818bc06145ce3c28be8a64b21d910e4cb40e9e4d2a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c14f635b38ae141c3816dfda473b403f108abaeae8a25b904772591fba095b25(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitDirectory, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fa4db7b6c250bf013b1d8fdf959cfd4f5cd7d90b10cfe5f3fa60a2cec51899f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitFile, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ad43e60fb8bd082062813a71038a4fe087960d25ac47d6274f9aa8acdc8d672(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76c68551bd573caf8453a8e30a48652e0388e7066b337b3db1039a3f5739733b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba840d205aad9107c0f42faca5804303b3bce56350374418657ce05ed887f26d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGit]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17bf7d9c2d5272b6fb6e47bdf5fe38ac693e617e8949c9db6fcca230dabe3d5f(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91f3d0c05aafaf495fcedc1ee49d04e09be8948df08fa35389f9ada3465680a0(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b059aa69c861196dc8fea19d0c6f1afcf62419365418981ff0826624a70c021(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6aac6be07ae780dff83d63880d7677401ffb56b4119a6f203fae259bc125d548(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2245b6183d9a0cf9549f135dda759dc078ded35846edc0cfc3b8e42105af8c43(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb28b4cc1f2b2368979c8ca96b60cfcf9a0325a8f2e7052d35c3df445d550d6b(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5ab6d47218e7e4d0ecd07a40da5622595d2b93c431354404108b681c83ce4e4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a77bdb7fbc4c7afcf79e424fa3fa9dbd868ed258da0010f85547fe788c66b29(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26570ad7e631532e3b09340a277c437ae1ccb02c0b4a657ec9ff4fcd89336574(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5beaa7fc142827edab56ece874bc98fa30139a73699ae664f80ed09c5e53b283(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c9ff374859ccc0d9d2643717a1df11b55090d968f398d31506dbbb2bfa5c473(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ec0e2a1eb54c432c5ef1b32dd3be2d46685d1ee3fef4061af957981965a883d(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a75fad09c098c5dd36d8f1c798cd17f07d744a250e677c2158b141a9997fcd72(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21fb41821bcd83897606047de112722eb84bc295407f78433cc020eb5d807d5d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4efef313c23568bfea41998dacfeec89ff175dc7ddcfd326892436075e0b96(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__494b7f90f504d995be2a32f6d949e9c0cd8861cf44113eb2938edc56b40b4c2a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9a22196df012e8533ea726cd547f14b5aa8430d9e1fd5c18e1711f1f5c3632a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1b034d8278625598134957ad6237892468cf72bd74e0c01a226d5de63ccbc15(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8bc21ea2773ad9325305488025fef59b3fa8c0829a997e4adbe44bafdb2d370(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7d4395299920450822dbeb5348ffc7b3ff34b0e29f9d87bb980ecd71c4af237(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98d1da2d16f5c4e4cb9da2dec001af1134362e5f9b98c02cecc386bf0e4ed474(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95230dbed2ccf591198e305adeda943b3ab8b9594b5832341515035ffde693cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbf80e24fa406efc374464e08cb2ec6b46b6c491e9a305518e366568abb0be03(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cadf59b5ab0c8417eda1cac7694a38733794a9f846f998be0ea5cec48f40b60(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__caa77905da91b4c46854599c1f66a0ae05cd16773a9972c5a7ab1ee8a40c4455(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab4c410c056ff70e687623b0bda17194361cf8d4acc17a597dfdabe2d92b377d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__baf088d720aaae45d341736b3af82816e4d175ab98079cf2308f85caedf6908d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff8a87f73eb0eac9a525a8ca429a19be8b5ed6a837653403929a99f5574f971d(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__777f382e817377094f38b0f32cb99a221e83ae06554e33fc679bb7f48a575176(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c112a273a30dd2a78d84c567ee7ce07853053458e9f00afe0bb5055f9b41b1e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1909d22d44c16b182032eafa5c43ec7581ea69423eaa60395cc7815349e0e9a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d923cee9344524ab39fa56e851992c967ea4b8a740ef8dc4810e4d35bda253e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c5b2341d279a31fdae408378f0fe7b41ef95e65d6a75ecb74f19de8426a9dac(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ebb986c0c1f9d2c1ef287631bf0184ae983bfb1a9e4e06f49dc0e8302f23b59(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8af9411b33dcbc2ccd7e5e691d2a9daf11f9d63eaa7510b5d0af0e580856d2e1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1412862ae17e30a0f83f2e60c676491085fba38548d9236ac310a3dee0789668(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bdafc5a4b87fa35aac52d423d7d269bd7a441ce98daa307c9f4c006daabbc9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c87b530af0747c2292e3c99defe233b80fb5d3dd04deb5e7ee84a33918d9b19e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de709123f1a218f48b16c342ed9b8dcc57258038ed6e2062a9e81a4302e5dcd9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7d48c985b0bb2f1a9a6ea0f5b3c504d0e1f985a99f73ca7f413454d1e20af10(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4a478117d9a5289ed84f1dd4f44e1f45220821f9299b45abdeb79c7ecf42735(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55b2642d21983e45b90cd9a104bf97c11e58e4186d37fc9c0cca1d31c8721fe7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81fd11064e80d7f67855e34d7007ab737a441554d1252e8e913fff1d50593cdf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1375d3c1b1d95399ab4e7f85bf837cfec15b2fc607ca334fcff7a48b48f3118b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11a505492f4b5a3f7895fb6adc499e4fef886bc86b4290d5293e77506282acba(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1742080c4e54d693cf72e9b58a15fdc65dac745b4c60b394f376efda52dc229b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02cbcefcb59af51424b550f896bbf8ff964c7fa0ac24658e26d5c8b0eeceb9ed(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0ad303187e87d3f31204668afa452ddc5f245be28f805e33ece9847ab22003c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0a9b3a41eefe1debffe8ec9aad10b83e465969caf404a5eafffc9815fdb0bc8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4efd83e0e6c1c07030ad5bcde1047792c370695e296557e36d2e76e0d9ab489(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cdf22bbe811022917b413470bed27e5e6a39689f3d07e5a2daa0b49c342ab36(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16f9023246df7f0443fcd0d47c06a980a07c94b9fb4049ec51bf6664043d3145(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33d02e8d62fe3e2e79d1ee9083832fa34b293010cd8589b8ff0b03881cbac7b3(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0db7e45021c26493223f5352b0315d16927411dc80ea9c78f12f3eaae62da171(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f85c4410ba98f23f8a085a11b727d51305c9fd86d9073e97f0feefd590c4ee1e(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30e84da2233dd03fd0e127dcef5a43c843c61f4b1892cb0f5640d1f6be6b3a2b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__205a88df6d568e3fd16ba4ee9a54559dd31ee0cbe38552b9881b65d29dbb1728(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de444f2825052deb526306187813df8d805681735e42c2bed52a5e9ee840a7b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41368d5ebb291bd5c605de8cbf2d77194141ee5fccddcf78bdcc01c5cc7ce394(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__980d75c9bf38468d37cbc21646169e7556dad8859d6d5b62085773b6ad347068(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc6f92c1abe5506ad582c2bb044ea7e49116b4a2d6310fccb2da5793196e8dbd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__343de0752b1e73e091342015affc90719d3bc20b90310e2125125e1d85b58471(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97a1b2b4a5139060990555281c7a0e3df1890b75f8a7488a3ca186ac98f6a1e5(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__100ad5809687a97e02f40fb0b1d511088c301e7f5a047bf1bbc25d1566150fcd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2385a3ca8d2cc2cd3fb8cd9e34cc1cf3201354c5912523ce547987caddf7ee6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fef9cd4a90e2598b9770f2257299fb8b974444cdd2033739a267f280e3d3adac(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__877b49eb909a3bac472a8bd56d362423a112eea583a9ae3eb14237581fcd26ae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5257a203b470226f1b5229adc19fa91752ae1fbac3975ca018900e8fbcd36005(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64fca80a373f30b1d74492aee45deebfba56a114b9891fedd0e1a43bb08cbd65(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c91141294748263342248a4ffcdfc8ac6a1572c4dddf15b6c0fa6df086ec7153(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e977c261cdd3c0135dac79b503bab1bc520896896279daf3e8158772503ee7f(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c0af246a892f0bf46147467054d3c501a1d0e1d34928ce80c600a1959e4967c(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9defd13ea746077865901bb6ff0f634afcdf6926febc556cc3893443119b04ce(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__197767d1783eb6deda76288d74b717a99bf1b42fdc1aba5186abf289e2bf4f38(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__750d827617eb46adb6a01b1b44ada3c0248446648609541de46e47472016e00c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1d313792d6e052ea4710b1c6bc0cc5da6555d8f1fcf185fc0a064d6b60f813d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0d5b36c9234a9ca09e4efd6f69e3b4521d2b0fda6749f4ee2f260ddf10be44a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29fe53d3fbbed0271621e289ed02d0f498763d79c56e72ea4209a0251cb5091a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e81a68fb3e175efb5a353722808a129e879d4b3a9d2594111ba53d0f189c67b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98b892bcbc31c9bf0e402d1d959588be8ed8f3ab607173bc01194d875c696bda(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6133aef69836252559698955327e80d3788b86a4bbc7b80d06d6c81c322a3740(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4b5a72d32e321963dc39bfd4fb7e348733352b19f1680e5b8c5c5b0ffbbe83(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07f42562535d1d1b5afca83feed05666cb4e0d10a95a723e2983acfa090b97e3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4d55e5e9f6a2ae1caea8cc14e67d70686894d3f98e45317898ad87b3567e8d1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7def8f1639ad81002f872b1c9211a6cbbaf0dda66fd3218dc275ea3c87871707(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be604716e92d82da6ca2a7eb0e0ed518750b6432d7e0c6d1cabca1cab7ec050e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__809357c6bc7c64003bc30d2a00f676212f80c3293dd0abd5cbdd669c152ddb86(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__643fc2682312f7fb7f5cf7292c38f1ee49eda5cd57a5bbc68d0da1813922f5b0(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3774343723a5b27a23d1faded7ee0bce5d21f1e8ff80747c02a081a2436130e(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30629b46995d256efd60279b7828c7787d215804b9f24e3086ba02bdf21ad20c(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9238a199a823de6316db14d0d6bba0fd065c67812c806c037b740c310bd4a99(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4de30f4ed5c40f708b13cb8dff9f5c5e9195ffe2f88ec7c3ed077f55b7e99b34(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa45908bbea00b2f05eaa1299593993c17f72bcc7aff87f6e2bbe32dab6687d4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63d9dbf962898833b5367afd9b40aecf9a0b3e10e39a65b5881cd31d61bea312(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__895064ed6163beb6f6c8273c0468e0b56c7e1a27bad08570aa1ff46a87ec172b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5020e31059a7fd4ef388518e6d962e96065c5749dba2f8e7a9ab69ced15342eb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b8a37d70340270fa9a6639e385b96f722948155f09908b62291573f2138e401(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__071b375c7b57d4314edce44b153e4a8837a480d69d9cbe2b8dbb1148fb7cd087(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9b76033a4ccda9c906eddc287bd49231bf7dc6f2b333d00dacaa197a2d116d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4fa23d5ff910de2d87693f4f34c498bd0196aa0bd9545328318c5cd9ee8b2c9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64e1ae05efcdb0a33d58831c56c5ce5c8d56278b1e799609dee188f0bc9fe37b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d98bcaf49d23b5bd64f795d3cceb562e2d034d9f8033d352028749bac7a3265e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e073b0b2f249d28124a2c4305c1a83346a8485d93851e0b52d879572c3ed7b5b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96db0fe87452e43e56242b5904d35683b46799eec28a7e0e685094b2659bb452(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__361ee8fe6f223d69f22af616c832088038536d3c7c154d944f7b4471aedfefa5(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84d37e00cc636189f99d86e4a58e0099b42ba94f07e47c93313ad86b59ad1a27(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e4534d537318780e3c20e08c83afe55c575df3c76e71e872498e74e1408835d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__698ccb53020b82ffbac31697e0e5c6f19688b45826cce521afc99d6efa3412fc(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__080357e7677fe685a6345bc69893301b7a504a299fab0bede123db46eaea6da4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32e6cf79c08989131016002a67da1c1e67702bcd84a861a88a3ba8bb80c8461c(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7857f55a121bcbea5d4fe0e7dd01901098774f048db4e4f6df04d937636cda28(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18bb79d04a12ba7ce04659c0540b115424dd03ea0c6d28fbc7d0c66ba87ca1b3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f77480d951c985f2afaf9e8f35d7549c6d3bb255eb0cb29fc02dba75099a09af(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b7ced732fd6d6a9ac0d08bb041c704fc864eac1b8d4c38fbf0279ef1ce44af6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed7ba8ffdcee7c58353d775a0772d670263cbfde08d533033a3dee7bbbf3f9b2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e2d4eff50ed855d30e4192fd83557717ffe0166751e9ba48e44d6a327b4dbbe(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4a4894fb9725bfd3636d9a72d3fd796fd9e1f9dddd643ca0bf2d39ca63039af(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b21401e43e541445758b14507091fc389410b63b2d8f51935eaee4549f6e840(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f676b5d24cc39a7150e52c486e4e032f37219ec7a25b1921dd6f4b5b16f7f15(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3becc314fde52c1e3ee14ed28aa61a25f02c40e34c4f6c65a476966086ed099c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b5f3bff0e78cc0ead4aecd8538a5d51fe0add33366af7dfdcdab04bbab3d34a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46c3979a526d02e11265fa660fcf44f8c324ec3c98bbd1e1536c0c221fedf362(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53dc5361d9b24fb9cf186866da67bae0bcf5a41c3fb67116a2fe3cca361d2345(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24a84328456ee949fab9506d839e2bddbd012064e00c046cc2e0041ba9eca17c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__425e8db6c72136536d2ebace0f52a3a789427608e303bc345d6bd8bcb3f0c1e6(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd4041e6a9de59ec46de8023635dc604b9a7bf894999569ced01e444fbe52d03(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5d94df4ecb1b746b9aed07832e4b783388b67b5a2473f9697ad235b68a48dbd(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83d9fbf9b675eb0063dd4288d98be34505184a484ad853fec46581e3eb826929(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f39cb25f0312a1d7681fbda84197e198b65166cd9ba04c7e3623c6f45f231f52(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d1217c1ce9e38054b431d098a2647e6f7263d4cfa3a6605de0f57ba6d2bacb5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f87084f95ff953a3b5728bcc0f2e29a8de1ad924c378c39076dcb6993c968558(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18b9aeb0934a5d3fa13b3b47714818fcff407f520f8f2f14e9531efbac6c638b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e69b18d04d9d458290aaa5df332d77ee626094556ee8698df8c03a12e4e61113(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e527d714d2e185598f23ecf87bedbae807da14317a4b52a1ba9516c0caeed338(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__210bc51946f0a1d1266846b5986c363e3a94205030e1f29b40aca6007f38cc59(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42426700c701be0423a1e64bae693f21c6085dfe3e563caa1dbada7d397d60fc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c0c90a12fe423b88784e9eb2d1885f76a49c6d660f59af89d867bf7782c3d58(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bbd14116972bcf5f7b06318fbbb88687fa76aa888a35feafa888a89bce8df7e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8738bbd3ddba50a6634443cd86f44fc5490997555593e0de1547495e710a0e7a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50f0257cfd68940750eb3158979b6405c861e74db3e1e6b507aa0c05354ba60f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a23d52fc26c0f67fd26ff7c0d8962095dc3fb86abe6a13a168c055a8baf158aa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35e9b4a0faf2f59c66d3b6ef9d3673ddf81f6d767873b858bba31229bbb7982a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99fcee1da6646a715f3f04a7937e887727985aae23dbfb50a3f4c1990617e362(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6184f749920717320adf1e75130dde523676ac2a2a3887e791ba0aa200bc7f0e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ec5928567b7e5e176edf1a0909805809cb7afb4cd771176114ce5b5270f0a9f(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a98fd47b32e671c89f00bf6fd93c4a308a7d2fb637b2b64c48b3ca9ce5499161(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03d123c903a84fbe75769b22e75908f32b1329539be516ea134cb00c764fc22e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fda299eeb77407c405bc49db9a4cf403185f7a1d01ab7723512aa287d98fa686(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a70e9f11b7e3c8aea6e20f3fa558b0261ccc783f837a442ece7965ebf29e6a03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__591b105bd9854edf59675e1116912620e861ef3f3233eb0c384298e159eb71de(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__129177779885a0badff413fadee733c64456f1f7c74aa6bdf3afd24ee291c0ce(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c643c9b37b5bacadd26d81444424b7588912603f569536a6238b2db25f56b34(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f6cd99e727263e0b32eeaf10cc8697ec29ee721e3d46189f4429a67707ed80b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e74ea765930eaace13a5a192f563c26b0ba66df84dff9bac98000a949135c3c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fc3d9b35163c1a10621a162334284109c51c09579b5bd618918d0e044d58697(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7641be87be1691519355e2f545a9a6c4ba56896cf851e8da50f9b4f7667a0d9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3bfc8400bb87e3c11aff3d45493e5d55baf70a91701bb94f9a0ea6e47a1285b7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16ddfacd9f5ece7ef94f68ec2b992342dd0d8050d1c9a5296184ea86dd186780(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c82935de15aea957b1e50cd508a00ce6c5e04aaa230cb3b247b177b703daa41(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb8cb7cc50bfb0a4480ee703c2f00b842c7cbd6df4b2ce474c35f2df1497e95c(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e46636d1d283abccd49ae63a7504a19ed8645d8df99028dbd1fc68852da65af4(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72c0899e1617634b772a39f1eda431140fcb797a407bb51ee24ff56f851ea7fa(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23ab5ba26d2de0afb58f22b1b69225ffd7d44b9e7cb947ca6d557ff35b88ff53(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b429faaddf296a93d2fa55cef4d9c9c0a60e947f7b1988de52b67fa33ff707ba(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70562f4b5bd7a288ab793e59e0c7858b9722ea293eb1281e61fdbd282669fcbe(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef8e663941ab53bd08bf70390333b5eec92f3c7990bdcab4f6e7dded1f2b7cdb(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8535e81919c19316fbdd94e60e90db7852196d023c9997047c0ccc3eea0d6b18(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b258faa242109e1e75badab0093db346b29f35be8493ebed86d974f7a005610(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__415a812b5e69a30668bf570c92121982392c1921314cf89fc76ad20dc69647a2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44f42396fbfcb3769cbb53abd23675816e2a587352d3840d337ad74fd02da9f0(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e5a8b8234cae766695cacb290181e27b530530d47c7d074a6d3a010c9b30d26(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e734387de2869af12ff6dec91e11d41337beeb3d700cd8b02b2633e8461a705(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bee2405b0aa080d7ac43838239fda8cb69426a00b8a6c03036eee59f62da707c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8de41005731826e5dbe3504d5d5600c6670e88750c0ddb40f4bc60da4b674c15(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c57ba7613dcb1e710eaf090ce22e10c268f0b48a2a3b7720337736cca5d67a2(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ad12fe8eb24e7ab9460144dbf42a44e532072d3cc248ff920dae71bca330d6d(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__832541bc7d15836dd7fc274e5362da18b444d6ba2c003c3d7e7df895be3ada88(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b88c93b1199f81230da50a52fb1723954f091adfbecdff9e52673f0796006381(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a168648db335b6c6f63c077b97b02c42652f83c9052ba974f20e4babe627ed1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d0f288f050826bad9e9b3f76cad419355cee8f50f4a392b4693ba43fc00764e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__536c3d34a0b5c9f44f4c98d7db306041eab0c30756c4b9a4c92b52cd20126f36(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24179a42dd8ef5fab7ef9662a765d13d1f15dbc0a51059b5ea5cc9f543e508e5(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de810e165a461834c44e652482e79b6014fe16847803433ea6d376c89ad44b60(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7689c0cfe19bc348652a10b0c4e235cdb1af20ad6c082bd6be304b683cb0de54(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__404d195ba0f7731f302a3aa7cc4af81d642fdbed53191e0037d68a1d07087f46(
    value: typing.Optional[ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff687d5206460e2fac4b32e748db76ccca8d65939b53e09a863cc452ce36649a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24cbc92696fb54e23c974025bb9e0e8dcc0ce7b60f02c067a770424e4fcb8f58(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48e41f552615696e2f139a82f6bc8b65e20d7d0c115099b518f9961d295f2c4a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__508fbdb835070f76d610fe1935b9118b624b25d36b1b0d62dabfa99536147e2f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c5a89ad82006f06e232e2ba06cdab399b6b7541b5b31ff04e4272924fdfc08a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bab6af3d081c2f3a3718af5635d80f594c99dd5d8e9aa3dbd19bf54f76cc9e70(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGenerator]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b687eff3f1c2a31f96a7f7665e541d413b8d4bb4a1fd01a966a759b68b3db46(
    *,
    elements: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Mapping[builtins.str, builtins.str]]],
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e381c608ec070bb4a724494f7c0df57c773c0297607c7adbab34ef9b09613193(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83d69eaee5d6cf4c2eb0cb495ef59699e5caa3da3220de5a6090681149abfb70(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6acbeb9cd37e7975d6f629e06c904e029ad56a7c42eee1cd980f6644553301b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e063fa0fa380d6e133538e297364bf12b81bac64ba3bb8ee1d9706b74a5641d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9dd62d9ca8c7cc544a115c743b501eaf5e1cf1e8a0ce76b62c60b2a14766e2e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bda0c569e8678df94903c452c7c5e119f8de7e66313fbbee6ea46691436d2255(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListStruct]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6150f78462ec27312086da3e3d2a9f3ae81cf25f21864f2749f9c9d1752db4d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f426779ca6b29969292ee141e68c1f4fe95f008a6414ee53ccbe686dc4bca9f7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[typing.Mapping[builtins.str, builtins.str]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62c1044a137cc260e10d791cf249a0dcd36571560ddbd11d579477b03f363ceb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a93e1f0bcc236cf0a4eefb3cd72168c6696f8cab57e2f8ecbe55bbb32068f84(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdec02b0df9f86294c49814bae811ac8339dd822cde7584bc948c13585dc1dbb(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f1ac55c27a2388fcfa376c83ffcdfd1b62a38d9a980913d5bb9a2ce0226f672(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3324faad286de9d10b3f41082e801f7cd13379e6d30c5b7fd9ff01533b65949(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33fd497363d29c0fb0969c0ff18ba4544344cc91fed5a9ee249622b928d5fc39(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bba39775fdb7abb4f43658cd18d6c852735150d233f2d1c7d7e8d59887443d1d(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__578e4e9372f94b4bb5a2cfcd5871cdbf50af9ccbeaddeefaea4e5b2d3a4573d2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28478a51e786a90e08a0f0e82ad1117b04a9fbe7ba2a44dd45460938102bc68e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f47816edef640b9fe23c34f9ec1a396d6e13e72a63e9d80a31022172683fc02(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__768b691d8eb040d23a041854b0f19d2e15e4f4f570445f31679784e50b0cb331(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41c81c8ced07adba2d80d76c21d3a91712c4db260b02e86499662d2837a0e32d(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e325435f05d3afa02f52202f10db8fd97e6878ba3b45842afdb05dd5faa28bf8(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6546ff9129379e16d8a2ad94fab4dd45adc5304df7150bb4de8ecd968e64d2c6(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0db884dd19ebc9d3c7db029a2f5c08f2c526c720f17dc2cbd1ab88e61de2990e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfc71b1f3be1fb34fc2dee2712d6f98355a8e9b7cd94193ff3e106bd1f7bc059(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f854c2e015ded80fe065038f141137f59fb779b98d4434d3b200d05f9b7601e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a878606e92540b60e80bd68d2542599ed8b3a228cf2fab642ec4ef0833392f5b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbca9ffc4ba07f71089b64adf3b9d847556b62bd0b9261c090477ed5c154c6d7(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ce31dfb0d4f34f9b399142e1c00f53077ef5b689a35798719aa38b6b10ed71(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b5b0b53fd9f067f1bc5e8d5935c5898d6eeb09cec0be4c6695a0c240e343b03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f56dd57da9c5ddcf57f55ebe06290dfcb6e468f6430f1706a30f23ff6533d5c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e7279c2ad0bfaa364864a9d6b663cbdf435af13f91264b2d540176c66367b05(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e36c622cc7901cfde9967e792ee6b066128701765a0e6501f5bbbe3213797404(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2fae31549be6a6c19392fbc19ef2d060cf6dce69f5e6f267ecdba7efa3c6e2a9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6ed4eb7444803dccebe3996a391d994e9a9ded21a750cd08eaa194932a36111(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__279e821695513599bbeb9c4dd7324b35e92ef1890cbdfd275c37f90b630f73db(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1e940a553c8046c25309d98836ffdd52fb8045579c31531124da713cfbd040b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9be4f4a2357b8c5c9313efab0c55e8e605435d017d8ba76ea0619df85349725(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__567708dccd7fabc489e719c1b686876b654f4e73b95e020bb4f44dab56298dd5(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d68eeafbea1bace75c91200dc2c5b66da16b66bc26fcdfd95af32d73518e5109(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ef92f9f39aa7aa6175f6479a1e77c9e31675b2322169603bb9899bfec3d4023(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__320a5f5608b64b514029cf9786ab206cf14aa3ad2e6e66c0233cdf1877917688(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4899a884c93c9eb8af27ba0bf9606e10258b74d27c317f019ddf08e09631543d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b01e8681825ee3b00c0da45171e142418fdd0a358168a6c27b8ebbb248c2be4d(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aee380d4921daffb04b3b32c5c4b2f0f80e6ccd24f16f871c245c63d3986c809(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e1d511a543484b114a1a8f966192e89ced8318a84542e6f0241da84e0a9fa03(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5620997f421aa5fea1dab91323f8ac4251c8336183c3681346d32c477f40b5eb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__282a1cf262215ced68ff9fc916c573f378dc8419b009a4170fbfc3f55b256743(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77d3d6186bd4059a5aa274e44952c00a5bde8308064c31c7e24994a87ca86160(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c10a4596476695641069e3808d7b82f8eec30b5a733212f4f9fca7e14ed443b1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f37bfdd9abd65bfe02e8c75363106b98d881175ffe26f392e8cea9aaf7b45673(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c40cb378c7237a93c4a2ab98f6a58c5c5fba7436a18826aef49899679629b2b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe92fd4c027ff7945c8a260da23d6f64896a116b6a0f5077f95e86c416d8fea9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e02f85c86c3dee3496f82c433498309dd572dfd3e137a77a0b3978341eccf35(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f95daeaab92567dc7cfa4e776a8d9385831b38871a4465de712e1217cf0885b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5239971e0004edf1329fef21c5f5b12e0b76ad251ecd7d7742cf2b0823304e93(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc9e9770f7d1651100637af5b0d9677393b215482856dd1f510b770915f6a5ba(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__579bdf499d233d66fb333fd4a3e9d1f17d5a66d40a8b4e40d1b6992da71ab954(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a555d3518fc263ef9481187edbd4a96b20f11c17b38313682b0358cb7dcdadb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f5ca20b6c141233314fdd37fbec44bd3a38f7926def292500bd1f59e96f7ac9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7a47e533a5239e68440613190b302e13129b2d2054a6f553fd8a6d0e12d33a7(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b189a372e6e11d2bcc66f5bd3d5b53b43a1bda4d91514cee9b0b04ad4caf0198(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bafb24fd24b0596e54ac059d59771014b652db46af792e2af99346457a2c416b(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6721b12641dd2f103fe059a2d062143e5f4db3c5859d4f7c9614e1947a0adcd(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92238d88884c3a5f42a23ad336cf68ac3745cefa8f9aaac28efb49edc8575478(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf7c73ba1d814528f207a868a1c5cbed14b0e0f6a2ddc657030ee69b7d0e96a8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ca694b6e9a813951b52bf4c264343a7e851960a2949ccbbfcfbdff82a799644(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70721f355141d5affa342fc09a6cd422373fe066b8c2aad606e57a32bb78de5c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a92457efe6a5f984c8ee2192ddcedd233f2fdc9c82210ba77a701241b991a35(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a3d0784c01bd6da0bf57267e05af1c3a6f2d0641b649641550376e5ac2dd0d4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26731085d4c2c64283ad11caae42e254201c5e63f34823f5bc8e12be7306da93(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfbe923c634b2f1720e7dca90bdc7f1c6efc782eb6d2d351c0d15445a770eef8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9114a7c23180ce57f77518ff9add84891128a4c34453cbfeefb436b32a8b3c2f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1c34ae729ea85424cdc207ee9f5db5b801390995719602eba17668c543da119(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0c4741b32c02a77a1550441c1001d2dabc350af1eee886b31ec2cb9d6f2d14c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa152c30a6c4a657cb271cc755917196275a68c4eebf544d0b613fe964bbfc65(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9769508872b5b2e87308b7df93b4bdf8a8c9396ec7acd80067e7c27a69ac2f9d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__725e9a60524475b7c6dcd8b989243fe404f845e98059fed79cf84906f189c502(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c1f737817942c04bdc904e07e77f7cfccd9a8ffa1e8d75e86c6a31fa03fde79(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef5dc735b6d4662bc0eb4c6df23b0e40464c579a3ae568cdcba664d35839e96d(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e86b80e84d501a9d4bc0ffa1bbe16d738184ef719badf3c69560ae29d6ea1b3(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d52bd2073491938a3f63fd8051e77a1688d26a54416ed76424f2d664cb661f41(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5741e2ef5dda8dd561d940e3dda10f97fec59fe33363fce1c4307810e4491d0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fdc7c1b5922e74e44b121fbaa697cbf4391edf8f385d9096071dfb07770e786(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bbbad037732a147e2f771d567858192cb7af5c8d4850c852a29b7c342e88a4b2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__221594a505cb7b88a5dceb8d1749a6b40e330be528de702f58f295bc7c68df61(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0f9bd7926536ed241d982f5537350a8ab84232cd7847e5d11b2ccb68b30bf89(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ee55b7a119ad6a5bc4cdd709406e0f56b92111da6ba8388cf25acbed65e8699(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c590650178cfbeb0bbdbe573f8ba25b520bf752351af3d4f871115cafb6e9694(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c74fafaecb40525e47512bb817c91545c569ba935361bd168e947ff57033ba0c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0eef2482d0a9b7b68c7b3a752b35ab8ff2223d62197dab1e71a8c1af59a321a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d345799ea76d304ff2f38e3699cbd4fd2e37bc3157e4f8354be8c994a8da5f64(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f06d3db348ccc0a3594b7f2ad21a17b0dd60a20e9a849d5f9167ee8ef6e70326(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab188dc9fdd2a2b1d20751dc1a25f9b685822b8bd214969259685a2f45284872(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e48e9e5d56fd3fae64b506904c392d295610cacd100d5ac3fcee7c7e870ad34(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de0c17f65ce6a4b1996f1aff17670fd71fb957362b71cecb9379ddd6ee2bf104(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24ea248aba881bcf02d6cd6587eecfbc06241aaa77eebddec29ff4cf599df11d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cbad825c59f7fb60b4d117c288c1acb75fb991211f79c41384ab295bc354c23c(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__883a098db82ed185ff4531f4cba66d0d0f629f355009c9facc096776cdb49425(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a975b927a9f1c89982dbd05717ca05de25cdd75650c4d30922c0482a9746539(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__068b7303f02117056de1ea016b3268871136913128aa1587f475fcf347875033(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__515af988cae220ab6d43f8bb280a5dd679c75aa0cbf84dccd04fa1c789f92514(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__177c6ca5a5848fd57e20793af536ca285c4c47221bcbdfee7c41dc6676077b85(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0ed77935c5d0ed43f44bc781a6781ef22378a22328b121699c7ec9790cdf04d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7cdecd6ab3c9f213f85160529c0821cf393b31ecc108010b27875dcc898fcb0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f23f334cd25dfeff7732d312468375e0571f211c75ba874405dad0cd728fcdae(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ff274c61099e6c1f9b9961ef219029d1c2d624f97b94e2e012427aaf829fbfe(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f25747c4f618150f75059f0b35be642d8447f7dd354da4bd823bc6e6892fce4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f34351bd5e2ce0bd8fb3d8a9162916acee4224b5460f7389a116bb796d32d9b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__981146eed6087e8b4a184ca99e6d0092f25fb650c0d18932c96aef8a13683ec8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3eb81ed6beb15cd42d624eecc4b8483dbbe574642f111e3150f4f70abd2821cf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89b56aafb25d0e43973e4f39da15f96f186e59f6d77c43d8647e6fc9601119d4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__708351075fa9f5f9bdddea937504a9ca3d83c7c582c6009fcc1aa5fd36f72cb6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ca26abcc9891f98605bc20f9d6a3409dd6e335bc30f324c43c5db1458d5acd(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__619cd4c317b209618e5a2e2a32533c6cc21c2d30dbc2c98c878129149192d611(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fabe738849d49e1a11cef1295f0a55eafaffd62b3f670846964f930f1c15ae6a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f9e0b7e8dbd51d32cf17c3b426e0e63214589f6714c7aa70fd93d290f0e48ec(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36eb4a47f7e8fcf42bdb1bcf348ffa83b94b26e55c3a443b09dedf73a9b39f27(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4efbc4b58662737bf1b31dbd9bda3121ec176700ca3f02c3c357343584ef4f35(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3063be7d39cb624c79b09df6572473078572ba16466a88eda5139914a683a08e(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b43de286a737a64e151fc004ac3c5fa98f03cea61b3217a9bb0e8d259dfda54(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a8e12c5afb2de9337b4334753a252315d78d95faad111aa78e5bed0bc8902e2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__023bf4e2efee8e626425603dadb1b59102720c09376078b35e39437cdedf7ba0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46e1d7cf55e3c556fb1d3bd86837dc1a037b9a753da901332dc635def132b656(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a4ffeb641779f393888644172a011514d4a97863e4444a0ec5ee34db8657477(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b42732f2a6aef221c3968137c1fe2e9ae522a650c27bc6155a689bfec48fafba(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19efab6f8693f201b8392b09c836e0958f0a77e6ecac84e57a292c3443a712d8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e923789ca57476d991dd2d7cb680238cbcb027336e5caa41104be2e5febf133(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebe10a6c949522c360ec7c38bd929b3e115f9ad347865760fbba518a22e45d36(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__babc73cae2b1c43bc1b5b271bf15aadbc5fcbac20e95ca7898c653e560f1295a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e418a0cf702e59eeafe767d1e42bcc40bb07ba3ec5abe625d6698f4f56bdb9e7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21321d6327b05ad4d966a44234fbf589c09b9958064a47bc92c64b9d871f47ff(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e332a6c740b065852ab4901aa09404fd9f6ce5ad7fd66324bd3502862c89861(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5f1b7fa4271a291fd2b6de747b6edf5e4aa50c8e9d2230fa77e91033d1037cc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4722efab1f316bcefe198a52d4c92896b6e1f9fa1fbb7830f8488125883b51f(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9900b4a13c8d39cf6047d3ad22eed86ac56a7913b0b509d96c2753edc7bb090(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1985522032467da6a097d9f14a5156690c24824f68ab1a3a417f0ed8ffc2bac6(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a214cfe5f7438ce23b652378f884405f792b5be8eab1085e23a2b242709009e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a95abc9756ae46e58c5459632522355ac1fa7fa199378b561cee0e907180c751(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2802bef6e2c152dc8b6455f22ed980271163653bb5b1e85d4751e9d3de2ec377(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19ffe14dc3da862c92eb98d6b5b53bdd7f8d4534548791d8fdacdd72d65f18cb(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c026779072c6c00afdf442f47e9774c28f30775fa6415c443d712accdc3b44d2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8e57f4f228f364243a42da73bff7906d2eb1fcd5dd71a445a6fbaf8695ebf75(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f500694c73e24af3430120a7498073c297cd1b6ba5889eff6a2e33be6026fed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1624a5d8cc5d956b8e53a3298f1a8ff4e1cdb1b8ca10f7d25f7b072cfbbdbd9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f60b9ced2dc397be8b107bfb212eaa3f37523682e96bd55e8b32d6a964f42cdb(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16f92c50f4fe215445d35955201a8f75bc2c2400c3350d5246af16d419a860e7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fafa57881dfede3a3e300498364ac30d808b7dfb741bd8b9e45116e0512f179c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5806a50bc49fecb6e989d1264c08379cd441006262473d69b8d512cd5b718eac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__874dd3476c9d61941a7b5f0db31a8b5b3d28d0857880d99608a7838cd895fc29(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bf1643468170baaeac4e195a21b31165cdd2d5d6435f3846c80509424adb27e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c47d3533f0df37d79d942f1f32924af763194ec66e9e4ed549bc4f6d1d86bdf5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27939059ec7ef1701d856587ae4f8a0a32266237db1aa952fc7a5d37cdf4717d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e1c5cdf7b89b5a578dbb9c803f1437c2c9ade55b64e71c24fcf118e7784a876(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f5dd6c929cf7d701a39a16619ccbbd58a047f3f1d16bf21d0e63d009e9e1e23(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa085bb5a5b4aba076746acf6ac3a74ddbf200ed1515603ca495eb17d30523c4(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86628d89236b1a04c27787eb8649ae4c54165b3cf0ecd9ed3fb489ad61aaa06e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7cbde9e96b80bbc5e7dab0ff9d88752d1e4d94dc183aeacce696441de26b163(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90b34e386427812cffa3e55e8af643ad613e7b75d3b9f3fbc5a0cde50005bf82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a981ad6205ab7aa33f98333319e7764067cfe071e839814183c8f1f36881a03(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1e72d4f2b30954134a39b598c62cc614ddc65c1faeaa58234bca94b51355243(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6d62393729b15b70092461290c1bdea26a228f76dc83c9e8739897a00dc038f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__684a8e79f6dbab1e4a69010102c945c6df25ee22ed46c67c4ad06d013e41f436(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__124014aaf9b1ea131426e6c362f78d686526030d7274a7aeb5734c3bf0f00fd3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b94671c465f0af47b64868b07a6d7e93b65f468e06c8263e8b42d6fc4c99b060(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48c806a01b7c8b6973a9902e3c48a2e0c96588b25550a9f47f6fbe3fb02958e7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92697db1915fc68c6f91a85fed6cc24d1eb9a013fd539347dddd85bea76edd07(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__262aa1a0157403ccbfe81ec7d17cd15eb38a797aa4290f265226010ff3e1b021(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__407dfd9d3d97d0872deabaa5af40fb11802131814b79e0b8e90cc0513bca59fe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc3dcd369b59e9e1e86113c4b976ebd8f262122483f180fa97f05839110ccf6f(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a510e381c25c1138f8d0adeb3e962001d73e0ed92411d395e227917c5cfb1d4(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efc6a2bcea4d49d1699385cc61289b5e6769fb4d94ef168e6d1102bb3c940f88(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f84d6b30e41c09e03712ca10ba4f9ae1d4afc1b15b548471f5da5789f90b02fd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60c3f3e84cd20bae9d417c06934f6402f54a5f872afff4657dbb792ac86e6519(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f108ff642a795b3e6edbec3166931136c707c19f265b79cf7764e12f61d3f5d0(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f780a8a5791f84b76a7e80721ac9bf2d8f8890fe9aea9b484cc2b196159b78f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e87da459937229605444e199380229073c6ba3be8ff4bd4cb868e9d32a92685(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63f2ec1c6bb81eac4a08710f4aa1198b60c33546367ed2421c6c6bec907d0c12(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb701a58bc2fd2d0ceb867012ecc7cfc83c49014f428fdb21118714be710feb0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3132681a23029e12871e6b2a4491cd7be25d0c3d546bdcaceff9f2757fa8b9a1(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3783600759c3dfa9d653f94b010dbdd52c423d015403e74522dfdccfbfc32311(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99da080faedfa14a7fbcbc5c8d9857c2c926b4af909d7c1e0784f73e5a07bead(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__207ba2f561586c345de2776319ec0fc4f0522622e9820415c67037d40b6f5dff(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62d61331a2d9e88e92f84376212962761e53428acd34de7bd32bf630e44e6b93(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__830c91b52d9c254942e8bda72076bcdc1c39dcffaf57468e49b188285bcad22a(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95f76bc9a56df14e7a296a0b9ee4e51ac447231c2af1d8839432426eba1774a7(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__919cfd58a466e8b6e60ab42b84f7f8a5a9cafba81d97a2772a26b70574d446e1(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a8045260d3f7f62acca7b2fbb45b6fe62399ca54ea60e31dbd4277751ce25d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68e549e15214eb57d1c7714bed71c47b0400444b924f4c8c0ffcec08eb36a47b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8c0170b81b89364be9392ad6c289bb6091e97bcb1e033190f70f1a21344ce3d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1052fd5dc229bd8353690aa979bfb204b7116b583a2c38e0f961a384dc25c4d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8da79e6510d66906e8a40e35af649cca6731b6e060e25886b1d78b25e9d4e367(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0f40ce3ac233f1f08e525550587ac75f184e59254a25e1fccc56952e0c87064(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a253f396458d63d837de6463047007dae2bb03ee87d8b45af711d438451b5ed8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7cc732757bb07ed4ee9fbb3a74a3d8b4bf7c5dee7f1222dc99a41106200e92c(
    value: typing.Optional[ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3630e48f519ffd304e67c86a187f810bc7ea8fdb1d0c9c080e30184dd9656b6c(
    *,
    generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a74659246ef154c542bc173412f0601b5bd72142dfcf04aacfe56b375f0180a5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6565ce42f722461aa920a40d46cb902c0ec4d3fdceacf5cdec977103a4c89b8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__045f679c55eb0b505f8b8f3714fad07745220a8d2808baaa889d54146b955c51(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a1f105db0e5a90b0bcb56b75883adb1598f13f6c076b7fe07af9eb21eb06bbf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e91f5c26d68ef4cf4c53565353f43574132a1504328bbfabde20f4c0cabd740(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acf22e50518584ec1f6524357db2d82403d5464826ce157645b8d1ef731a72f7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrix]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebeebc6d55834fef8fda29177004d8908d7ea56681986b50b9b6e6d21a2fac86(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44a4b95f5c3a15e5acb80ed9c0312c852deb9af03d5218f3706a10ee094b0200(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b72930a6f5180303f79456a476873331eeb98cb50d4c705ca0d6c96939798ebb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrix]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e47b4c961fe96103eb24b3b14f35e854a785c69b9a2864fbf89d4d440ac05a1c(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__187698e3b09b45efa5a4bde125bf00b1877df65a70e6cc098a49315aec002ff4(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4a7ccb09d6a7d919b35b8763a65a4ba6a0a04ab0cf6679b020b32e034243017(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b114110b712cfcf7116e730eced56dbc96e470a4b49567d60cd218659dcad1a(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff6aefbb75a58835281e0417e0e5cf1dae99d276605c8c1f6e2d9943636eb459(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bce006c5500d84b826e9e5a76c45d765de6896329e90e6e8035e402a5fe76ed(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b96badecf63041914a7a1744a69dd4490db0fbe11a7aebc507d9db4510220f4d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ffd3e81a2973ccbf8b1be865377081fb974d5ad7574c3c69ed0943fc48d345d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__add416dba3145586914d19d1bf32dc56877238137a91963bc031697fc4b3796f(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc81675ef98a4059c178d7725d1bfaca4575d4385e3d2651ff9a5eedae32d66b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6c177ceb2e4c52c39e22a16db5b535d008ee8d7317eb462ef309931edaa1f9c(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f677bc657f5adc41dbf9e013c33bd68f4fa3cd8271b83be61b8f67dc67c9b6ae(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2742f159450a68574ee188c9d4750daba931fd3dc0695cb7f82abdbc91fef754(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__948023960f191a842aa5091f96d9acd000f55adfe938766624e9f4736794d1b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65ec679a5921cda8020e5578d6b8fbe8cdea58a69bf1d234caa8a4d79594fc68(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed37217bebaad4aac47d383ca948ef0ea55da66c09166dd9d4f751bd37619a3f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59265e87f74fa71444102567d4771f4e4b1b5c9683016301e9bdd6977e9cb0a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e49b20e5dfc6b9712f638db0756af8cf5ed76f55c229d1bb012034e1d2fb1e5e(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b2fb65596d39f1f7503025b4c8d03376d1d63fd807c3ea0b34f7c1e1daa5214(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcdbf723b54e802613c1f318fdeacde746a52f114c3a81d2de5509e74a780196(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9c74d07d7df3665f07fe865b5bb3f16191e6eb11b6ef8f72ff73debaf25fa62(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccf7dcc737ba7ccfb82924b3b2cecbc39946eebea8e3f833ab49d9a22b3b8d8f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a765cc2fd3d772ab210b3c3c0585428de0bc2c647ec1b07b731e2f96aacef02a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eaf04816176cbea7f733177819b92b483e45274f4f8e0c397e5a899a7dc55724(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6a19a9ef5f351f16c37a2c88697dc1515a9d412c8c40320e4450f17832638d6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d71c931039120378ca6c55aaaab5f5dd9ae635cefba57c1291cb666eefc0c1a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61d4e84694b1e35ec7e14589dbb3b4c0325c6921dd27f23605e4cbe0d913c1e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afdff3397fc0163e38a7c4b5ab495686e4ecd2ae36eb4b7c956818ba5d5fe943(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c623c823e53211b7efedf59379eead01cbb471e16b5ca071b39e394c3775891(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42c03d2fdee9d4195d9f8060653c8fc37f069feff7dfd326a8b47a249d533ad4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f19b9ee906d1e6a3fb1c7907510036770c89422c5f73977efb262f3b5331f5dd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1aa64be0becfad696add7bae7614f18553f26d4a1702f8ca61d91dd658a7f3eb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d46f552fe1e7c501bda3532fbab5dda042aac03a17e90b380749c12db8e2973f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1736ad740c179356f06d32cc97142d59405db2b38dc14eaaed9f17dcb9dcca2(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__772052fd8f893879688bd72d139049accf3694ebb4ac4efdba1ff1dc2e4c7a45(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f64be50f72f3c8def3ea4510a032309ad2f0a06c979c9564100f108577453ea(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61546b7a371a78fa1ed8238eb14dddf9bd6cc62aea4a2f62232d730c0181e76b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3a08e67f574f697de1d0ac5f112013cc97a96e58e2d7db173558d96f1ff2c5d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d046639f8f721968e272d7120d6e05a5de6eb876beb4794a1448c949aada9a3f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa6b606b902dac73ddcd383310896c985e213917ca7330757739087f4f6fb81d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ce2d23b2f9d35b3f93c33f506196862c0a8cdec18a2147ada36a2670479a7ce(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81c809687d45d8eede293716f2f81a3ad10a707fc3731f28eb172253bde22a29(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0320c6030e1c311d7711a8e5636779f74505aa7864f599122ac159582a370e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00bd0ede7080ed676165c8d4f0d2cea279ed02247cfd86b9720b066ebffe1a7b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9591f8bbba743f0e8aafdd56761eff74426ed954dac6d07b981b8448521abf5d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c52f69414008f260a6c04813f359c20a95a9928e42bc3a9eec138f87ce7d653(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__619c97bf7be856d335f14b641b55750fb0e451a982f3424eb1f5e2dbf51a94bc(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__188a0b540488dbf4f28286fd8e4638424432080b1b9d8b8bd2df7a03fc6c2d28(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abfe3efbf2568ceef91f8acb8eb4f4d5a3b7907fbb4868c7441da666b54baa93(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f576c6c8c5bc08d29e612dc5f3ec21a1a2724efdccfae6cd26f2f9504ff3ccd1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ed05b17f1802aaa88db3edf7ae1ee3ffb61577fbd0139cacdda526d02bd12d1(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__458f9f197da3eda98436ef8cb1c097892c7649c5c614994baa3e424816bc942e(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f20af9fd6d831d792ae0eb9f02e708c1f2bc1292062b0a760d016a340b6b5ad1(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f70484eddb2ce8355964983bb373b0844f576a79b341256b880e48dbaa4da733(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f44505a1f21fdd922df4a7153a0c0f4cc730b55e0c787a0cd9323ec30c9f6966(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ed1e804686db586f3ee7a0144e00640df75df7c9dc565588aef42579741a2b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ee90ebe25a3b066b68e554346909ff9f3a33e87fdeb345517b820a28a631e2f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e32e5765888e663da2fe262eac0537a37e788bfb5617ec1af45c53273156cba6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b6999806be2a620339e8a4b9a1ede882147070532b9866f5e4e6017cad15997(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf91d7fcbf4d5f59c27cd5360afec199d5c32167493ba7389602b942d033e478(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73f6c992c65f96e826235614d95933421323081a0fc267c157bf722db71bfefc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e9abc4dfa1b58baaa6f3903f59c4ef677f003709f4bd4af108d29b26f69104(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b88abf9c81cd35132656b5256a6f95510ba602e01b07f3f2fb05b5e86378a3e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae0e050683bc4ca38555fccf765e2ae00192520dc799ca201a1f7ba16e21f7c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__880328c6a94b13712240f2bd6b279be6cfd50858006f85b52b43c6fd8d9e84cc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4818c5f2a2aed4c1ee779263e44632a6a7c4af283fbff0141d0a63c9d8797153(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0bb774c1afee73e741c8247ec5e10babd031074b744a31b1d019d9665d24f5d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__105820d6b6c652a6402b49ecaf9ff3ec258c6246a2d412414ef7a3a5b8d1932e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__950dae13692b6e94a7aedc3e16a43b3660306bb85d1a33411cef521e6c4f4e7e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0213829da9a760567c62ea376bd71a99cf3a50a737bd0d34d893d002870e1e22(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0a487121b3a865daf892096e461595d57e18e81e220178670e3469c3f66d52(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6c524926bc208dbb97f1fff7596ebfcf4a7efa12460095166133eff006cb706(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__315aeaeaada24633ed630d3069961c627728a8717000fcde71ac985a0f0184fb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23be65dcf3899f45dde56ddaae5864966170bdf3654927e5f4c579d696e10c9f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7db4aebc47a55d2daaa95a7e69c62c72878f153e4d2b5220ecc72f9c1308e344(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d485eed1452efd81923abdc5c82bf0024e66f37150a60a7bdf8bea0b875e677b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__361349a27e9c0e98d7edaebe76e68d0e12365f849b088ebebb22861ca1c9524e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cb3ff2c0e6f71b1a80b9ff964d721b0277cd1ebdc1cfa05aab3ee5cc87e6f7b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9432a711cb104d1a3e21b9ec86d95b46955a960202221e0591d55f5401c83f6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a057d0df761db200028962797c25c01ad500ea8de4f3db1c1462f22cc20a1d23(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9184ff1e0698ef6762e038f582112baafc45d7cf339ed60246f660b6ba49041(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__496c0634ba55ceb6df339cd873eee4f13caeff2d0fc311a832b1886ec1336ef6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae85374d30e5131fc550a03def55b7bd5d515ebe7df45dcbc3c4252292110ff9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__262635409bce10c36cba0138856e217b337f7ea7ad37d1f1a58c056c184540b2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f26163db59413efe1f71f27dc34601d9eeba67eed5e70213e0992445a43a86e3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4eeb0fb816fed814894c044b03e344ee29af59399b0cf36ed3a95b93027e95cc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b3986dd011dc10517ae797233077ece82a0648d6222abd77b3207044eaa0d6d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca578294bdb65ebf685483b24872ec771a30f7f5344cb52f5b532b499d5f1749(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcf8e57c7d35096cdb7da7b31311c05484bda8b70e31e012424123a55b76340e(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__144b954f1cba131aa462fedee991eacf872a8a0053ad5599b83e50becef8d09a(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f36a11887d3c614278e735338ee757fc02d93b8f029b19b38e92563caec3b8c5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39f870a380ef2ee34eeef02113c611dc168fc6f12d51abad400ad48dfc6ddcb8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68c563107243e4aebe1fc351d5dacca3a084184fbd92e2d45369902a6bfd0512(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd502475f2d9f0ec629dcb0801b507dd46eb3fa067792dbbfecd4109c06688cd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1e9aa8ea1559587a8a504e644808658ec5f1a1814963a3c8e995218ae97eb89(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f90fd45d4abc9a10a8bd5c7c3a4bb31b1c1eb8f55043f5187797b509f9c0d6f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__972261cc243eb45fc903b85420356ef295e84d3c2a43b50c9f4df9138f7eeced(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b1b8359dc7bbc391c37e3dffa1148c817ce0301d64fb48f34a0f4883016f6a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4efdc773e2707396ef73b5ff466bc1a1dcf995c75912d4d512012e04a21600af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eccbfb753e264fc9e2a9b56f5f69f7a37545197ac6c46e28329e9a32ee7ed64e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cad7ca8b6c5ad1b4537f53222241bc2b3dd523b4c6854a2d6c8ec6e752be8ac(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__147f5f6fcb6a89aeea9d0de1fe0b9e639c1c7405adfa3d393f701253652542f7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2fa5d861036e4caaefc7c72c065d59d6eff02d41551d6172bf57e38e8b9bbd67(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e5cd4d29c1ffe44013630941d1fd04250124054b66d69143584286146565be(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5fda026a652fc1f386e17607d9e496e6c5cb787cb0c58f975f72854a9f787c5b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5496af8a4747d25811669a59d4d1a6ff9afe729fe4cf9ea574daebed09dd5637(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf365891594b60ff3a4fd7100096f204bc23f2d7e21d8f08cd14b0d653eef78c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97fd61986a7e5613a6c369bafff6e8ab3f00934dabd59622abf30370ce0112b3(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a11af635df9e10c501842aa191d7db74c947f6598cb4a46f3a711849908ab6db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6ecf20e0323f592a3e69674459430193ff3091441621a345975eb807237ed19(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb8824495ca5cc509ba9e8a894f6f284071cf43edb89f4fa8481ba5544feb96b(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40f822a10a75870681f1790f49251dfb4543b07fa23c3be530cd5e58c72c9bb9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2194fdb21b6db172e9bdc6fc468b78a886abc8d4b060fcb1506fb9463fa0e4e1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cf1130b486f58ba3044f8c5c8ced1ba3121e4e3462d97b71e0f6174e4ff2314(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5257538661bb7f32bfe9a68d548122b232d78a45778f3e98298f5b621d11f353(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8e35f7dae09744f45b3432ce05b1b2f9d023d7fbce45996067d1284a9a26526(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e31e2cf8379eb467b17b65710707da93a8465f37a2ce4e6673fdefab44cff6b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9239e8361c6d7eefbf24aee79e6baf6c80a3a3fddca45c844826d1a6f07bc242(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef76fda7c9b144756f3947f3525bd772ddcf0e89ea4d8ed25b30f85714216ec3(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95c7d31f1a058d15623ab055b0c9cb126cfcd383114084d24228cc66862df9c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c75ea85e55f3327a1ed6282ebe81b8b7b701b1819e82efaf1c066ca9f3bf2a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3660cd85692c96dd885a26fd42483822f64de2d383fab43b9e967f33428760c1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1910a2c0746527df5360d01785c40b766f03974e71bca28e23018ef01cb532d(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58be3e86c8a85b716261f4028c5c0bfdbce8d8e3ea97f0ffb8761a60a299ad27(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce5e0740b0d2ec74fe63f5db5f172dc99b5b30e2e1c54e03b89bbaffbdfd1870(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b1b40c4a3f3e5436c88249bb0ec4380858cb2ec32b9a63417e55af668a36bda(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b265e27f7e1c26c7944ecb6f8f3ae58a7afdebcc6b507a8dee99709612959372(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb64f454ce7452a655e44bc6944bc3e0f1b3bdf32ed6ec5ba2cff30e0ae53dda(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ae754ec0c6b5b341b615f2fba1375f337303b8ea67aee890ce80781de54b630(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06ed9e13f8be2b71dc3774dffb25f3a19be87cf78f30ec1426d5f40ab11064d7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e069a24c9b97bfb2bf7c6d54a2d9790c0dcdd15b3172ea1f6209d5f57414fe90(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70d1942ba417f3b3d9b2ae687e9aa42cd92ef1b8eb8d57c95012672e341691af(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66e58692a8735940e14006099431a923f4dbb1a676801bf85a7fb452b20ad20c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6fe0c2f40e1bf90c7792156cb5ac78bb90832b74f8869cf382f3079623975d4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d53f63621320300a4b35a731aaba77b34b1e38e8207e96ec6a8a69ee7e51e14(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1d13d878888b9d1c293516bf60c0fe3d1ba6264fc2855043af3aa940f451ed9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a54c3f6e70779ba0c35c95f35b560aa45c7fe5a2598a23a9b9c676bb3d725c0a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5db8cb4368b49e8a447dbbf8f36206275df4917da0af61bc77a79550470aacc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__042ceb288173ed1ff5d9c7f539f903c83da3f7030858e19182caba3c5b3a0510(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f16a0e952a5af6c9b0564eb2ed68eed840d9ed2d4ee9647b03da1fea7175297e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__331804df4f7bc610c644dce53da9361f230a3363cd2a33915ce7592d34ee34a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1224b40dd71b3bb44cdabf840a3d02c104f963e92e1a05771d7932c876c3c390(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc701b9ea61e6426eb16ca75e65e36848aa08d0bb5dc5e2f49dc2e03624b5d3f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c728f6643b6efb578bc51724e9df10b3931da5942f2e00f4bf14daab0e9da58f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e34de7515b24d6ed11fa981343b8c628ee79d5a1bd3cec7047e8d089e5ba79f4(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9012acbca32c34092eb567beb0da05849517d4cf5329d476cb16e1b9dacbf72(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a37c61adcf14593d269456a4b7691ca622a170e571381265df23133d15a22b0d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b59306220485705ff37731b8badddab8196630319b1ae782c30db1ef92677da(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__473f2b5bacfd4c77ec6ced08f607ec523a7a91fa57ca3cb04333da77208a03de(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1141d12fb537a00f0c9c4b7c2f1ecccb43a20386a4de29e2dd4329ab81f8ed90(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__708889f9c33076c674d4f39962e38782d6d36c1335f4906cbb4e609631f3fce5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a004e1e77451e337e3ff29a0f7bb7409047962535f0ba045d2157fbce9aa3ae(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__507d8adc8e44328de21f16ab4d43259256d299bd8f12b75cb3ad9221bc9692d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f246ebfdcd0f868f9ba89f43b4a4210f53349cb898810fb866155989e46890e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21536c942694efb0f5e62d41515877d90a203deb52374cfb8d70362942fb3242(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__676c648053293144c0435feb07bfbcd092c634b8ce0b768330ed1991c345e050(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f19bb20e83109494644abeda892ce5a7f9287a9447b3889cda4c835164e152b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dc20db335c7f5e0edf4b953815a6db966c761682b13ef29fd134c0f3ac362d4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b67bb3f62dc40900bf7fd90353e24a1827f9ad920ef5018d13d8856d5a27894(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbfab52827f275130d16c13222fcf80d262a57d1fb1afedbe94e8d9595b40c8a(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__405f205fd8638afb8896d45d1067176396eb35ec76460ecb16a9efe187c5916d(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efb2cc251aa36af4bd75e54bf55686d740eed9550ec343d10e4e9c5ea71deeb2(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f77747e8c5d2426bb763d7d1bd7c4bed47f352d46d84ae4675025dfd0ec8f7f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e3a854ed68e35c6e79eece5829270f1307d856c5c51418573fd348025f4464b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0679f9bd3abf345bc5956ca638821b831220d92619aab9dd080dd04f349be404(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5de1b636d28f3d2d63585ac75358fff31534cf095780ec8a7386f346fe9f3f07(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db53749faeef14d0cdd359389547acb9e5fa84c4382f9a6f38325a75c3aefeb3(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68f098b524176d972454df2b989d2de685b4b605c0afc3a7f210cb670b8e5a0b(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62ece0a85411820425d6551670a0b4537e22ad44b96fa9ad5ae39b6fce434585(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__209848445d92cc610c260f5aa88d7fe1b5050b4fcbb6503599d2b8072cb9e8ff(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5536904a406dda0ffa2a3e5ea8badd36968a9c4ebacfee19daf1ee376919f8aa(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__258ed431b9f1fadf3962ac296bfc2b32bab011d87975c049688096ab96c56cf2(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83c0c879595f04c22ec9b19b3d8c2091422c50a33249af6f6db84b5937e1c9ac(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a2d59a28d22187b48a864071a960dd11d4667d73ccd3761e4d1c83fdbad79fa(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__536e78890b82d38ab241928e30042da09bc46bfbcc0fc12b3f02483f0aa19e39(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46736294dce4c92e7a0bdb9ac3b048773f662c8e00f446a894b62246e44b9837(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83a981dffc7111bd40f7cd0f129fb41de8d9f158c42f31cd4a969fe8621024e4(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebcd6078f8053f0b89d0e91410c2115c9bc1631615fcf444d5ca69029dbc788c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__436f24ee060f59df9e66cbace7cc98b35fa4fc26800643341b655d00aaea7335(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c01493c762f9950cf7b7ab36ef51544712edb93deb7d337f8b4b2845ec1910ae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3691b8ec332dc9bbd1afeb4e4ff542f252455b25ff30e9172697af12d249e16d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7949d7a0a3beb8001e885c1da7af5efaf36ab5dec662b707ad4d14f7c3a96f4(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f36718daa3a2ac33b4c0f85c3e243eb94fe694b139436c1db5dc207750d7dc03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17e614dc99276b8bee21201ef9cf96b2dde3e16a8e3200d9ba3006545505d93a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d352ca0ef4cb27a191a9e9e3cb2242897ec781e9af929fe25f80fddbaf1d4b78(
    value: typing.Optional[ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__159f66a471417c2b25b2e321c6f2ce90d5a21096051cffafbf25b47535fd0fc1(
    *,
    generator: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
    merge_keys: typing.Sequence[builtins.str],
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__841c461ccfa426d4af25d5d887a43bc3a659395a3bca1837fead3eae5838ab37(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be2e9661fe6cea42d8508de49bf6d73fb3631ca0cc7c6b09560c30d5f35e3757(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56ff2168b904e0bb10cdf1d5cb184881e8bf3ca1bfdee58970a533ee09c5f158(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8114bb52684aaaeb0e8b9117c128a3ad9ebd63121bfebec44aac631f97e81baa(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86e0cb40add3441225f8be9d530e5b32010aad1cc55151a70fa469f60475b20e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__976c69f9273c938e52806dd5d43d0a67e2384214efd4a4d21223d57b73e3299f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMerge]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__649e3fbea3ce91d15aa22db6235fbb2e31e0d8ccdf003fc2ea59b584538cb79c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c1410dd661f24d67b3578ee5319c59e4eaeed77347656b25f32d2f834565da9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69ed9b479778ef6a6bbcadfd2265f1179dbf0bf430f435a655429126faee4d72(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f230e6bc7cfbcd86d371aa17afb6023317dde487795eacf9dcbac8af9099565(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMerge]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__450dba2055f60d3d454c8b57082687a2a76c9990816a66579f259ddb0ec746dd(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f39dde52d290514102f64b53218d66f8d899c6047a896a5186b1bfa1ee16b909(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7c874500d391ae5e99a91880d79378fdac23c38cacea802141063774de04be7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e34e3b8a132ee9b927a586ce288f38280fee86b58bfec6993f924464ec804292(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89a4eace69b71d30b92d93f1a50fc41207cc458d92f5c44e29c80028101fce16(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c20033c03c82339f1048535b1cb9f4268b9963d4ea54ddb9d0f1ad9f04568642(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20fc84852bf181f53cb37cebcb3ebbe1997b49e31d0c7badf7d6636651f43b9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ec3a42aeb529db5831bac9dc080d8557a0d5fd67ea3fa6d62735701ab439865(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47c0b44a07d1779e69969b96406725f808f384ccaaff49128424dec1366b94c0(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fbe3a6d16b319ed9728b025bccefc55989de699cdd1398b3966244d6fae1823(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14156c389fbb85381d7321e429e238de718d1cfd5ab7ffb65487fccb177e3040(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__910e0912178c419c9c24e9641191ea764ce88507bdfe6eeea7d894bade8f34ab(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__545d35ea36d1b49a2df502e4aa2d2e712610ee5141ae2cfb87cb61021b88e34f(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ca5a33eb9fe6a9f1866103c19b641d18b0abce649adb85dee4619ae404f633a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdfeb1cb98dca97bb5b541163b2008399275f74d9843cc034feb9ad86ca997bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e46ad90a917a42aa3c0c638d7ddbcfd6aff3c1048214f65c982d18fddb373726(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a64af7b11737d1a5088ef1d3b5622f4b4f6ec68c3abab8cf9e2fcaaa9acbea3a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc9956815be429d632bd70289ba2514fe5685c33812ed0213680881a66413c15(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8288fc4f3ffb03853ad11a8925ccf9d135108465ea4653e8f7a6c3982d59849(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ba896aefcd6a04ca7c5770a4aaead2e611ee8fb1288ced9fe146d797b153613(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__701f62ba9259dcc49f0ced8e5c9b134e730fa3403f6caf0405de0ec659f81984(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9d5f01a87435013ff0e2bb7efd071ffbb80b5e55090d2ce4c75e14b2cedbbd2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3f852e2231949b48562e35162bcac444c5704395f66d4c378c7ec6dcbf03f07(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81c9189119901eeef232b68b516d31076a60a1e9c9a0831417796a3180b97800(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee10bc371583c3e04c715993bbc13ee6781169bb41866402b9d1079f17cd3a0f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a511b439dfbaef5e7c074bcb20911f9843a2e21cc73267f47fc09b3ef21a7ee5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c52fe41eac4c6117d2692bdfaaf8e15e047a6263488ae00784ebd911dcf0a617(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2faa890baffbeb52f69392639180112bb9aabf1b863e228d756043bb694d0cb9(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf0f16b5a4a014336d29ce8b80e762bd3fcb7692da5e2b6965e0783363af0323(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1be002ec86f4306b618324b0c57ea38c5ad5068b0a674918aa53457de9c572f0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec6536cdb0380b96ffa59864f22f43bacb117ae85058aa490728babf16133c6c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe444d0b1f5ac322994de2d4bcea52776707981cf7e5e8a3657f9a794cbf2241(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0efb0854fa6558ba6ce5b3d4df762db56b01c674a209c56b6d6fdf3d10129f4f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f831e2bcd0ce9a2c1f61fca423b2f419f298525ca596bf45b467c4d2d3bbf309(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32eb8ba77a485613b9847b1bdf85879492107607afefa1dd1becd4ac0bb8f630(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__536527237b874b21ccbe82f968e4a21ff780c9e7e29ff1d5bb489a380a7f7c14(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67730c35f328f95d7c2d78544c9f816ab4aecc186066813b4c4945b7605beb35(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ee11a934838573e76578293c9f5b337476a26e37d5f9204a550507880730c10(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f87b2784fed24ecb995016c7b8cbde7e2f29baaa6d3a54e51c8085b5f8fccb1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bae222e6361f8c160e2a4627cf7175831ed418acdfa75566db4cd24190d2ba98(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a7ecb2415bd68676513da69eacc94fe652c81a8e4a96e33818371992d88e57e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d07c153949e68ea94c40532ef19acfb7ea9f7a31d41ec4fd45f4709fdd051505(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e103e40d6c08d479d338a49cd779ec4e908c52668f0cef18c1506f1fb251c8b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87139e76691035a577da2c7a5067114a084e1adea0534e73db7c1fdbc640cad0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0698b414f2dc1d1e989e89cf66f01e49860403a6d59e09462a40bc0323111dcf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffb39897dd31eaabd3f1dc47b75dd62ac555689e0e71d64b2ef4b528ea17ff19(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dba8bf74e1c5e5a348a008d1c93137a67207dd1adf5b2cf4e20b1887a20dbd4c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b690e8e40b612f741522986ad413f7dba8f84b1e04e3f5f74867b2783d2fb02a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__390d99ad54d778101918767906a8e5875889d91815fc3ead0557e737a2b7766d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7edce3e0a4a9748fb629b2bc1c5f52dfe53c4bf4f24cf23487fcdf24fe06d789(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f98639d52e4a68ec9f05971227d902b93b2f993f4cb15a48f6caeb217277de4d(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d5a58eaaf877ff10ee63dafc4839569612f711ec4f48cc7160d482c75e0858e(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59f92efa64b210a280314a760583f1bf1e30d8507e2c0cdc13463374f91c4e1c(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65333cab26ea718c5e7a4264b1177fb167e8279f57126d62db9636bef2da19f5(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f32bb4c864d2be3c19686c046b662e1c54b6749b7888a67fcc0255e6266f6720(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27733ff686a66df36a85379bae32485bfe79ddadc6b152d98bfb474016d7e2e3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19e3a66883d88119987f54ef69646658cb826685abe8c225941c7ffd3d3463cc(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e5318734ff10c7098c20d06d21723c20ffccdb61ee00d6e3b62cabd1590e1cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4b04a0ab31277c839e195dbc3f5a4c85c0cabac17c739af094c78b4527a3960(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__317df56ad9ee789480360627a9128cd3e9432c27b1d887dac321fd0726efb335(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95853f0ae28a468df94eefcb51248209165cfbf421df33795cb87b9600ecd562(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64dde7bba52771b87a251415ffbf748cee1255f9e7ad8adeee9382b849e1156a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac6048ddee415791c33d30e5dcd8022d34ceaa0c883f85060f5ce6f8abb6c905(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__067ee01f5d8320c61b6c6ed4f82398a0070277db6eccf0fe99313fa1cc636d29(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee1c812877a3a96c43838467c326bed9728a54666767d5fabfce6b86c394a48c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3689684d0617508cf1cab9b17f4ebb858796b751b779f216d0121c873cfc59f6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e158699c53df1318eb57b3dbb15760b49676652f32b65f3d2271d38698522b3a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30200beb164861c1f896c171f9c64cd8c76700c3e9d48aae23abae89f7b42b15(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a64c9f6b998e638747b440c6c7165fc08b1e2cae27f134a2f3856bad6480f17a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__624deebe75b3a91135c72139bcb520cd557e95061121e18ea6cedba079abf811(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b6b9bb25a3d660b12670665149fc355bd92f80ca7cf7083374164c7802068c2(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ebfc4c7b4f3d776c35d7e1c7e50432a0d5a924dbe477973784e228e2c4fbb61(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56ef393c3b7279d3b9105c19ac31de16b222aff076d05e4f71d45f74e6756f47(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__877525f2af01f77e1fbbecfa500c5e64a02c1986e4c52dd515954d791fbbb489(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9750ee3f1087dba110cc9d276748b7bc8440c6d2c02c07aebb825b8519cc44a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e819e37d46bd0aa0357aeec727f0bc41d94b692b9a565861e91aa465b5350b1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6e61ca8bf6949c5a60e5c20090fdd06a62473bd2e847e11df617237dc1caa5f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__407348591446bac9b6d9e50ab3491dd7d196e0f62936c98c9b26cd2e8b996ff0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__928f9c4d072dc3d7fb0f66135ef5ac79cfbf2444d5b7cefab997756ab3bd098c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cfaf44c51d8a9d5036766795c582387e1ac4e42e0e84d1b7bc55ad515889009f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1645a515574966096f03d5de4030d7a1bd955a2c1437e8acd960a712c762ed46(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffc07e6d6c6f0bb3235bbd191cf6e5c8a24ecf8e39ba1acc8b2522dcb53548a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8ef7c23565b589fee527f969a9460f698646a82a7a08169a62a210638a424c2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3449859f312bcd10656f7243e499032dcf57e7bde57008510c5eb2f00c9da8a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49dfae5e06a746ee09a7da31bd03be134ff6f2d6e20816de4c90e70e9667ede0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8401a3f35af75d25921d15ef5201ee179b8be126d317a4d8f0129ca2a289649(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bf7fa38c9b9435673fa1012ea17351c57c870f09a88ad4cd800e8b34e79e124(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f9d47f8c0182111c392e75f86def89033b6de915c5ebd023be482669aa2ab3e(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f71cb5345f76f7cf7e1e05c93ffc6537ef670b552e2ea1c3db3c51105689ca45(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46718c135d006be0d69d84ca77b1c7eeb4cf095682a3ba4748b997ff64ccbf2a(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec6d86fe8b42a28f8ad06a862fd135c232cb19fad66b47fac3f912a96cc40916(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08f8d13d57ef9fe02fd13c9afa03ed187da3dd04fa115ca68c2960be292036b4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac268c0a5b90c9880bae6e06d35ab0c32dcd5da6933bdec8ce8fea782d6302c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7334e90065f5d50beda8148a69abc7c557d3c93939f4fa9d6c5173c67e560f89(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c350650da2e931ca2a7a4dd8a0e9acc4f98779d6643f26ebb807c9fe24836da(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab731170a43fcafac2f94344ff3f4e617bee346f3104a25c555f28d3c63b84c2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d490931c9ec88e839309c5249b7f4357e083ea3bfb3e1889850851c0ef9ec6f0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91524d35fe7a2d916cbb4a4d1cb60b24edae5bccb7f89e7715f4178f72882f04(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e545f275e742b25ab91497c3f18ba060f2730dce7560e20f7a78af4e30296ca6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8fd01c0655cba1594efded821ff0cc8afb7bfcaca79b8d1946fb5367c7afa59(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6327b16b203682f814a7dd4cb31c828d4359d417dda5245dc31f037f854c4771(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cfc847c9a661d094e92de38415623cee610bec62897a5ef0de6054ae734cac42(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e7ee4a00db5b7eb0e926db8d2aa35eb561986f05226cd8e27608636cfd39c8e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ef2318dc5204f1afadb5180e0b4907d952fae33c40de66caef87bdc90b7ec39(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74c383b065771cd1cfba8b0a304a0c4288341d7dada64325136472e4962d8127(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b7b2fe96fb13359ac0d012df336c050ad6da61b10731a1bc90217b713c07a8f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a84639a201c2e7708d795338eb21699a92b8e4f632f06f5c06c00eab3906bd5f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4a1d2d70b9d363243cfde909154c00fecf1f01743cde2355616877a82057873(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56c444e80b327b979af8672f5706767ea068c3f7b2b647c3c8736e61df5b6386(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__757b6ccbd9c2a96b192d83a4b4c109d8edd9465155a31b91be1f65d55d72e54e(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__075ed1006465154e33384cb530567f3072a3ae5c5b1879c35e69f6e9ea7291a9(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a759d96d54c084e8944e4f16ba67719978ebed673d99a24ba6490988cf85487e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7f24d25e2b265725141194c2823e9ddbeaf93715672138719b1dcaab9cacc54(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b773b4431512adbffaef996917bc231baebf3f40ea03d0890be492c29277fa8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9724ae7e43a1a6e788c900c7b6afb1175dd2a2b43fbc16d2cf2d8af412edb637(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba72cddf5935e14c25c8e6a0bdedcf91314ad2d8d3d12a54bda23a2ee412f8f9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31b62627f7e01bafaf2dcf04d5d535189a54f86bfb2bb2650980425bd37bbc9d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71ee352be3b09ca98e599d12c9b7b73bab11464aea3ec96d3a9ec13abcdfabcc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35e21c19f0959a9669e54c251bd850bfccf8af3f7d950f2b00d239308495dfde(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60ec6f5340fef5c1e7db5350708093c801f28fea975a48270b3cbc2e62f3f28a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8633925db10172c9684617630e805c54b35e7eaad2f1c284d03a0531c5bca2da(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d746ea724e907914d280d630669a41e5a2304eba9886fcfc404e36a1e2303cee(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f776ffff5eb82402de314c8b04bf9ee421f6f419b80468586b08cc37ea233ef7(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0856346a945b568af833317c85b5e8fe1a2014b429b1b631c5172834c785e39e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f052d1c70d49716c87952d137f9d08027c526fe5c0cf9769eaa892ac358d69e7(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6cfff43a219a2e231c781395789130e9c6b163ca6dbc134eba87ffe65bc4ebb(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfa7bf216971f59a37a8f2b4c83599d8fe6b79156976e0525cf65051eb417817(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc2b12e1987a3470a6c67b34f771cb2df65ca08ca11ee56c4307069af97f2b8c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfd6991ad11eacf287a1c02df274878fff5897447286c38e97bd249631a6cb20(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f30e1ccb15bb603c09c0d90a935bf8cfa989087adcff257bcfa38615f6d396ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fbcec274cc651967d7f6b3d09e3d2f4aea141e9bfa86ea51dae24b802dfc414(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c981dff66844af89a594dd14dff04844a38a865bb3c0c78cafeeffb5724e3f5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05e630af5a4fa7d2dfc29c27692f7780dcd81d3ee34ac83cd08725b891991514(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3763822280cec44adbbd0575cbaa249697a600041e6e84772c59d92c74457bbb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fccd3e655fc09759d7e6e60ea837a5b27f3cd4920e8ed6e5420f4b3a69272de8(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f83b42ee4db92bb96e8ee6a4e95bc3c228f5c1f38c49a95fca55ee863867f9f3(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a74818eec04bf51d13b73e9cfbfdacd7f8336e5d568d1314a5c2040004ff2a3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__781a9a1d0169ef2ee42a0aee31b37a1325adcc4a519292fa69dcdcdf5afefc80(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03b33aba315b450865851457a62e5e72ca2872a8aa7d0c4897ad85bc787db2eb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da0ec882dbeebc7aaeffb346e64058f4a8c91d35bd64a8a2ec0e9cfc872588ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6794b7e68b28ee5baec9d9c34bd7cd937c1057058b40084b4114551092ca178d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd5d9deb89157997294e73985c4271371fb7cf03420af814db05ea023278f9f0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__185d736d693233dddd65a7d5a54c2e5ecc467a4ceec8ab258994179d370ce7d6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dafa3d00ffa4defe0b8e44cd9fb2be968ed224a45afb4f6cbde5f88af93c771(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d88737354fa25ca07b13ffa0e46f8609d1c06c6662175e5c3befa7e9a29bf13(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f93a9b34b4c5237d1ea1cae9ea754583b43a50e12e2d1c5fe74d602c7d92f5a(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cfd8afc6fa8a0bf9ba3fe32e1aa30874dd915f39e61e9506fd52596cfd3c10b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54ed9fb95dd05cf5312317731f1a8141209a7df5c61682df44c0157e649019db(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9dbf5cfd56f8618ae26024c26e4d652fdfe90b9d79f3abc92dea4993c6692c7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56661971fbdae36f5dbf8380331f7eb3d6b9079d4e8696b1912898b85b943bb9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3f82d6e7afc821271ca2b2d3073f42b5b123744711fc2511d07d190b6bc9769(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf3aab56a0c96c16366cf8f39b4a7b7d4c243e478d878cee5123ee3ccbd7411b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b05fa759cefedd64743b1c6b92dbbe67ab6ae28cf3e09e5d97c8e4d8c6ae5d3d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c42e1c881f7f4b7225cf94d2d9f107ed800340964fdb64441df3eb92a255b1c1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aac87581bca2f70001cbbc75eede64e0f04c1387aae7d00904671619505a9649(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abb8f7cc3535cbc15ea8fb07611fb253637a5431bfddd4c4f19d28653bf3e879(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ebbb364ce2133f72d98c1c098b309e58c96ed54e10e33bae934748093466a3a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a422ce8c291a648b63a41c150ca666555da295aca25977e28b9aaaed797576a6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7974f515499e6eccf218e0530e1a6a7472cfde4e91eab95eb48dd1b50f02752e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4d0ab93b75dfefc1852dc4b63e40cd264db4d463fcbec792588c1e20294d265(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1746232b92013328e8040fa9a9dba7f031485d0365f5626f28c54829c3b6e53(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1c3b52a64ba637ae3142da5cbcb475216e9965a6e6b783d3bfdfe5fd8948cf5(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48356d23d11364b9f5f37edab85687887b7ea815fd3be038bfd9692f5438c839(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87506a4abd3a29d18322580cc162d194626d0978c3699411ba656f7d544a82ce(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__023b208574fa17fb847f025f71bfb96d265d1ea624d455449adf22cb4f75fe94(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f282ada9c0953fd7ba936c442b817bbc77d0993156b31cb5e3e5d0dbbc1c598b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb1a6389068740df2f227d1d6c37880e558837ac7886e094542ad678e06a9041(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__921e897e09a808db77c5f18f1e6d1d02bc077c0573fd5f525333fdea2561fde3(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6fdc0937e2ee4447955ce2489ce89df25c5879faab88c6a7353532499081a8e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17302eb905b0e7aa6d429d5e97c3376a50bb7eb52d946c3073eb7ec2f9d5b458(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c379b56d8d68d684e3cf27be1e768c1521f2aca06a81abe415e47dcaa3adc45(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7aa79910903e0b5ea36bb670d4acfe663c7465cfe966563ac0e9719cbbb4d7c3(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ca1ef57ca1a32da805461cf3f33abb0a14c15a8c75da76f5536be59744dd05e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37a8ec266f97190fbf6e035568a84a9ac3d1cc4e6aa59444b0d680c9b903e46c(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6a742ebcb2dfdf28170298578adf86fffb4eeefdf2c3cdd7ee60a960600aca4(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a98d5e22403e0d69e6ce0491603361a5155b2cc960eea54378a943e4f338e76e(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3df6d29c3014044f516e52034184498fe25ad632d01570b83dbf76dee2aedad(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c192f485889c264d2cfe7a08ad5d0642abe3707b54bde010a6f27e10d1b43942(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4eb7f70c59dac49d5aade1bc4047a34ec84a4e24e95a18d1912cb5c3bc20dda(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc118a85d1d66b83715f7f05ddb7f3896ae291750e3c336abc77dc530607d11f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bc635f183263aa12efca9d0dc8a7625a74925aa4d9c7ffcf8b635dd6fae0bf5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c322afc0570037584ad0308568ec803cf15a4e7c9b58ae377aed394262cec92(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54693d05b6fe14d6d6aa7af7d882165f65c480a8ad0d30ea79710cfb24fb0cde(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76186885ba0a8c1db5ed59223ed06f2df140034eb5088d44761feda84b183e85(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e2d3d404b893609bf20235eae0a143bb062314159f21162026a279450787c65(
    value: typing.Optional[ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0851627208f5c9e00b3f7143c16891829c19cd6d036ff37429722decd1fd2605(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bca3f16eef8a94ef4bad37ab0244fcbaf2e942260c2bfdc689005cc24d9bfa11(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusterDecisionResource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66cd6dbd090ff5551895ea211ca9b4a921ea83d7e97f73c6e0b067ba3bc4e608(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorClusters, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab20d59764baefa6ed208f498736fc03179ba6391a3b29310c06c64613498af4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorGit, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2eae77762a5ff9ffda4649e83726aee5989afc42575d96e9ced7d6cd681e291(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorListStruct, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8373eec72c2ee7c1de1892f0ae92ee020e56efcf9401a020c614df5feecaf366(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMatrix, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1df2d89662df423389e927becb1f1a550f47e798480bf46bac6c8960e8ab1a18(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorMerge, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e622d5bc5d5dc2c1c77fc7406eaa9ff7411103138a457c3ccb1a666d6f8199a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequest, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__212f6503435654bccd35f58e62fa122d22510792433ba94281d2956ea92c3105(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProvider, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a225905a42c3f5a7d72b911e80ec48fad61480fceb545fcfa0011b5558cbc3ae(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGenerator]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__203cadf2106f86fc8eaf5574db847e99679021ab0fadd004064ff706b7c1971c(
    *,
    bitbucket_server: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestBitbucketServer, typing.Dict[builtins.str, typing.Any]]] = None,
    filter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestFilter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    gitea: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGitea, typing.Dict[builtins.str, typing.Any]]] = None,
    github: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGithub, typing.Dict[builtins.str, typing.Any]]] = None,
    gitlab: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGitlab, typing.Dict[builtins.str, typing.Any]]] = None,
    requeue_after_seconds: typing.Optional[builtins.str] = None,
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0517b2d984a21e3bbeb5ff1934e186f0b5b0a36d6e23f22d453e30ec89cde1ae(
    *,
    api: builtins.str,
    project: builtins.str,
    repo: builtins.str,
    basic_auth: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae89478c0b088ffbc5ed926f3d8274033b93ec12f89ae675583648d16464cbc8(
    *,
    password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f55196bd7eac7c65a3dde93750cf348b7f44a3c53f461200272411bb997341f5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__915921a4fe64fbff96eede8f2e3894a9592761ba25f8f5872e683e1a77a404ff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__813353484ca784ed760b24ab5835bbec72df75a989d343e3c13438d0c0fdf0c8(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5a52af03710e6c63e0e7a978fc624f26b7467feb17aef2d3c8286850595a61b(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34c714227c4ba00732ec0302c8525413c04554384cc3a10fa65058d351b0f412(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e439afd1606ddf71ee6a8a63daedaefd814e77889e011d65988c3ba4f89a58e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dee7e43d8cf09caa5a533d475607ffec05f99ea48d99868d10ab0a45370308b1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b25f154d9f97c0509ed2df2533290725d5acb50d0d659a9e85d5f6d49a543af9(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ec6850188bf108ace3b682fb0ce93c7467e6e9377ad63fc39de043cdc5f064b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3edfce164feb54ae884f8f4b42589e81e28bff3bb123908440d70a15116c1883(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fab40d570dc1530cf71db245277e2288ed0d063c7e58ee05d6816df55ef2f9c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67b7d3bf72d63ed47bb7b7ae4c630784fcb5530e2d795adf8dd59f524a07959e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e57697c4cdbec2b9ee744f0011ea58f4397f1055a66f7e8e1abce29538c83830(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestBitbucketServer],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab5269c82a0e123a20487a11801d6c6c3c8a3c7dde94e0e48794c69dd7a5bbdf(
    *,
    branch_match: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a4b3f6a90c3b0dff4b8a914ebf1a7e4b3af46c2e7a9d566955006f8b2c8092d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a650d7035f7a12cdbff3da1168c29bfb76fca4a07dcb6140349c5f8351c12d3(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__576fca86d71062ffd1b9cbafdb2df9ec6205c64495839fcf91d68141094adc9e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2b6a87026c5d8c5810c2989c6582bbe7a807922792ccdbaa5b532dba52ca2d4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06a915863daf8a673b31c6fb95d1873e08631c765fed4b55b416722e81183ac6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__870549fbaa335cd06ebb0a65d0854384a72c30d90b64072df5ce91456ca5ae2d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestFilter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce4d7f1224f2d585df0947ad4ec9a359c1aecf0ce861bab802a481000de6de1e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9cc80df0953b3f9b3b4a4e8d0efee22948f13f7ab567ae5a6c3706c598fbbd8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__058979965205bf2db0a86abcadf096606f09642472702cc59a771631c2021031(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestFilter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfe87d3dc56175d0ebbe3387b52a7155c16bc9b0c98cf7e7884150003c01305d(
    *,
    api: builtins.str,
    owner: builtins.str,
    repo: builtins.str,
    insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38f66d34e8d65b687eed93c9723263db27547d5cb7e3862959f7e3ca65d3bdf0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1322f1a955a13e9281743fdced87ea95016bccf7b4842cd9f38e6451e5865bc9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4387ec81daf5567489e67e4cdfc1adedbcb1ced2224a623da463949331eecf9d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e50a589eb8020c3cfe99fa656b39e51a2d4c2c9223bd9fbba5254db45535bb3b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58f5f034f43860710c3456412da235c34db5159b92e0f8452b86bbc5e5cff5f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa95dfcc7bb30d1d1638a934913ca5b14e5f2665f943bf8a0fcd34fcd47f2175(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitea],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7edd9339d58eb853701bc3b068cd7cde9832896c3457e31814e7b45527aff120(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c67488e22c3e97d3feeb2296492e50fa811384776e80cc79b1e57a08f873a221(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c49408a4645c98a0f582618b6e441e9377d71a8f3c2fe454ce729970bfe089d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__755a60113e9193a7586f8762d84930e847d14ceb723b84a3ed8499608027ad8a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67323ab7da1bff1c2b9dbff584f34f9540d97927223aca29c46beee706a1b90d(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGiteaTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f0df171e8b0f59e1da273c89c5e895ed2afa11f9bb0544b0c81bb3bde122020(
    *,
    owner: builtins.str,
    repo: builtins.str,
    api: typing.Optional[builtins.str] = None,
    app_secret_name: typing.Optional[builtins.str] = None,
    labels: typing.Optional[typing.Sequence[builtins.str]] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGithubTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__247f29fa9e6cecd7e0670db181ffab94c689a4d7008e81822424a0bd98419341(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e95b3c69a059da147879ce14e3c63fecc000240bf929596a51f36d1b06d0c534(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__696bd8ba3b4e3fc2542c4eb62175579de6765bf87b80c789eae09251f2e04615(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd3014496f74eef6dc79c9ed056d9ea46302875cbcc453f17009241e1327aef6(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfd27eb28daf97607397353963ceec107796f6783ff6afdf0586345d65975e8a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a0b3c98ce7d7d7e75c1fc453e945b201573492130b3cb48bede5572a6b61512(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22d5847cc12cc0427140dc269290f7487e116378dd5b1b2236e5246c38a2af2a(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGithub],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5611c3c9fce09e90157aa63008db4502264922925ff2502b0ba2af2ef1666e4a(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd718ba338ed18290a55e3c4359c259580610d2e15e6488d79bbe45f69e1a830(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38d94a0cc645a7529846e167343ddcf446d814d15edb5dabb171f87022a82a5c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__064b05cf35795392fbcd1d0fff17f11f2e5021237fbb316e9d44caff5015b015(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46d0f287d8e10f968907354e56f7dfa39a1bfc5fb6ae963ac2f410d3c4800dd8(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGithubTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c4dbe079a50babd607af49bd349d953698dd98365e10bf4b75461ad3f082961(
    *,
    project: builtins.str,
    api: typing.Optional[builtins.str] = None,
    labels: typing.Optional[typing.Sequence[builtins.str]] = None,
    pull_request_state: typing.Optional[builtins.str] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7f29ffb6018612a757fe85f87cfc6f61a3f7521dd9285a2bbff297b036f3233(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c3d1d426d11369a881feacb76348bffb02f2a743d4c891e7eeaec6466c0ff63(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a407532a0e5bd62d8e0e1b52ec66daecf3859b3004c8c997fcf120e9461fe5a(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c04491ea7c0a0f068ea1d2ce0ec98b47bd0214de45289b78335176da1be9d22(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84a01535a8d9b197fbf90fd978ae1dcad2c8062f0c98ff55863bd543b2f886a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c47c59a25f33785c96cbd34937a68ea60dea65689b2cf5479989d39920b1fb5c(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlab],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34255e2cb821169bdb4b869c9dcd4b2b8f7bf71a50d24a2fcf5b5757f5d27fa7(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf5c999f6612ed1423d5537a9bcdb4475dee1149f2c0f89fea05ca88f60f2bea(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__520e4a3a9ce483ec83580d38536ed06933c758f01d7096603f8633166b7849f0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c0069fc3c23f1d3694da280b34f35a7b91a523de79cac73d0469ca2e685b087(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5bcf3e70d8da2a4dfda5b8d3bcbeb4c52c10eeed4ccfbe8e5ba6dfcb08945a72(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestGitlabTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff74ccb339b007821752b406bcab667f95cb5e009bde43ff7dfb071630906e6d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee048c5fd5d19dbec88194a86d65fb7e6b6bfcad38d3ae1c2d163a4cda768b0a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f3fff9f204cd09dfde26c8c159f3b061b58b7cc9a81685325a76a640a7e57fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a521b822f33cab597170e572ca6cce0a7b5530699eeaa34c71e502163bb05f0a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__beab4eabf961db3ec44c2c395b94a54739a1a8ed87586bd113704ff957a36f68(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16625b3d1f765a211ed4b2b20c093f12910d3d1d3b2202dd4f23d1f5f54c88a8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequest]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de01d9c079b8a3893de6978c8416574594a28349d822bc186834e804dbafc60d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afa5562c6801b2f771104ee93f45cfec281ba58092b32a68b6431e6ebc54964c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestFilter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7b9acc2e4ed55c5d8018b28aadd4d31401b8713ce661706695717d704d6f3ec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1f1cdf8584cccff79f9764de53a4dd8879df60ab3a92fa87fe0a84151411171(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequest]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d31bafca12ad7656c71f53dc03f2d78996b65648675514f12401f6bcf9cabb22(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5a57c9796a160d0a09d108d13b60d9c0b276f743f5122d29de41315a1eb738c(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5f45b9f4d74d7f74db1ae5fd648d137baa42cd8e8084c37bc3aa4a685ea6434(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f807ccd991e00610173005710cc1887b8a5611f6352c73aff717c7df1bd96d9(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55d511f5fb9ddcc35e6b8fb07dddf55e9ea3567b51c4b7cf2c6ffbf9557a91b0(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96fa75f234f5426242ae9b21fddd37575350141b2be56538aa05eb917154bf95(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4c2ff5be496fa7ee72fc87eba63ad0419453d08bfe7402443a5697278a96e23(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f7922e74251ff611a8c31ea371d68af616d29aaa78cbc4d6296e3bcbeb58ad5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3aaa7988deff86b3c7af293d066fcb37eb410549b138d0c206308e3f3259ecde(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__074a457577060bc23396606939050fec75720b9648447713bd392423658b6fd4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6f793487779c5137cd1f4af173d02c2ab68b55e2223efed088011d3845de4db(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1563a8ea644a7ef2c1ba6fa215085647542e8a4a41bffee749442bea9686389(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44832f7ef15fee3219675236366994dcaa305f8638aff31125aa1fa21c9b5126(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1bc3192572dcc4f7486a55a146519d2bcc462b448c60c4ab557d46de9b688e2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70a43a13911acf2487e3a4d109ac7e774f798cab7f0997aaf3f99a3da7c344ad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__224bb65ff6ec3ee9859ee49ff07ad682169eace40cc4fdf935f5e4b513477908(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af182f32c1010ae5c6163648eec4eb604e41bde991e0c0c731761ddfcc20a95d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc2bba808dc042c90506f42a5efdde28081f71e5eea25fdc611313656d19f10e(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a50e7fe0cdcad99ea773330b1732602777454f7b79694f629a75786f9772eb7(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd9b4b0ef60e7d050d4998d7c22a7afd6599e4c2dc532b4409192d1a87124935(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa54254eea1d05885a9a731447ee497412346cb9960167ef9a91eb588b3a8e2b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e31a56a4d11452c4f93bacf51d21e0e6cafb27fa2baec94900966670fe98639(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc7d319cd42724a30eabd5d2f20583aa61ad2a441125520b0230fd327f49682a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5102523fa19ac34d6f53e665a1c4391470957004aeb903fa4acce1da8600c345(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f98e77b9a8c8af9c84dff77c9e178976625003919e767d1451edff5c3d6dd1ba(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1ec60f5599d9b4fcb8dcdf69f514c67b301fb66ac25b98b1209f46c8d25180b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7810643ab0a7f40b5e6d961a5877efa5bbaddc105637071fef1e49f83553ec2f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf48e1663f2fc4830f3ede5f3a48e0428d82cc646f09ec60be67ab3365fd7e31(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e21903cb5c3099b2c06f516dc68f637cc0d07e6a00ffff2772f56a1eb7e8891(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ee772f5114868708a65a788281fd820c63bc62ea89e556eaca97880c92002b6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4421eb085911b1128dfb2525f8c43ad4fbc65f5df74e26cc8fc076c3a66efb33(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ced1f65777a00a940476c89fde4fb28e16afd722e05f6c2813bcc0678287c0b9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b6297c3b18165cc75586cb78a4a1c9c726a6e3786485984221175feedcac4a8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5931c1ab09c0dc6f5404ad835a379b1d0aad4974ec808b90eba1e91fca44a819(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1dbc01c37743706a51457108d3ac4cb59d6b4d4997261bd8a7c65384607a966a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d75879ee916e2c4b43d38dce6b2e8818423c406207fcd5e160a562cfd3e85453(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0ea12efe8dc1ab9c07cf3b88205deb859cccaa118a64ce54c1f3e2eb4ce1e80(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b9d8322c0029c782d681ae26a364f996530ab25a3e4bbad984d3fb93344f94c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__876a73ba86608e448770506dfc3140262b3e809dfac7543c6eeb5c103fd177d4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8da67acd587f0eab1925ca3fb84014921ee1f2848d1cca76c59f8aeffdc03f0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__889c885a50228d8181dec6ae53b9beeba6075942458abed06d98ee58524fe015(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__274037443c4aae8984f877fc81794bb1ddb56a1fc3610a2de5b5186fd616d950(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ced7589424ab58e49143c349c3d4a9a28a017fa77b7db2b0e6f2633e4dd67a0c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94808b99da325a793f60791e289756ebecef8e5f89c3239f3602aa203a1436ca(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34341c399fa0a7e9cb75fc57e165d8618dbaae3c397f0c404ad8854a45715cb3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9a83569fcd447b31677b5b23eb15a9315a76aa3b5653caef314ac06783a44c3(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f7a0b2d49472d37344cabead0f40d8af51ab65993ad844fc66a19fde2bec42f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dd02033d4a12a303c4a2aba7a0e130d0ff0655d5075abf1969068cf6bb7a426(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35d996ef0e82fec49b9e8d8a171bfbb7f2c9a38ab1d9565cb63ce01f30909243(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2809ee9374f1aac590ac26337bd36829fa09fa7c7acee2e046628af76311a56f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2fdd4ceb0655b79bf1fad33bd836dd7d875eba2886731a1e4911bf62597061e(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd4af42a76966d0ec5146aa03e0a1d5f944249a65789516331f22585374d0600(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb89fe579010764a19459705a2216e040a84d514ccb48cd39f982f23b49b43b7(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__726dc006b80c62bb2b1bf2ce7a4cabcc68bb3a71510e3a915f960b3d7b90972f(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__229856be41a642d70e67dbe239257138b5617194dd7535fb92a9430c31e4fa43(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22bd94a46cdb4e320a372d1baac540fb22045ae100f0f8e1e2cdc43d8b1cc6b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f72a0c3f8094bc61c83a31aa21d83a0488f8b8d2e2e9ec16b8c1c78405f702e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99fe748ef6b8818425828f4f791948e9719c7c0417c5e8e9897aa6f6bfa08d8c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__294ff06d54406d63b2f4f74d00264551df29e79f1fede50368d97cf66d53adbe(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__063217dd316dd9da9836e7e5a93a15e94b72df06722e2923b224d528bbf034d1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f23b5dea58c195ee4973ad7fd905946a0f51d7bf2b30e97c44c647adaf0661d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3411a09b2e945e5c4b6df580965c1ffeff309eea0aa7bcfb9ba73286b31403bf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa3de1f9aa699c3a03c28da2d49fdc76e31beee0d6ae8b3345866f2b0a976f36(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__019ef979d02ffac9d25dddff3f3c93e3223e868a407e5b0797a2b768da183b59(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__841bbabb752969b665bff6a991aa20dcc781a9c9876be524bc8bf818f133eae9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb9fc6b465e92ce83633e74b13aa01bfb2d2715a68465998d000ef5640b9db80(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6098be9175bf880234596ea66e29003b70020f7241de5469d0a2254fe5695be(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc100f377eec687078c5fe013b3dbea89a33c512e95260e1e9155ecb0df3fbf4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dadb0407f26fd810a176c9d1190fdf4a1e090b2336a27cf1eefa28735a5e09e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__420a8e1785098c4894036161a102eabd15b13ba9750d4cab6b50081bb25e8084(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e47be02c23b40f72fa747b8e5f02284f79542aee9aff47425cf20ef948d719d(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce1ee25cb63cafd17beaa2a8bb8884601fd57e5d7e5d8d2bff1977f3dfa01f0d(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__029ccd8fd16434f80eb5810e946e8e527bfdba4ec8bfb650da5c3db9f54cdb6c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf26d1b1002bcb081e8f774d6bdb139ca7960c6a8340a13d23d152e17f0987c0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e740962aca478e0c1e1f5a7305d1281aa9df7269f0b2c282954e4931acfb102d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__befab779e97b108ceef5a9365d92949140e4539424d2e579c290cd7c781a9aaf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bf6a4708ac9fd39069001e8eac6e64db6bb48ea7c75ee09bd95aa35a7236262(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72192b0fe8fee9848ce1ee0caa2a4b4929b809ac33a4ad1194982d8092962220(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09bed79540a55d9e8c78bfd9aaa7febb7449597a6adb434a6fb39b2b4dcc874d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38cce1a806267604341c7015b71336eadef4db4750490276bd31d5e98f80c8ad(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d22962ce58fd839647f931dc4cf26e7c6b3c7e5d7d588a898e18e4e356d221ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30bf239ac452db840993aae226401848cb42874440e2b32e574222ec4fb68698(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__556cbe6aee9e2ebb44d00ad08d97fb678c02685f8c6fb84f2c3cfc18131e31a0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf391a6c8556e67014dad6558422b33715b33dd7754cb292f7b0d5b562d018dc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__584eaaefe1aed9d1978c8143c128d976de55e0be099812b6a697c8d0d11a2131(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b75ebe323c1292d102334648e56e33cd1c9069ac38116e8717ec36231ffbe2a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5605198afc5b72b956b482a251cfff0d56cf3d0bef96b7f2667ca7003d51968(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__483a8add2c699b0a558654c44140a827518c76582809755899fa9a24d94a6b86(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__925db1ba373002bcd2f36d31b0244f677f2dd6141d5c40d29228eade5c1e6382(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a34f58ebedb1be6f9cbf91af319e3ff09675e29ef3d3d82440bf010a0261e95(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adc4ccdc161c0bef426097f0473b84adb213d0b8df3490445e85571c33e29838(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e84a4bad9072216a606e7a219e5e526142785986230746dc6f8f0d063f70ec58(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91e34b08e6c9a961aa291cf0c59cc772130654f257a92d9ad715b0dd12a3408a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14e0be0c0ca493c261a84f50e3fc0c6abc6305fc71c3a24b25829ce10a640af3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7af1abb0f8d1b8515cabb687be9f5f227a760abb30f8cb926d3af87e74f1096(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd7d1a94fac8735e86f61dc64127061fed99a2045ff31d1b6d935c6389acf864(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14fb6bc7c2a44193f7b57708629f0fbc3665532f248fa389c9fa1e920320a06a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__307c841c62c13692315bd800c74d569ce3038309a6be3ec7e2b341feaaa00c78(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb23c0623e9738917099cde50c1b899702b881ee075c6e687b88fc3531f3448a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca0c6e46809c50f2b3373f2dd91420580b1e3ad7291e1b95ccb31cc202ea4a32(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92575e611c9ffba220efbb21cd80e20b2ad56686328091b0a96401a6cd3b1280(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a73cb245ef56cb18ab7ea95ccac70bc6b26b31a743a7041ac94bd43433588089(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2205d546862da657c973cfcba3ed41a9112ea2262d00196c77f9a3949d41454a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c6ea20349c200411d8ee9199911cbbfb97570a58457474570eed2fe5a03615f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__299cd56ef8481a5714d2b276523c86c49e8eb743228ef672ce8f153b23277056(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8030184ef1bbb8b55207f8064f6c0769d9da053b80824f1539416eb4adcb73b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe195260870e2b6bbdbe21abe82d892864ffbb28af7362ac92bb0835497a53b9(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7764a6337128e86cdbbe4baf9b65e45d54780a587ee18830ab2cefef48e667e7(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ecb7887c89130f8faab6bec3ee4ff5752548d487d078c6b02d818e15387ed8b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0507d23f4171f6cbbba0594c617e9210d613ae6bd93212c392c360b797ad71a8(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f795e7a97f15c9b2b6a196a7fabd7fa6bee00be58cf529ce8f53accbd2ccb6f9(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9f0ee80b25094e8f68398f6e6a7f3e3c1a85ce5bf86c19934dc540ce3ee9842(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__761580ee10cbf486bbb89d13edd66cb262d0e829965f6dca8c9fdbfdc030104a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e336dfa790ae628a65a9006f6c11b7dcbb64c8d237c0e4beae4f12c5bba02754(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d23a123813f973b39408018e3cb7bc26aea46c65db077b0179e2e199225c295a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ff93aaaca01966001f6eabf22416af4c3cd23f3ecebdaa6cdb552d1d8fc679f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f18d88ea6cc2b3a0d28505caf9de8fc8cc0cc29e8e4ec36e6547ede7b7312171(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07b1141b250c3ac2cc4435a775fbfa0144391f17ed2044de16f6aa54de8f3095(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fefc55c82ceb718a6e5d3a08486f0c2272db65a41ba09c9b4fd2ccd44f54e2bd(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a451c468548351ee9a4ed4915de57f474729832d2e5db442fd90f786d9eeb3b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31dab383212fa42eeabe45406f530cb97e9d2616c184123215202a542bac2e14(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12269b35231e5fe509a107506b025e64f36181441001c4b04db60ae93352e53d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__569edd9c8f2a79c222541caaf52644c2e6b65578f5e24b872581d8a37130493b(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__099122b52c76966d11fc3e389f957bbcbeaa22f97db5c9352e1472dce09aaee5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19bc6c0ed94fe755709b8fe04f92ef2ee9345f5873d29ffba8c757641e063ebe(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38ff945980df53b15e913ffac273750a9668a47ab9fb327f403477740aea6916(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07ccffd007842c37068e7d415a9f6bbb3ee6afd71bf370570392edbdc6e464f5(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6707537bc6041d94370b64940105e9b2f7bdbe15c6cf938d8f0d7a8dfa23a601(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bbe54911b7f060c2d9600228180915066868cef719dc67baa11d491423d532e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e518bc7cb9b1cf6981359513fa4ef951b6cf723e9afe58059a3e8a6d7ad5fa3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c616738c6b5e0c523d1e16550b0731285fb06513b24d73ebaab2dc30d8fa0f1e(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a45747ebe450ee2992cee54bfcaf318aeaf7d9ad47c1f07841bebc87f1de09b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d78dfaca48d6a6734a5f72f97c0888afe87805cedd276ba581fb75c54d41384(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7b8c6ce2095ff2d722ff4837d57edb02a99bfa366d436721a072c704153709d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ddd690d3f6fd17b2724322be12aa405aba6f114b94beeba7aef5921ab9bcfffe(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89f282487585f95f8c2d4638bbed23a1220d9de3fad0349cee6eb7b8741cf387(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41e492520b626eaf1efebde142ac6a4b42aeb76a11c83f0c50348b554c09170b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a775cf76cadad5cdd4829afec44e9afda582f007c3f62ad8efb72ecab58b9e6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6276130eb27aa3e4d43ca5bab1c00864fb31196501ca4c2a6a62ec66088d8e9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dfc6550d70aeff37d6204a4dbc9e52b5bd8d6b5e5ccb5199948c8697b64f738(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__393bace29730396cd9c9fccd00030b146775731d423866c9b541e1cf4436d331(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39155d42ac30d25243a5b5b0e190f075ef98ff5da535288c5383adab32a1c48c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d323d871a882126c0e977c6e4981bcb48022e344ece122a9a0045c229d9db3b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__523e064af655d928bcaeab5a2c78698988271cd233c88ba22a70b867f365d155(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f56349dbe99b46fcb6d0c5ad682350a790597d7752fb419d1aff1d38c2978b96(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d02527e216a9740f133e11be0b7f9b43c8811f63bc6355c6d015d4a4c20aa77e(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2055c29c2972bbe19d7f4848a87565d5e2349d944a9da351d038846fb2721411(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9b570d01fa1c3d8d888ed68db39cf3c7429efa4d545b51300a0253a58f53194(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1c35473eaa8b46e7deba0c8502ea72bfc77365eca99ceb278a396bc93548eb5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e005fbf7adafec1de561efbfac9b82e032c2e98695d70d6742babdce019d3e8a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2a7a28d9fcfe3e13e074c9a7e9fcb1e911cf3a5fdb3e8ee6a370362287dee7a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e73d59e4249f0ab52f0c855ed1a0c9819a4aa11756c7d48028c20bc945d7aa48(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4207b86a911bb052f6d750be3926046cc8246f6d76240662718cc83283823ea0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9f089a99cf17904e40aea263e8c496bdddb290aebc6e7b0c063342878d2f62c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb0ff5c88068ef177698919ea8945a731ceceef17eff6f94fd26280e59b560a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cde9750c741fdbd8f5c5132920e72c3f295de90db4be8963b991cea2aa34fb02(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6287397dd415e8566fec8422d8cbc10d74fa97dd7ca62c312df2d5cc76ee14c1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0919ff07d1c8c873cd7bd01d56d7727cb59691b85d4b718f53268479b8eb2a48(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef4a698ecd5b9c28f02fffdbb3dde1fdc1d00cc11074740a2bd2445a027e55c5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b1762a1b8a82baad95dadcd02a7b0f14bcc906b360295badeb87313dbf59d73(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f9e9df8a5cec7ca5c8f7c3876645b97b35aaf0cd5fba2e883112e2441349f40(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99a1aa910aa38370aec836192311e7b3e3e4d7e53c85b4163231edfeaeb44202(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59ddfa6801a85968dadae0edd4472b7e3ba0bdc3c38378f4b265d196a48ec2b6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23016bfda7305701144ed598adc095193de6ae37f88cebe420f25c6a277920be(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b39fc2f57f09fa49631b0ad3952769bda28a2d69aaf1b7098eac745e8995bf35(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d06e93ad057bd0c16ff0e06ddc12a43d5998da7aa69644b7c155f76aebeb93b9(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32be511f73956bafdf5c7988c5fcbc18d5eb7f83857c3ff9101af457848323ee(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba08733704efcfacbbcfb2a73642a8a16d599373f1809a17c2d6a961ac22bb3e(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9269575dcf6a288ed6d2b30e85d9306bbb113df08e2d45215fe2442f57779b82(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a33262dec7e4245dddfad465d4f89713ba4ff40c4f123526d578e1b80c18131c(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abd08caafd6a895475d1ed04fdf9bfe2d4507a8eea66c07575116208d1900e88(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01c70f475f3ab99220763b401b790efba2291e047c1d5cb6fe61d976b5b04849(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd684e21cfe91d147e62fc686184a4371b65eec1f5a9ac401320291516d58c85(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8b02ab49d5176ad6e77c749bbdc6afe74fcfcf121bde1c763222e1777171448(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db393baed67a93827b901641011c22cd2559b79e8f6c32368a88dd3c18197166(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdd3dd4807ef6e764656138dd85321c464a1b86fce893e66f1e38cde9e0b79d7(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__933de5eaa53f01d68babc898a478325202a9074495401350c5d704de3deffb00(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e15cbb1cb71b8fc261a4527e3f52b11fe625520b8b7294bb6e4032854f10a74b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__433ff061755e8c007144147835ca768a25732f787389743610d9b23d35e60ed5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c7e88c9fc88f25d78eea9e19144e604db5c107b95e8c75b6b2cf0171020434a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85f4a91fc200e2e99609bba976133d955d0c1ef82d1bb5d42e07b4d72356b005(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20707782c93f783fa795bd4a4d7489436e10d6574d628be5dd9c38e7768efa95(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f68634ee6d341280b50da74fce688be7f0379250596f949b132c21fc68d5adc7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbee49438c0af6742e3aeb0e9e12fd14f474d8c8641ba1bbf4df2b01ea2aba78(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a0b7b1c98eef03a18dfcd39826ad36d3942e3551889331dc78156c46eab8190(
    value: typing.Optional[ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ea1c62251541fb8cf775affdb5b1ab24259ba1782701c96a1e7c94abf3dc2c0(
    *,
    azure_devops: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderAzureDevops, typing.Dict[builtins.str, typing.Any]]] = None,
    bitbucket_cloud: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketCloud, typing.Dict[builtins.str, typing.Any]]] = None,
    bitbucket_server: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketServer, typing.Dict[builtins.str, typing.Any]]] = None,
    clone_protocol: typing.Optional[builtins.str] = None,
    filter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderFilter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    gitea: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGitea, typing.Dict[builtins.str, typing.Any]]] = None,
    github: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGithub, typing.Dict[builtins.str, typing.Any]]] = None,
    gitlab: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGitlab, typing.Dict[builtins.str, typing.Any]]] = None,
    requeue_after_seconds: typing.Optional[builtins.str] = None,
    template: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplate, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24bb36f3e7b7ac1151a3c1d82886acabca65dabda080b23a564e3e9c18e7d418(
    *,
    organization: builtins.str,
    team_project: builtins.str,
    access_token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    api: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08569db9e1a0097ee4bb990ddac11994f321d6829a3a50502f7800f91c64e124(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81024217cf3598100bda9564064a10e1a4ff63d55d4102b56a7574550297ee85(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d456759b7629d76da5c78b59b8df24ae08d0218c54eb7de2cd9066ba3577ed20(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd83cc4fa95c81174e3447b39913ed7b741b6eba75347bfa9a6d70a45bcab904(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bc3fe72d42324e12bbb3fc96ae039d86e61fbcbce503d8cb4d3c95a6fb4464b(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f6a8ac86aee90a85ea5fa38ba024c0b58e27386be8a86932ae4520c17788096(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76918626cfaa434b560a4c9668c48c7676616716f482a11214d9026f690e7b25(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__775c3002b285a9fe7ee60456cd911aeb0b837785e8fc629c06f14d51cb0191fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d72b8a2c18a1f86c44799ea80f6f9ec828cebf94ebb85f3fe910be3dcbec936(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0a42593faed7a245dd64fc81f37341e53822ce151e4b5c68031de5ca5d2cedd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c1c83652c4399f046fb2cb3ab2e36d9d7b6b5b6a634f1250d62ec8efe1882fc(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderAzureDevops],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c748248eb9bbcc96c54c5e97f59b1cbe983aff2551ed5d2c92e93ba2655c0bcf(
    *,
    owner: builtins.str,
    user: builtins.str,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    app_password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bc9b9134b53a0968ebf23b86ba59807d2e2cf8ff9b1e9dd979980ad37f469ca(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5675c5c7c5495bb4ae11dccdbbc75c18d8c0eada30c9bf01d8867a7b4afd59b8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc7450f390936dbb3e5ba51ee328e74c32b6eb4ac6b7426360a04507b8e26275(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa71858c0009892613748efe8d3a68bed3ae5f43a7470a8a88e1f7c61dd1c0bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f8b5e56cc5101c109b1e87cb847833f5d75ce3e7b68ea09ab1c3a37dc2160b5(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d75a12a46d54e434b0325f22f0042e6d341670a7c826b2887de8d2fde347f187(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__336a7a30c7278c01619daf2bcf2ec712540f8b31373b0417f6d4c869bf7d6a7b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55452b73e7cc40cd8eeeea80c4338e95d7e664b00d007813d86932a2870c02ca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86bb98ad8c0935499e22ba10172bd8fcc79bc57c643d12b90d20d4a5fe204930(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15a5d06b8c22745b39946c1c81d3a8b27aa75d7f59dc30c4caa41e23b9209d16(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketCloud],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c92c156e8a38f9eb71709d1e856a06eab3698742f4cbaee40de5e0cd8b5692c5(
    *,
    api: builtins.str,
    project: builtins.str,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    basic_auth: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dbabc58a15bc61fe5a8207e9580968f016d4c535c7bb9f02e447fc6b73d2447(
    *,
    password_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef, typing.Dict[builtins.str, typing.Any]]] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07f12b94a264e0785754272df5eaeaad67c09e85b622505413ea7157599543de(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a79e42cd6c298782db9263c0fd25f331fbd5218bfe66a1b7499f0f6c807d749(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdf29ae4f1f8fe49e53033115db9483cc3a8323eb70378f96fb2731500740d8b(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6255abe2b76fa2f059e1082b604017ce70a61eeedb80bc1969f865a9c5a8673(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8c98909a2a9266ec3c68640b521b73e9bb3833c8f08c0c534f60cf2335d0c1a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31c79328ca8cae56a472102bd5700c30049c12273051939830baf62ff7c66659(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82287b9c04d51923da106512f902e4e6209b6b5c816996dde7533531557416db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03390ac6be810f7d49c43d6074a125c9e59cf7c23bbea208482003f688691320(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c0680e1630747512219e4ccc950b6f7784ba6543a7f047c34e6c0c5d36ccb62(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9d03b8c90a4a32823b596eef2e915c0db5d071b7c8fc3b4af98c9a56b8b3800(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__363e59be60edc1bddf08ec4c4313e02b19b8fad8efdd9c404526beda586e2a7c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9914ff51537817cbe74b25548ce2884352376de1517c2092458c4508c4c82113(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0151ddb7558822f9463d6dbe5ff3b826354a269f78da7971e919a105911b5dda(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderBitbucketServer],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea83447971da964c8964ad1c3f9903aaba6599ad3a207f5f09541325afac7ee2(
    *,
    branch_match: typing.Optional[builtins.str] = None,
    label_match: typing.Optional[builtins.str] = None,
    paths_do_not_exist: typing.Optional[typing.Sequence[builtins.str]] = None,
    paths_exist: typing.Optional[typing.Sequence[builtins.str]] = None,
    repository_match: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6cb84c05b7cad7df79bc693fa0a765e99a4589558b9a5a03807cb652f6dafb5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c70bbd82b694c1791520f266f3938687e14860c5ca99bed6bc66ec7b81298569(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bce2a6b58e5083ff67063de69a6a2078fb81f8f579eee6710bd005b28c8b32d4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6de9c965a19789fff0d47174abd7158c6ecd62315473416e4ac7f78aba1f7c8f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c67a9270e7feb82e5de17cb891f263643562e360bd1caf3caef6da3cfee0557b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__980d24ce6951433eeef319f3cec30ecf39df15ad74034d0775d1e097ff0534a9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderFilter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b915291e3754813243250b5d4366c9371563e1687ed81a044f74c43a5b6498ba(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b28b68f32d0dc0dbffc3ca04bbb5c4ad3bec95354f8fa8c0f74269a89043a12(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50f6c0569797471f1a490fe8d512c791aa851886f93c32b2345ddf8ad0e70f66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5777e1fca841e6e1b1bdf990fa3162870fa874a3a5250962a24cbd74aa2bc936(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4d21cccf799231ee6a93106ebc9806dda416707525cb937133b137786123b80(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e5b8d726cd95ab3151c3d9b4b8135c757355ac01c3ad0fa28b6375c31fcb433(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce00662ddcdaf7b44e453b30be45928939d87384341fb461d6547ba66b4d0859(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderFilter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7e5ca158bb9bee7674683bdefa926d6804eff1bb36aac43f6e2b9cfc6f55777(
    *,
    owner: builtins.str,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    api: typing.Optional[builtins.str] = None,
    insecure: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eff5425320161f0bb6afc975c6aa8b58a2887d4423aaa69f677febb334091eb5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7231e3420d54f5511489ad0a676f1d783aa76586d4e6836c50fb50a2544f717e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2324c118fe25a5d6dba855d017ae418892d01c15237f4f8e2c7888258d84abe9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f20bba8220c3292bd43680752e09146d48a65d9abbbc8225042a68fb3aa3213b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__833aacf07148a6f5cfcb2f63a4f95f0aef9c18187502b66df21ab3aa6e8c17db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__508ebbb3fb94e7fe0741111cb63ede61110577dc7942884a65d6ddfd5a96daed(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitea],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__540cc4b5eaf36bff023e19fa8c9e686de7f7f2528128b52c155e43863fc80ea3(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53f061ed4b503cec613935912a1694391fc550a26e654e490737c705b6e8a958(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__750e469bf231e08b3ced71e9125c3d0dfbe9548559c5ec978364d6b55590f1f3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb904f61243302b3fe2d266a9c440801b5d6ac05b421180ced4f8c38b9adf4a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__621f54bcc699ca0d8c657d674e3dc9c8b2ce0d11207b077e1e7141a1dc4738d4(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGiteaTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5efaa47bf94accce097d58cd0ceb9b0925e04de7ed0cb21bc36bb4ef711176e9(
    *,
    organization: builtins.str,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    api: typing.Optional[builtins.str] = None,
    app_secret_name: typing.Optional[builtins.str] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGithubTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e5aefc318bee6767721e8538e93bec65194aa8616722cfc20aaae466d0dbd01(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e63bd570f0eae76e27c71f0fab9d0b52a8d236c807d87db5d3cc1eefa47be4bc(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__392da0cca08d565c329f298346a82ade84c5ef1acb841e919dea49e152d81903(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b41f75d9b76948096dc7c09d88a29cf40fbba77d6bc8767c528689e313f97b81(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4553e02f15f01cd2955ba8c579eefe65378f30b33a1d00c22e01fdc834620848(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__696f1172bd897acd9767bbd81bd02e00ea82653af82265724777f5a612ff2b51(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGithub],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0c4544a73b890f3b626a6f56a37095308a6331d9cd1eeb14fbfe72d2b1f554c(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfde8f249c67bf477bf5387b4a7722c2a5abd9e3e54a83f55d6efa63c4e9472a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09c00cd912ba4dae97bab22a95d6473189cfad3f1e68c0b367eac636e290764b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b76375fa44aefdf413551a48bb4cfa3199062736ce79715055ace79a7f9359d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85f2bfc31cfba767e82fa9d66daf59ef5c4bf8706acd0459c5ee423572252e75(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGithubTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2565353c1b6abc2f3514647357dea70431888b80613cafb33a6fc09ad0dcf809(
    *,
    group: builtins.str,
    all_branches: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    api: typing.Optional[builtins.str] = None,
    include_subgroups: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    token_ref: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42ead097d463c27c6fcc64d002925e0c4b40ba5bdc1181a4805cf603c81732f8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d97cae5e97643c34598070d0ccacea19f4682c44431fed6063bcf9dcf564c7b(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a1572730d811a193680229469f018c416582a9e85051be1cc1bd2c0af3bb9bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9caec7db8bcba9136c35a0f9e38f2d5228ef19ee2939f74568307342513f3407(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a80107e533dccc624f7be1415475b80f8f72abfb866f87b3d661f913782a287(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d10f2656e5b25aec0bd5d03c09cd9e741cdae5c8809d5bd6db5fed25707d02f(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlab],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9702d6148c0e65a04beea2304ef34a728555ae74cb9f4a2984856c35a719c2bb(
    *,
    key: builtins.str,
    secret_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__813df355fd5c4ca255aa7e808306b4962ec2d5a5034a9cf7014f82dca8a20de1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e08b3a41d2470fdb7ce950130f59555c28c53e23c29c922a18f5bd343e6ec71(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c2c084a6c00d46f7f58e3bbd15e47715397d32eb8ac4dff4c557bb086c8e1f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ed414b004e74cba43a99f67da23639c60771f1e88dcf251757fc058f7424a96(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderGitlabTokenRef],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__047816852901e66e44cc487321bf73cde221a3eb9fd8579685cf9fe0ad1c356c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__376593b730025fb13b5a0591d97d48bc03664487de88f9766738d5a718945980(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2b59d16214a66ae72231f690140411fbc6089be024723b80a82efbcc2f361ec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afc7f9b518c659c6dd3541cd98abf80a174ccf8c1d284b5c7aefa1bf5dd07640(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f88a1575d448107af9bd0f8a27564bbdd6ab11b7ac734cd4d395ff72272c9396(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23f011913dd2f195d9ba15825b1f2a794120c7136af8ccb24ebf591355bbb1a0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProvider]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1458bedef5bdee40d32bb7dd21b0c9dbefec1408751866531baad5c5c5106a4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f34b1092f2af1bfa07840578eb831b7de5a88514182e3d6dea97c11eb93a042(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderFilter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1535253e957e2f7315c441610dcec0cb30d6ac2b5bb612ab1a9c1abd63f9fbd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb37d82196ec1096cc6c2802c62fccdf19e3d54cfb2ee9eca18a23d546f40f16(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f7108fd7226eb04885ac2a94edecce74343ae356ee1fd8f8f8c65aac9453b91(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProvider]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30c1cbebe087bd915da57b827be85ae0b0675c29d4259371791d185e1f291e26(
    *,
    metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    spec: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpec, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6373779e342e9770452d5db8a3895d55dfb6b94cfcc333dd79d26b7cb07a6ecd(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97b22792cec89b5763c041077ce0922014a9c36c3bb536e7f095ac3f7cb99854(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__edde14859bffc9b51b4afa167884e3995b24aebaa4442b3715f95c52ae88eaae(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7dd4e0767b9737681dd0edd55ca8efebd790a5b12b3f51134c83a0f3fb3d356(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d59b648ccd3a2405d1c12e937f1e7603288514e5170b873f3f9fa7974da15e1b(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25e3c6d395f75503aacc2aee0e2347f7a8309cee647464136ba927d8ada6cb42(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f22029328a884c1b2a309729db6c47f72efb2c73636d942a4a7f8cbeb28fa06(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9703347ef8d93365be8c11c1c85a2d0b1377f2467813566394c8f929e58cc0cd(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c4cb50a453a1106f191d268e5912fdee9a3a949a715381bc740a0300df31885(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9f2d3c9df7141d70debab0549054d07e789f5c2b5f6f6c4d20694564320bcb0(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a99422aa4b3f8af74c24aada345791687c0f19d6c475311b38267b5f3984e01(
    *,
    destination: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]]] = None,
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76fa94b4b2d5b35347f26a6b1f938304eb042de93db2d1022aa8f11da037533a(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ececcc00826c0ff0194cde0dc94daf8e69fa33c73bb01c9a99acd07f05ced0d9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63f678954f1c0a9b011df386d9a12782eb986ae5d6ffb42ea0fe6a2954961ed0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__008835fb8f958be5ba9d00cca0adf6c1badd6dfd7194ecff54d127886f27f161(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1b6dd31bdb8be8421a9d42d55d6f970bea5d8b532d80ddfd925580ace3b61d2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fd68b3e6946b771daa35aa6f3a02038945d09aa3c5d81daba20bfec1aeea819(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__291d2ce51c0779bd26f9a027e768aa7244e25e9018314944d707e33ea52bf5e0(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5c7774d0ca3cceda262c13d86715a977e99a6b477869618c556e39a9928d356(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__272cd8b6c1085af146bc080a9e8499b65acf8b7429415a88d9008ae3076a9510(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2eb3ad9c51d50372e65ab72f5c943adf3f11593b4be201ef20bc8b629c05d347(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd77fcff1b86d11c414bff79dfcd5f5cc72b6824bcb0d41f902987701f158781(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27ef46f7acd8cab3eda81f19e984b84404398620b493eff33262f701242d41e8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f4d2e3e2093d64703c7ab06164fa8bca719fa301c0283121d0dfcde1a6766c8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__344cc1220f1edc33984d0decc42229d9cfbd2245441f8df6f84352842c5105bc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd5b6737d42531f182d118f9b4bbc3e6ed64207d3e7e77742ddfce93f92102fd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd4fd42593e77102c3a7e3333c20e9ba6795b0eea7cf35a6a47bc49bee4e75d2(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ff585918299f5d606cc2d27214f2af9acb79be9408a349d7b70231ffa5ff0fa(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cb539fd82a68cc5c3ae18d248f01f0248d9ee114a34ef9f6b3b8f3893727c63(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4aae7a9f60525d08faabaefd47c434bc3e8263fd0a74847ff2147e0dd7030790(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17507d534895a3f1ea3071ad34bc63343ff62d0af234da1cc4ae414e37bee345(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9727e2e8c4d2e8c24ce0915d167d1659a075abcd5e3082a70f4d27e9f688ff33(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36be111044436b7fa16d7bc7560681c411751baa5dc89f6ffcad68de5b1b6290(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07a423a63ed95840f657dd1793fcdccd9cc9fe65e3bec7a3311cde3e95e3d53e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a4a951cd5d8284b1434a383a147f2df6a5887aa412b1ed952924cc30f122015(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e39265bdef198ebf12d02881423bccb1fe06977a959902d945a960d6a5c7d119(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b78593782d9a2ccbbeeab3920a38d15d9e1a80d3f4b5e7a0cef7595cd6cb5a29(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2ba31b814649bcc8ff16ae400d23a445694bd926c013d8988511dfd76ad4f51(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f940bdc7833cf169eba13804d6929a69f4b1d1c9f7be5d48ce2328d1def35ccd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__120d6180b1d7ef87ee0fd497d6509144cf318dc17bfd568c195a7b60718e09d1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84efe8afc6a9bccc12bdbd91c50c8285074ba1fe9bce8745048572cc81f18687(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__462c1eb03a4f2bfcc48644370e99733d936b8e45e5b37ce48f2355d444dff9d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24b62c08620b1e99b76e942bccf97bc9e9686dcef04e9b930e278f5398b70313(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2358274a6404dad1c1f5a3a07b648985712fbfb791b9fe00bb5f073e60c84a3d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21a8208cddfb03d31bafaf093e5d33882a0046783db73a4409fa1f6449498ba6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46ccc8d70206b85f737b7c120b49f082c7e3ce648b70176f92567eb1a9b06203(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09b32fd624f720bdd74c9757f9aca8fa0266373e1cd5c8198fef532f5ccaf880(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b80b7c226b06cd1d0af50b339623c7936fdf25f8900a83ae9926af8d06f8081f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f813a2a8101d1d2cebf07025f4a34daccb32804d3e2cb6f77cfb36fcd09edca0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f4e63d21df7decb501b410aa9c38684ae65e14146c95a43f2f02906629f8bdd(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab608a0e25f9389210715874fd7aa603d4528ec9d42d3d0435b67213c11e214f(
    *,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    repo_url: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e00c4fe63b551b3d35090299bd160a6ab15097b2d0ed7f34abe1954d6122cc40(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8f4328c061cf4e3ad85dc5208dc9ec7cf0c7bd3102c2056637561b19793bb8e(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09cddbefb630e96a34f833c6b396badb4239649c00e8c45315b97c88576e3631(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67711c6cb99a98b16ee9945ded60dc66e0d0c3da6ef4aba8cd641f6e9f61f12c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90418f29b61aa52d990f17943890b6d62d4d49822b4a1dcfdf3cc1afd8f5a974(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3cd04d32bc099ea7fe8923e91570d67c97b5eaff3755f42e4311dadb5eb3e32f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c438f08979540d8e3d584818b2c864af671ce42d1f25f543b3cb88f4e7818ed7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__084e5b0331ce1921c0793b9cd979d0b45749c21f08cb2320747d0ae4a01553dc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa931941ec6dfc98c6fcf8e2d033113f36bc98ea90a461cf9fc69f39a7bcfd9d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ec372518144974f0e8255438be3272d0659e4a7769f93da2f6ae832667c4506(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a92f966dc8f9bde718275d0f3ff4e3043280c6da587f9a412d3e19bc9b05ebca(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__715c8f4b14b3f972469995d6c077caca417aa98b87fdd802ea3520c2cacef13e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c688e4fad626d7c089dd114601169b5c4aea8f859841942e94615c1827737f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01194cfe50803f28c54dac39cd1573c57cb030dd3f3d7105901be6557966d939(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0371594bd432523e4aef7f5c30343350a330cbee92f3982e55481d71e5b7aefd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa6237717d22dbd4fc817b177406383cc55a3d9b3b8542451d4ad1d9e41f02a6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f36745ebd7750fb8dd14ae0637fa6eefba77ae5db999f726fdbcc01960d0ddb(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__553f73698b35e7be1e99b90f583ec818906aa0eb9a81da6eaa6d27d7dbe6cfab(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ffbe7d41b104cb4992d6bd4b198d9a92acb64f18078a81ee83db6fa5df51dae(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85f99ea69cc32cd564f7426be32c0444bdcb7cd11373eff4940676b170c2760e(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab0599e05ed7dfaca7845d047830f50aca0710df1853852d9ccb696e50aa1553(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95771c7891c491ad817f0ab7d9baaed4beb4315cead0b531b7873414bdfdfb88(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2466a1e35c1505d96bf9660909f0b3e8fa5b48a15fb7fb78250cb5545faee9e0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__914fa2a8086032d0fba037d142e6dd668479187576e453ade19d5aae8a55dedf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f8eeecd5f92995913dece311b6cf64898d8c04eb0369ccf7fa70489dec97da1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67b3ca83893bc88d644330cf8bab68684dbe98207a496e781b7645e0ed380ec7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee51770b02dfb91ee24d26f972ee38bf9b5e33d35ef3d61ab64c24284fd3b702(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f50c545412b1dd789e4407014ab59a82a96b8a4a181901beccd9febd2ab0d025(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__879e80ead91d7a75d0ace3cbcdbdff46f0c6f9be7dd3f7465482756b3b82b7c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83e597428e961204154df686a0e584e96f340e6b8d079a4a708e758d21efe0f2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__080ce4936a0b53d693f10b197973e523b1a4e83b9d2026d6de47bd30338ce316(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__910635072f54e6e60eecbf194d6ac4011b5d41c893c0101e60fae1beb6f23f74(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4078d8b384e25bbc47d47d4a37466a40583afe4d3af3dbd174fef24fbcd65ab8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee3d9da7d7d3c660f24e28fd29f4c4af3319b9bba9ea8f72637e2f90dca2653e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d1c0397d8c71e7558b05452709113f134e0871a33c0447761fabb46732755cf(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f84626611e0472efd80fdea09bf91f4cb81e8ec4635f6dfe3e3aee849872abf(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__671ddabba621743e2ad2a74481ea1f4be4d01c28f8720a2927f2da3ba102d439(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7b4ac05a02ac454e029adce94754e8e4abf35dd2b4a9efee69b9036de77ebb7(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6ea4ab4d39987dadebc6cf428d8929535b8063643248f5b80b312d606c67eb3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb0f19ad19cebaa482abe6a6f92cc0d679a2092c679c80e25166d0953cb3ef23(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7264a6a4471ed3b347a19b48930c3de15f9f98c7a9d7f34ca728862d48bcdbba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f018672ce28c08fa151e0bd632cc636e31ec88a00f840add8bb40ad7d39188b8(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e2ae7004e020af0823b254e71bf3c5998867ceb030d62f7578f34eea934d353(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b91fd0712873351cd44a91302d44910b44eed22e3d6f008f7c2680d88c51eb89(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43711e34070d8946969080a8cf634c0a56c6e7a4d45a753d1b832b4386c01e81(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0546a22fb6fe71980d2d661be5667b728d52bfcc0911e07d0160d886a8b80430(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__762b3aa921d5f67c52f7dd1d4ad5383fb0c66ecab29b2972f1341ecba61a0202(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4117390373a35724d838a01d696378f7b0c4db01509a7e60a2c40456ba0b7461(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff80d86205192b860ca7b19720671064961232298f654647cdb385f319716a2f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de842879ae9ccdf992d5ef06a6ae5b408b9fb220024f0afa2c53518f4073c65c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4216c457e394470f36aa37f288c2f7ad10b9350411fb1d56aba8d54e72e09332(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__baf02a385df35de41b301d59482eceb286a277e5ee3422de12bef1582d608a2f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31b9b762a87401b7adbc50e000012e8acd9f8b54d5303f17b45036bb0aa9f23e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__090f8732b2762639143c79a6e3bfaa4c9c16a1f521ab2eb58ff0e4376f6e7423(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ddd4b69eec4f11dabe3c2be1ef573d24bd952a43605c25137976c11445cd775(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c941714d01ae995905fddf961afd087a8b54f1b4c72f0e6af8afa143757e3da6(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6be50eb68f9a6d08620342994ddb8246f77796668c71fe612e2fbe815ddc2cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb5eada924194d31771ec08c4a4fdb0c64bf9d49cd68957ab99d4e6a059160f1(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c08dc27ee0569640a2faa8236e76b653f8552b856761ba3a61545556d28d86fc(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b50e0cc8322d8da61d79d25ab0dd013f50026dd4f17ab4c5a61b703e618730d3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d9ec90a204c058da6bf9e12296bb7c7461c509e8cbd5768450d8e3aed0d1b9a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32a2cbb12c0264224ae5729f55291d47ef1a2d0085101cabe7d83b48d39f50e0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7e364a9aa93001a1e8681b508f753628d299865745671279949bf81f5c5c5dd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc77f39063ff4e082e0c821df7e7c951fdf123eac882e9edba9fbc64e741e593(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e050e7646c71c6fa138fbd0705ad270025b29486eb575bf7c7b139a46db9c96c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b475db6cb3ba600eff24c0fb4199feb985728788660a4563cff1d1ad31bc7816(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f14dd23abc5109b3ec6094b23671be1adddd486578db7689d6482c159ff8ea57(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__590b84e7da4044882d4b37799b14a4834e06ce047123fe8fbaa4f55014394558(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5133efa5af1ab5c7776e433692c7f7188d0b4716e228142b00ce90f26bacd5ae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dfa0cd5b698ebd43f6256c0a684ecb4c969d35128a755bc9ad1ab9d1bd98831(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c98ca22a4041435c3d2020af6a259c74ff55ca0327cc6ec262e457e57dd1e81a(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__819bf0cb2bb8f835a017ad38fede23bba6bb494fadaa425c5fa439a598375743(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a114e737073d3fb95519db6b2385a8f59f322676e105bcdf90f86b813e0bd7b7(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bee0c9036f6f3a4cb7dfb8ba6f849020f1fad3fae2ed996ee3704deaca7f6db(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c718e0c3dccc1c261b7f2a0df015a9016d5ce3c5af4d9e5456e0e45d8d9b6f0(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f49a9691d5b092640764b58393448275a574d31993c2e599c3b9365d4d959eec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6339f8d3feb62fd0a943e15e6784da969d13bc8e5a848c7c414ab1e1a9db68e4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee1b54aee2f3bfa255165befc0111a0a75ca7a294a853700c75b8bfbe07564ab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__454c3b7e3c9e5811fea5d45d188b2cf34b9eef4aed8e8dfabb6d37b3e25559a9(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a23a47103f6590c74e6b51d2ec7debd485da6e070a0693d4e6d9546e96154729(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16c3a48bd1e3311ea2f27996b2d310684adec70ca56bda137e323228dde20555(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26308a1c464e0d9ec1106b8cec8daad8206fcf77dd13700ce2ace1a577eb17c0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8e54c5f403d46a04b108231f9ce7c0c6400e0e9640e21b82377efa0f3ba5b16(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__731aeae81e2683791d298016f3d8d628c2940e65f4444a24334cce7a7315bdcf(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4314d4761122f8d081e6a6882483258d7315027d7e9b9d33da867e5f0b90a42c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07c0c51e1f5cb692ccd67d086ce47a95c6b6e99edb05259bd1cfe41c0bcb1825(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee1c4ef8a0029314cd7b443dd90a207996caea42563e5b8b22099cb0caef125c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c70a82972dd254f8fd4185800ef0e16dd51c4524c02fd04244ac0e7be8ff5b03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4005cbdc6f7664fcc6ef09343d527626cb0690ee095b14882edf1396c092faed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43fc0fc2ae1920e610941eb021b6713de43dcbd0413057a338e302b619935c5b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55cb7d2bc75a5ebe37ee3ed52d0a3f35b1bda77f1619defc9b3dcb44bd1234e7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff733c485a7b09afd3b26adfefce7065916b6bc7cc777b200dfd843ae082d76b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2959f4d7b08f2a9c2144d1672b4ed955addbc69e9d846c00eba2e6da3fcfa92(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d0b262f52ca840ccb440e25261a4ad70cd6532c4ed7204dd0baece5ee690f06(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b47489fbe5119e9eb613106879d4f9d96956a0f3e9eb447caf3d0be60057827(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c82b812d2f3a0cd2f80e751c31755924fe1acea86ba62a1655a045c95fa358e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb291fa19e2358e6a765526e65114017464ae3d91a972859e7667c9c2d4cad82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__412ff07613500baf226718c801929f1a486a585c3c386475cd801b9250c09ecf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fea7e9a5e84a70b4131341ca7bea4039698b4b6bc3fb4ad8be3a5055cc283579(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8139fbbd06548064a759146c0d5341b28d24658236958ed3133a5ce32d1cff50(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f75df5be72caa4ee4dad148e293f30e00e6c2aad8b652f714184c4f07d4c9e83(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4a48f1580d723bca2602d39d60e4723109037d0ca96a01ce83dd9c2d76838a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f483090cfcd818d18b4ebfe93ed783853f8a191a8cdf91278b41c1cdb4a3fa6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8998ac51701b7bfc33eeed3c74f0cd0b5080dc603fb193b0ade87ae94471d465(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8a08a8150797ebf31801b98df14da9701bd88ea6c314b504fa7ebf066c55c97(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fe389f4dd3a11b8542a8203957b054cafc542eeb14989afb933c77838d74502(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5aae00c004585f3c59754975bc9180e4becdf6a1e7be370c345f82025e9e8f66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13d1bd3bbe941dc78b23d54d5e145befa0a3777a9f1505425d0fbcc18012636a(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62efc84aef519fcfe353eea844e33447f6d1f2f80795f83ae4dab99acd7b56a3(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d3fa4bec52ee2b44bf4e59ac4c643d4b08b77389c07850a0693a6c92f01dd43(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27fda91f1d0000db2cf38eac0242f235b7ca3c1cb58e89deaf63d7d4a5838204(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ef16aaab36013a8505d09075d1ea06fa1b92e266ee5d8f990864dafbd15942a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f9cfbe1c0d286fb454bb0d6c2cc726543fc3e0d419566f333a8f60880e88efb(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52a75a575f02c2d43835a77ad9f47d9dca1f90a4ecfdac09f66e52f718b328fc(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb1e4850cf24fb0df73e44bece0b49428766fedf096817bcd44a757c8ad5f81a(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6849195c2c3eae9a5d77ba43a8e6e68c5bc291a6a449e32a059c590e75fac858(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea736e1ded644b5a12ab95639b6473b1eb959d6ef65b74adb4e522c3945faafa(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7329d694017c2f3a3a4abed9aa938999af2d1ae5aa7e7a1168e84180b9b8f70(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e64bccb4c5ec6f00322af9dafce84faeda76f504248a39b95f5b5b8458737725(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d512ae46d7e3c376d2dccee3f4d4919618d45919aad7b331292e824377a54ee9(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c64d9dbcc490fe3bf380931f2f9bf20125ec48608e5c74983d65df93cb7f8846(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc54d25e74124b889d43cc378d1ca123d9ef6eb19c09ae2852e63dbb0605e021(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36aa20df9d148d6eed914151d5646abdc53ff209960a2b795c9a5bc774354306(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbded9f2877930e8ca5c455a6d6ed68704c609cb0cd7f97c114aa7d65d12e535(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da8a6731f318862ab4ac3d58dcec93ee9530942b31d9dbfde1471bf9113d6f86(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6494a4adb44ae852c6680fcd708301552338ac165effe54c01fb6dbf86bf20a3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__103b6959daaf27bb3d02d8548db650dc6bc2d850064b8c7e925f4cc04ab5ff20(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a3d291c6e6b319cfe64a703969b2bbaf9f44b41ae0f196ab08018c8a7492293(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9464bc194e2087822d04fa42760b7fd8b56a79a4c84bce589c042b3832297a82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84e8b79d865dc88da709930f6efe454c34ebb3dff279f3930daafaaa0624da1e(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c946b9c83b51617189a0ceb876a1e9f4630dd72f1c548e8cfe94acbce94bb3f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__677bcd214016ee158a8dbd41bf7844b3107a726ab9c24ee33a6c0b02fe0e1a48(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8a8b4107fdb9ee7b65e4fc47fcceb1077842b1c8144f5d642717b95e0934db0(
    value: typing.Optional[ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f0e56ec1381f03f747d8cadf04d824ed0d6604ad65523b8b5f5b2ca71d53602(
    *,
    match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    match_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b6631b3293901914246704e3ae584c85324af744aa0e503b45d9899862b7589(
    *,
    key: typing.Optional[builtins.str] = None,
    operator: typing.Optional[builtins.str] = None,
    values: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a28661f2bcbb89ce5bd3d9b0a622bf08ed061f3f9b0b24033109b537cad74cc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8773333d1dcc0422935e4963eaf1ea8c6d5e7fa2d0dbf16f7ed5cbe3c77b4c0f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a03fff1225e9a06d04cf4a910c7834c91d9d530795ab16496250eec252ca4642(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dc278f08786b9d8a81007485b5d322d215c1d79218537ca793ba3021e3b4f58(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a4de3c3430b8be4580184685f52959fd752bd5de1629396dd3feea7a6a88ec5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__068bca9ea317af16782244ed3568c6e7dae5e90744137bf0a1acf86b5dbbfad1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecGeneratorSelectorMatchExpressions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd543d3e8c1bbd2705064f3b9492a44d4194b6b0db9d8ab34b5c573345ffc72f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb329bedd8783905fd70a9c124cf6f96f3e53d051337a13b11b9fa1481897d02(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4aceea51f63efcf83b8f00a469657eed3933799424bc355987e42d85c4dc706(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5c1bb70274255b47c717aef93314635adb5c2de90691e79ae48fc239bfea13b(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d16658195fd478b73c60b5c2ef4e56254acbaa8b1180b414180b7595086be740(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecGeneratorSelectorMatchExpressions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1db0ee2cfc67d0de703a10e9f4b90fcd3aa92b3323e6d632ab36a9e5b9c387d7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c61d5941cf002e113660eb165208d0b4e06fc3ca054b3bc8349010a80854f34(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGeneratorSelectorMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75562c0a8fa82721babd9d21cf0333323477e599888a5826b8956456b489bbdd(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__274d3f5d93951cbbaf5328b03a5380378801325d9215217c1d5ab6525ca40447(
    value: typing.Optional[ApplicationSetSpecGeneratorSelector],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adedb22a2eb37e27fce06ef5a79aae4f3723386890e8e655da099157e279fd88(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce4891af45829518810d2450c14c447d85ea92b25388c6d6474a2fb6e8909e71(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecGenerator, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b58bb59f147cf9a65cccc2c6f6b79aa807ac4a546342ab63d65ef6f8b62f6540(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fff38c7c718bf9bde9c25b0a9d514ded1c07909fe2e1374f6be4ded9a5ca3568(
    value: typing.Optional[ApplicationSetSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fb99ffb21242908ae39c790c113889d9dd5506eb01e05dd878b5c5e41334c81(
    *,
    type: builtins.str,
    rolling_sync: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSync, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fbfbb17fabe75f2ad9003d8956001b69ed90029f0b7440f7def3242961d7e8f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c486cfe7ab60e0c5ec76c0902b10547fbfe919ce8ae909f405984876cf7b970e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSync, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a3077c23445a3c907ea76d85ffc05a7099679a2038939f584065039b7994ea6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40c35fd4fa07feb040fcb6ef0be679e40e9d1cb86e5a496e5beaa0b0cf806546(
    value: typing.Optional[ApplicationSetSpecStrategy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efef0a0a1b42e3950bbb1404dba1c81ccb3a3fb61845b3c8fc1af38a47c4aa3a(
    *,
    step: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSyncStep, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d2a2585b2ae45a178fc961418856121588b157fe8a133df992094670993adde(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e45292002d09780707d168858351018fcafe050d40369dfd6e58ba3f43770bf(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__111fea687c2c94151555fe93bc7f0946e4600550db9b3d7839eb0a508ca6788f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0aaf5700a0b36e7232b545e03f841ca003bcd41a8d3a070391623f536c0b75c3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cddf05ce2c3855843ce80caff0d1045b19ad3980daefa3c1dbc9f9a8e59f089(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a32938e7f89773f30de7f0cfcee715d2400f69bd3265777b5482e5b844a5b1f6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSync]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c931375096579790907ad03c6b0548ab5b4cf0e4dfb1b96cf9bfcfd53b7a2b39(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0f3ef3b4eafd489b2e8a372813f56452ecb77ab1b9b9d93b141947dcc269cd7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSyncStep, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c8dad5c113c5c9100b4f0094467639a036deda03d8f6ff0d551042d5527b02a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSync]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b5d88cd42609535ed9d062c1253115b84d09977119035b8e7401aa38e49eb77(
    *,
    match_expressions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    max_update: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d845b6024ada0a75d72cbb435f288609640eae3735d0a71aba55ae994ae71e8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25e2c67950acda8f1fe24b8002a7141cfe15b3fcb2844ef0e35fdcca310679ad(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5275d52537388df18447ca255481c7f61dd3d4583cf8709a3689d777192e28dc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c101df05dced6091a31b623e01e65f4a48cd4098b53fb886ce36c2e8220780de(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cae43dfdb759f980d56d3223f1caac04d3c461fc729667c8875f92ef0a86df60(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c44cd65f4bcdc54ad5287325a0f6e095d8b5180662446705fc5e4b263ee7cbb5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStep]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61911add57dff6eb8cdec390c6203e06bcd081d0d154e89136b0082ce4198642(
    *,
    key: typing.Optional[builtins.str] = None,
    operator: typing.Optional[builtins.str] = None,
    values: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b8415cc59104ff76880f7f43a2a70bbcfd48d05389ee6751984e43e532e6e3d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43d5b742f61836c2ae3c45c492683e7aac60e72bc5084630714c6ea7c435fc0c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__406a2e6329695d469fdfc3da95ed26662a450f8145d6b49c0d67ff6d2688da0e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__940cc493e28217131012d210a8c021ef4e6a693e6e0b63ded035ad5ebb363732(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfc6b8493e178c5217a14a07a610c2350e0ef0a7486c11975906f5d2b1d74d2a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6759b2519c71438ab4b4f1b75ad6a1e3b676ba21b0c542c5b9cfa91018b0e077(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23dce80747cce59f1cf75213c08a8d45eda27b58689aeb6fc3e3f0809abcda7b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5bf62ad01bce49883a5ce385470b552415ec284e7e1af5abe38ce50019c98710(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3d6408fad9bcd336261b9eed8cdd887e58f900f48d29a94184b1ab88b8f11f7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d07a8167b459a3bf4d8969297222d1f94fa1525948b3c48b2b3c7666d4fddf0(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1556f6909265d4ae9521ab122aa1464a316be577ebb7c9f94cd9a2f5ee900f64(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStepMatchExpressions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc015ac97b3a54d7212b1c418e2da1f2da0821d432ff1d4e32e1ad4f01622bb3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f0d6b9f6901825515fa05d582bc1abcda5cb3952da23cfc6307613e6f95fe5b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecStrategyRollingSyncStepMatchExpressions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e54c3cc07ee12e8fb8e560c452ab49c803307d8a97185e249f2cc1a3738118fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e27a3202ac18b1c0eef7909f691c9e14d3d6b3906c90565518dbaacb251ddc77(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecStrategyRollingSyncStep]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7211661c8a00c38acf5b739d464751edc5302a0f094c86a389968772653a787(
    *,
    preserve_resources_on_deletion: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90b9a1961976695c04b65047de05017e818752c3fe8b5b842940ca76a8318b90(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ffdb9702e8ac99e095f0ef696b1dbeae93b51f67f3aba979efe37f31442aaf3(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb7dba7be83f2890c7e9d607c29bd497b7a19a71ab3051bf3167ab44606a24bd(
    value: typing.Optional[ApplicationSetSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46f8654ad45a23d790d0cffcc89bac341e809c457109309edc82c7fb02ca7f3a(
    *,
    metadata: typing.Union[ApplicationSetSpecTemplateMetadata, typing.Dict[builtins.str, typing.Any]],
    spec: typing.Union[ApplicationSetSpecTemplateSpec, typing.Dict[builtins.str, typing.Any]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cf51731b1b5080611f839025082e682d2bc8f484a5bd2608195c3c100913bcc(
    *,
    name: builtins.str,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    finalizers: typing.Optional[typing.Sequence[builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2ddebe9be586a17405ea40ee7be4eb8700a2c37052dfbf67b0907720dc2abdb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29a2cf992f970b143118ae613f1c2adae8a42625c89de969cafa07d83da896f2(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ce86f5093b26e81dc7c10f2515c47f688c55580ad70186d2deffac957cea8a8(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e169976bfabf82b1bc58afd1147e6a739e61a1db2e63bbe3a521e722072bdb64(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__531e2ae2fec9ef5fe1790af5f5febea5b98c47dc7db43bdfc1013e4e79dd726b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c7ca3f2900b46c0fb29bcd45c1eda3ecfb8127cab19fe0d28fe0bf484f5d374(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa528ca48ec81640125fe4bde037a58dafc4dd135b0aec304ebb30256ee0fc8a(
    value: typing.Optional[ApplicationSetSpecTemplateMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9117af4bfaa6be8dab278cb8b37a3a80f417d1e559c2bc54d024a4bda698a94d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bd4e9421f4650943f6622005d981a98346355a53292c09253e542121354adc0(
    value: typing.Optional[ApplicationSetSpecTemplate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c6f3218c2e30fd7c8593100f717ae6f22210233f7d08f16abac917afc8dec58(
    *,
    destination: typing.Union[ApplicationSetSpecTemplateSpecDestination, typing.Dict[builtins.str, typing.Any]],
    source: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
    ignore_difference: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]]] = None,
    info: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]]] = None,
    project: typing.Optional[builtins.str] = None,
    revision_history_limit: typing.Optional[jsii.Number] = None,
    sync_policy: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSyncPolicy, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6c8b67b3262d220becb6407d650f61778a99a395bcf51bf53a0c47d3277b6d6(
    *,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
    server: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3411d93882713d312005b17c39e5ed0d9cfe490bed52ba31d6a671df1d6e3303(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06ea7be7c5bca55d8692067609a5b8e24004a6d8bfa294a235f232d96c5e215f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__473a5d8f39b49663676a7d00e11f15455ad4ad7498a492f1dbde06438488b509(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__164b943897ab37adf9ba055cbdec67bb9f510f8ded7b0ae98b152eafd2f73426(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6d48dd312bbacab761646e6285a734b46802ffea0a913e135cfe0653bd3a09e(
    value: typing.Optional[ApplicationSetSpecTemplateSpecDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7e23ef270d1f8151ef64b52e9474e7684deecd0cf78aa4ad2d1dca511ba6fcb(
    *,
    group: typing.Optional[builtins.str] = None,
    jq_path_expressions: typing.Optional[typing.Sequence[builtins.str]] = None,
    json_pointers: typing.Optional[typing.Sequence[builtins.str]] = None,
    kind: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    namespace: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cddf5e175a43de5ba808d3617860c5d3684d4a5f9bad0fd7458dfad030d76019(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a5982ee1706433e2bbaae014b386f47df86c587759724dac79a661248462a9f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49b0334bcecd413c1c8cfb1086baf73364f996c2529d3f611e5f57ebca0c67e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__785ff9ddaac85dac97d97bd42009bf1dfc981ff5edc4b456e0e19a19968ee989(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1acbb8c496fa3528f3ee7756c185d949fa30a44b167f47b3140c3802333af4bd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba3de2d09a188df71aca31d4ce517fce237ecf817302c9f2b7475f8b252200f3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecIgnoreDifference]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a5952f6599f9fbac3b636c97f5e70cae72c062d0aeadeb628a98c5920bded58(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63e82eac0b916e68f23b4a3cec09711c9230c45583c341c23b641bfc21983a6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b02da3a7880410c56f67e0b9044e3bf2034b2056f23243ecddb18a34b21f85f(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d835819ce6cab1e6f2deaf10bcdada3ff81f2c1eab881cb339cbb8d61215d31(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77a924618fa624a037a09731bd4168a282720a33efc2a5d4d82f7803bc377c2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3066a432f36f76215afe116644e1b9ee4e503892ab97e165a06b841e75f04ab6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8204d3d90ff3cb9714c3ab34b482c712a4ac6a4f0734e43c7acbf1bf6a9c21a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17358c0110a196ac4d208fc7a3a744644d402a22cc11ce28f96d9a5b138932d4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecIgnoreDifference]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72b1f2ec7bdca8ee6576193f0a01ca9a39c7c26cbc6c0ed882fa816eaf64eac3(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59cc4a7dc39eee8ab6704079692077bfaa7e6e6282873f3b002263db064e74f1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__914c4ec7bbc2a65f40f3454c3e0bb7495cf9c0a03b77a5db0d0e6e4f7360ad37(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffbac087d1d5e08d97c110c43553240c2488a3ea802a0d70bf9733ebf72adb2d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb62261f0d76513dbced3c38ceab8255934d7aa2d50a808986671ed03d32dcc4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93a09462f0dd146109af68703be8f6eb4917fdd4cd79f485cdf304324894f176(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02eb9d53931e41325f83072d473a778a025c10f760504600ce20df55be8b0631(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecInfo]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5238b3d2d84c50add2a4fb0757c55f4fb7f325cd959144824bfeab84ec4a8dfb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33ce30e91ebf67c966151f96d4b188e1ca4ea3e14bb670b867a21e62b0606680(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12b959a4893e2ed4b5bc2ae529fab9a74c2fc02ce11d790cbbe4a4a261eda14c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__055e5e7c4adc8a59b255ce3d0aff1f410a83d376308657fa8bba45dbef5bb94f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecInfo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9e684598855e446dadf4fca08e96ef7812661f7b0fdc658e1cdc453d2cf08bb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b4095d3d489cea8efa2adf892379e4ab6346abcc9368349371d0b81781bbb52(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecIgnoreDifference, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__672fc7f78b97c32f1f6d00dd71cf839b81bef133c73f22e4bcf00a09a8bc6fc4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecInfo, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fc89370934f4a135ac11821a4ffa5779fb99800a6b3b884789d5b3e50598012(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00a402ba0022038ff44053c0125ca58cf478c7861dc5305777d089232c0dcee4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3052a802025142d5fa277c2c7252e903763ee60d02a96c4b13c9948387c60e9d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__850e691d0d99fa4403b9684b4856a577e61c0a571f598f70c660e64dc9a49667(
    value: typing.Optional[ApplicationSetSpecTemplateSpec],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c045b18f3a114e9617efdc48a4522c737aa481b3a931cac59c1a5b5ed6a37322(
    *,
    repo_url: builtins.str,
    chart: typing.Optional[builtins.str] = None,
    directory: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectory, typing.Dict[builtins.str, typing.Any]]] = None,
    helm: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourceHelm, typing.Dict[builtins.str, typing.Any]]] = None,
    kustomize: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourceKustomize, typing.Dict[builtins.str, typing.Any]]] = None,
    path: typing.Optional[builtins.str] = None,
    plugin: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourcePlugin, typing.Dict[builtins.str, typing.Any]]] = None,
    ref: typing.Optional[builtins.str] = None,
    target_revision: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__306b07f66c7fd790d9bfdfdf51df81c0fd36f2284105b59810b00587a366a59a(
    *,
    exclude: typing.Optional[builtins.str] = None,
    include: typing.Optional[builtins.str] = None,
    jsonnet: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet, typing.Dict[builtins.str, typing.Any]]] = None,
    recurse: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ceea3e0e9fae94a4ce90760003df37b362d47e4951528e705d2931d7011a3fcf(
    *,
    ext_var: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    libs: typing.Optional[typing.Sequence[builtins.str]] = None,
    tla: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8a10f5342964342c1fdfcd62703da75e25c524eeba2850e231e309d4f1d4248(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a43439efddc742e83e249a511e135e54b291255681b3d2d4873af9aa823e0b1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10d74c86234a02431836eee20554202a97abfeae85de15e1592ad588f881dcec(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__deaf418d1ba1188081b230e3bd316b7374f11d21499b9620853aaa38f99fa11b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab32e12d60b2e87cffbf3a1ac6526939ecb26bf9a0506a41889261334651830c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c29f4bc3f6edced319d9aa689cf1745c6c6a635ba393246eb55d4c599c1f1569(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e2311768dbe0ea9e11ea4799d9ec90e5822116b0e1101cbc7a0ead0575343d5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1086d5157e92d3f7af735f4e6bae3806369f4120fcb4f0afc8e3d16f6949a82(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ac404625f0e6d1f216b226081fe99ea6e4dd15337a052cc46e9a41ec7fed027(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__885f4885b4e8e80e8be58ca922b9e36cafdbc37889c257b6533101adcfc56fef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f686e3f201608019e5d7583e2658acb87ce97e87244d6bbb7093efb4b84bd3da(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89e31e7ce5fef7687af3383884988c024177bcf6a02696c0781dc121b2935e2e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ae7c79e6beffe65aa37095c9aa489b843558402000521e481ee02f9970b8ade(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23da8bb8187288979fbbc7bf75029e641d052011da97186eb563d60130d829a9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa53feec4cfdc5110b1868dc46140483a857fc1e6a0cbff337e6f00db56e0dd2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc0c175917f03cfec5ad858cca9976312ccc0f5e6c5d4be470efc2a98bcdbdfa(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcf0c98fcf771fa54def11361b3ffd8e64af8eb981c1323cccd8a5aa657047d8(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b8a9dafb62e22427c94bb538577d7d19138cb14056d2a0f2ec5f2d835d8951d(
    *,
    code: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f818994e8c0d13c014a59b3e5596b43943394ce67a25c1638ed8825a0676b7b3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abcc562ad240adf671c9e4b83dee0b4bef78e5c745f7acab61e73e3b346ddfee(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a06aa6eaa9dfd56f27f8be761f85b606b3912ca07b4d0ea7837547f619384127(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1db544731811d1601e4ee4a3a2883f4cdfa671033c0e32f62e9794752e9e7b06(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21cc300d8063b0013393f317049e141f6437b3c18cec9956827ccf624a7b7129(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ede63c90ee65fbd7fa418051ec5cbb34accc3ece3d28d84a35d2607a2807dfa1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8467736c16d7e8054f6d9f090912060ac643e63d3fd43d63c06329be6b22fb4b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__414dc84a9d6dc00ac536f11a27ddea25d58842d4656c1c12f666591dbd7bec75(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3ca0e38ab9a0fd553763d7b7cd6aa2c7f70f0b1b45fb6f176a23d6f02536efc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af19dc25e605c6effd73b6e8ae280747eaded6468f73cf890e14d71638a470fd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ba8a52d4bd0e70964c914013f9ebf02e56867039bd6d2bc856cef56bfe11b50(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f7c000e6374212b6fb2ef7458b672486d33d45b2598c9976068167a893fdb0d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b9322e6b388ea22e53c874fde16343597fd74db1b9d2fe13c2666a6b7c06212(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca23d705a02f7ed61e6bff1987c6109734ce25b607350ebadc35201a46575665(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f320ab76be149b67660bb52bd2ff61df056c82c8d756bf5154a13b9da1b98ad9(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d11ff54ce661a5680092fca3f0d21f5d59e699c885f5521220873ddaf8846159(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSourceDirectory],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8154061ac244f9e12ad6f0b3713f815a0e90847b41f357d2c7e63beacf598aa(
    *,
    file_parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ignore_missing_value_files: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    parameter: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]]] = None,
    pass_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    release_name: typing.Optional[builtins.str] = None,
    skip_crds: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    value_files: typing.Optional[typing.Sequence[builtins.str]] = None,
    values: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db8c1fcb3e32e7e09fef57ab3cfb9c14df79ff4c14da435a359477d21cada966(
    *,
    name: builtins.str,
    path: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18394124e0171b5e5d9208370b29cb4c36e411bf3cbbe917e6a0f83a7f1433d4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6646d6ae6957f2ba466e5685eaf25a214a1b68723528316eff06b0ee6dd7a72(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a4450c8f36d73bcf83b34e64d46b2285b509d673e92fe8368b70ac1ce14d605(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff263d1b5a4683445e490fd9b609dae1868ac5050f264c3b3aaac9ea791a4b52(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1c181d13935716dfcd53e3fda7aa2bb3c55c625738f3944d9346f0618eba7c5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8058ff53b1e83ce20a707fa1b5b1271b54dc0045692da90b60b968dea0afba2d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmFileParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0df4df6b5e666d9ef4777a1b97ebc6d0c107cba420ee368e9c12c4ce192761b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe6deed152fb0367a85dff9c0485d663125885f825b96407620e6c7bad7b969d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7223e0c5f6085c7d4cac94f3d7a2f3049acaa9d4e7ecb1e1ad2b948c6079954(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b1dce51699af5431736d4cfc153ea0459b6cdec60f87fc50f0aba9b47a4cd6c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmFileParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a26a4091ac69f235e417f7ee409264ed2dc733ec6cbc06df77b018783a7e75ce(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7e7ccf73ddd162da5cb8ecf0d553845c54f5ab79786275128ba1516de478d78(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmFileParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cd9f1eff796cbbea78d4e83720046cf284499a95c67702a5de5edcfb379f854(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourceHelmParameter, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__407b54c592451c100dd19abf461218c3c4f8717f62441e3c9a7754bb80d7057f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__538eb49cb525c48e67d96369e9ffbe1276544096e55fbfcc791904972064032d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5286da795458c59844417ee3b6f8c7f40ff952542cc5cb86dc80ef427486249(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9962c85c99c35ab709df230ab9f43a07bdeb5d4291b46a70d23893597507e89e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59ffca03f3b281edf7321b0a4a1fac7769796140d0ef0a12d6487ab171bfc561(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49b56f28150bd614cbfad677bf9e86ce4a95434674ac73395d48a40e9b6693bc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdce71c6e6199e57150a934fc87b6b65a9b208d4ac4460d216dfd4f905910c23(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSourceHelm],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72f84cab7146ee6d2e9c65907f402a9f018261d6fc29be1d57dfd6b52e2e2ca0(
    *,
    force_string: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd4c906fd837496617fd630b3cd1e44800039099f2ac7c79eb0c5a617270cff0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95fe23c64c6d53bba261a5f5143782c826579611aaf0784da5b2105a0c4d960c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4d47639c794724ef3a08e96760bd8a8f315a03767548dfd9143d7ba1a4b5e9e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c91276b18aa36d63956d28a74ed23f63eeae5b77b6a582e1e4b63fc780cafc88(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62977ac59ac5ba0da6ea5697de48f11c1451ae9b042494dbafdf35a7c15e3748(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a516e6cfa45e0298188da6f8f2ccf2fa65e2d02ec0f0f633e0901789b9ddc45(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourceHelmParameter]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77f1e97fce6d6a43a844cd191f0f54184152c3eeae658b61a2b5900396698617(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c04d17098e0a0db9cfc161fb7fe1f8a09bc749c27c845037677df936efee5b9c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9903e3d151fc9f14d6739031ca5bd0568811628bdda390dde588b59b1125326e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d74e3c38aee6292a01abfd1642ce7597891aaf7ac48433c6239f94c61caf49c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f17c583ed321ab2e4b6db54424b9ad962e55a1f3cc5390d0faa0cd191dac61fa(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourceHelmParameter]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37a2d9eff792016908eadf0813db37e337b24f91939db8cb0dedea9fa2d131c8(
    *,
    common_annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    common_labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    images: typing.Optional[typing.Sequence[builtins.str]] = None,
    name_prefix: typing.Optional[builtins.str] = None,
    name_suffix: typing.Optional[builtins.str] = None,
    version: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d92732905eff41104ec4cdcb0c5aecf321957851024bb379fddeed7cdb0ce919(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a195f48ae47d64721e157f3dfdc051553760528d7d50541f9585d25358a6e0da(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b458cc6182317780dcd1105a25511f15477f457e272187aff03086f06acd60de(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd2a86930f5a147625c3a099fc15e6dabfefd5e7b8a26dcf9e3f4fa9a73ea538(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9cc8c6eeaaa041ca6be1d49cd63ee07657afb8bb86bedc18e704dc69227604b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a53601bdddeae0a346297e9a2ec53da9d7eeabc03a5e53f52dcabb1b7043710c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b82b5af32a53cba3de8118bae2179f055151cef398e9993d72f8242481b5cad4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9ae6d0c68a0e1cedd11647a78d277be41d6ebb59009121ad379f3d5a6474db0(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSourceKustomize],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__454eeed82bb513d3c216c06d3fb9ff909932f00b65ac9d6df0facf3f1a0d725f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20031efc4324cbaa3a3cc7010eec837a59360d83e0a911fefed182b567c5ba45(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae21370a8c7d536e65c5b2c2a5a05618470094229f1bba17664ff26e76851410(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c50c46f41b940c487bf880f41f02f43aa402c8a0ebf8c6b39bad79eb2c3c19b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68c5b0214ad6351f85f0f891047a09734e9056052ed573b6858e0455fce03aeb(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__974c0d65a6b79fd9a44c19bc2d09fc71e679beac29c2a7a35bb0de668fb8e36f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d57c7978273a12c7422f68ac34a594e9db1f920f0ffbb1c0044fc34bbbb9f369(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2be9f59029fd520439ce24d0b6bc882a18513a92ce407929efc0ff3297672fa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d22cd820927cc145b397d9dafb8cc05cffa3eb6329fa64339c4369c4bf3dcf97(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9f13418e891d0585e18c537a53364c264b480d0a4d1d9eb0f51724c9a2db4fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a4299f768a3158943f989f1221f698c0c763f29c0a1f119b3ffc7ad83867136(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a84a7e20ef79765d7c9a0dd55322bec5df12271e0554ccc726e63da289a0fbc4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b404eda25fed9242b96a1cc312f1b45b88a123fe719d6842325acec4f65c899(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fb03e4885644eb5cff900636e8d8e06856b1dce5e7e87201f7fea7101b0d177(
    *,
    env: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2056709f949d6661849d240e4d46773d1d817f02cfa25c7d670b3f6ddacf8ee(
    *,
    name: typing.Optional[builtins.str] = None,
    value: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a20aa0b0f5634cad0f1a4f4530a97a75695b1dcf295f3ba95b42f3889f9c6cf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38d921d65f2cb960aa00f09ffad814ebeeba716292f11977215fc17cb9334e7e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a5d5df66a6e36d8dd28d385a69b842a8e3168f1e789d7cc4ad3a7e32f176326(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1ee5c9ec0274355cce2a90d5c703378a82d4a5700167a3c1a5cfc149d07429a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ec914fc98199c5b4bf4ebc806fbd770526378c31d01dac7fdffaaae2a88de73(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfcc582943348d5b8815d61654f7cc2388bd2b3ad7715f810686bcb74906554d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ApplicationSetSpecTemplateSpecSourcePluginEnv]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25ef72651d38722ae23deb8f7089463d20c3dc0ab608e936737f2dfc5b32c2b4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d4530cd9f2725987bfc3fef305922df3cde0c241d400ef0589682f61a224771(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__411950d2fa93cc89056cf7062312b6cf768432b866c7332e175bcb35ad0630d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__504f1d5d07c7441d528be79a72221d6f2d1e1f59cb567ec822b4dac41537343b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ApplicationSetSpecTemplateSpecSourcePluginEnv]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c0adc8f8d06f181b6fd8fa52206e56236d186412ac3b585eb42a10ad15adf3a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__042e6ca21ec6656989442f5c193b7677165929629a3fec84be834e8fdd886854(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ApplicationSetSpecTemplateSpecSourcePluginEnv, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__808e036b4b49f35fcc59b0151b6cc13160043033bf8e019d662b6b143cb32ff4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9928055e93eb27c3ec587d1fa0927c3d4c2e1b86abe6bd8bd9f3344338d1311(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSourcePlugin],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25aec0e25e62b0b354c6da57984077f04b1e3c22b25227b13151508962537917(
    *,
    automated: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSyncPolicyAutomated, typing.Dict[builtins.str, typing.Any]]] = None,
    managed_namespace_metadata: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata, typing.Dict[builtins.str, typing.Any]]] = None,
    retry: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSyncPolicyRetry, typing.Dict[builtins.str, typing.Any]]] = None,
    sync_options: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba8b9cadc6a878196215c3908c9843afa0a2b0ac13762a18773155c67aa33a64(
    *,
    allow_empty: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    prune: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    self_heal: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7d0191a2bc0ba64f24616aec0db687f8a2da2ef97d625d8e569139e32f2966e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f677203691eb23203e676be1a8a5bec4b137e884b03fa1d97b5e1ee5d84b990e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed5d0597fb7ee014ec3d922ba5a359aa17c70596ad495aec4f2fc738fd98ab99(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e67855a858beb9d43c58b3ae615112ba38dc203e47085d5d56138d889aa6d909(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97c9542fa5a96c17abc2c75fe23dcb5193fd56b2d3ba98b55f230b54a9ea2d2a(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyAutomated],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2726e0f928e48b66a489ca969566c7c6891ee5826eacf212e966fcb05da433e7(
    *,
    annotations: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    labels: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60e382734d318aa68f8695ee286c1db1eef11f10567a4900efd82e84459b00ad(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__395c1100ad138a2a51945dee43e95bc5b609ceb33d647735d135fdc83a3d4503(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c928dbb7007d9fbd66afbade1057b498c9ac4b70fb2ae9a7c9affef4ecfe648e(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4e4a70459287d00e0b3e20d51fd535b8c382093edab135a57b2f4ec8d45a1e5(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96a50fa12ad00a2cab2a86beecca1fd09fe434e096d62385757e77a9510c3cdd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1c6feaba6e3df555ebf06568606e8ab3c48afb37a3dd13c18eb1e81d87cdcc2(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c443d242e5f6610feae47def0db8c5258cb54811d23ca1792b34b36be0479e19(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicy],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dece2392abc873708a3dbbe239a7308f82d6836f1c90e4968f64f0e63309e774(
    *,
    backoff: typing.Optional[typing.Union[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff, typing.Dict[builtins.str, typing.Any]]] = None,
    limit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c83288e2b53b9790cd19cd5b5eb513ecae2c61440ac993a24dbab0450ebda6c0(
    *,
    duration: typing.Optional[builtins.str] = None,
    factor: typing.Optional[builtins.str] = None,
    max_duration: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b310e81c09a9080711e37bec75bc916e8e35f99a5f72f7f10e8d0cb7603c2c03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2253a2c021c077a4266d559b0aad0a29293cac2053bc17a53bd088761b4f4078(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5546b2144a615ad0cdd9483cf8568527e84fbdcc1f518c336f51b194801bd5a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e979ef5c9f1b9cd9bede8ea631945a419a24eb0883d2a4faa713031076fe3db1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffb406483f46202c8ec0e084d0483861c6844e50f1d3832c433dfedc7602dbf3(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc7e5cbc2acd09e36c6d6d43ae16a51e7fd163cfaa310480f51a8a08ab7404d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1259fac705852c455f5647d345af0d8f89e1c4bff0645ca99422ce0526fe3d15(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6beba19841e37127e439d0946e81e9e594b3e0024dc9b58af6c986ba19c63f43(
    value: typing.Optional[ApplicationSetSpecTemplateSpecSyncPolicyRetry],
) -> None:
    """Type checking stubs"""
    pass
