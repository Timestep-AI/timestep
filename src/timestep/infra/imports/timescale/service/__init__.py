'''
# `timescale_service`

Refer to the Terraform Registory for docs: [`timescale_service`](https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service).
'''
from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)

import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class Service(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="timescale.service.Service",
):
    '''Represents a {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service timescale_service}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        connection_pooler_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        enable_ha_replica: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        environment_tag: typing.Optional[builtins.str] = None,
        memory_gb: typing.Optional[jsii.Number] = None,
        milli_cpu: typing.Optional[jsii.Number] = None,
        name: typing.Optional[builtins.str] = None,
        paused: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        read_replica_source: typing.Optional[builtins.str] = None,
        region_code: typing.Optional[builtins.str] = None,
        storage_gb: typing.Optional[jsii.Number] = None,
        timeouts: typing.Optional[typing.Union["ServiceTimeouts", typing.Dict[builtins.str, typing.Any]]] = None,
        vpc_id: typing.Optional[jsii.Number] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service timescale_service} Resource.

        :param scope: The scope in which to define this construct.
        :param id: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param connection_pooler_enabled: Set connection pooler status for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#connection_pooler_enabled Service#connection_pooler_enabled}
        :param enable_ha_replica: Enable HA Replica. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#enable_ha_replica Service#enable_ha_replica}
        :param environment_tag: Set environment tag for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#environment_tag Service#environment_tag}
        :param memory_gb: Memory GB. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#memory_gb Service#memory_gb}
        :param milli_cpu: Milli CPU. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#milli_cpu Service#milli_cpu}
        :param name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#name Service#name}
        :param paused: Paused status of the service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#paused Service#paused}
        :param read_replica_source: If set, this database will be a read replica of the provided source database. The region must be the same as the source, or if omitted will be handled by the provider Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#read_replica_source Service#read_replica_source}
        :param region_code: The region for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#region_code Service#region_code}
        :param storage_gb: Deprecated: Storage GB. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#storage_gb Service#storage_gb}
        :param timeouts: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#timeouts Service#timeouts}.
        :param vpc_id: The VpcID this service is tied to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#vpc_id Service#vpc_id}
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd65820db58fb5fd0f36694cece1fcfb08b4c3d28de4b4b3d26d02adcc0d160e)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        config = ServiceConfig(
            connection_pooler_enabled=connection_pooler_enabled,
            enable_ha_replica=enable_ha_replica,
            environment_tag=environment_tag,
            memory_gb=memory_gb,
            milli_cpu=milli_cpu,
            name=name,
            paused=paused,
            read_replica_source=read_replica_source,
            region_code=region_code,
            storage_gb=storage_gb,
            timeouts=timeouts,
            vpc_id=vpc_id,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id, config])

    @jsii.member(jsii_name="generateConfigForImport")
    @builtins.classmethod
    def generate_config_for_import(
        cls,
        scope: _constructs_77d1e7e8.Construct,
        import_to_id: builtins.str,
        import_from_id: builtins.str,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    ) -> _cdktf_9a9027ec.ImportableResource:
        '''Generates CDKTF code for importing a Service resource upon running "cdktf plan ".

        :param scope: The scope in which to define this construct.
        :param import_to_id: The construct id used in the generated config for the Service to import.
        :param import_from_id: The id of the existing Service that should be imported. Refer to the {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#import import section} in the documentation of this resource for the id to use
        :param provider: ? Optional instance of the provider where the Service to import is found.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee62bfb537e989e3341da5f599566f2a943ccb0e8a23e746042b6e7189dd80b9)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument import_to_id", value=import_to_id, expected_type=type_hints["import_to_id"])
            check_type(argname="argument import_from_id", value=import_from_id, expected_type=type_hints["import_from_id"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
        return typing.cast(_cdktf_9a9027ec.ImportableResource, jsii.sinvoke(cls, "generateConfigForImport", [scope, import_to_id, import_from_id, provider]))

    @jsii.member(jsii_name="putTimeouts")
    def put_timeouts(self, *, create: typing.Optional[builtins.str] = None) -> None:
        '''
        :param create: A string that can be `parsed as a duration <https://pkg.go.dev/time#ParseDuration>`_ consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#create Service#create}
        '''
        value = ServiceTimeouts(create=create)

        return typing.cast(None, jsii.invoke(self, "putTimeouts", [value]))

    @jsii.member(jsii_name="resetConnectionPoolerEnabled")
    def reset_connection_pooler_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionPoolerEnabled", []))

    @jsii.member(jsii_name="resetEnableHaReplica")
    def reset_enable_ha_replica(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnableHaReplica", []))

    @jsii.member(jsii_name="resetEnvironmentTag")
    def reset_environment_tag(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnvironmentTag", []))

    @jsii.member(jsii_name="resetMemoryGb")
    def reset_memory_gb(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMemoryGb", []))

    @jsii.member(jsii_name="resetMilliCpu")
    def reset_milli_cpu(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMilliCpu", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetPaused")
    def reset_paused(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPaused", []))

    @jsii.member(jsii_name="resetReadReplicaSource")
    def reset_read_replica_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReadReplicaSource", []))

    @jsii.member(jsii_name="resetRegionCode")
    def reset_region_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRegionCode", []))

    @jsii.member(jsii_name="resetStorageGb")
    def reset_storage_gb(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStorageGb", []))

    @jsii.member(jsii_name="resetTimeouts")
    def reset_timeouts(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimeouts", []))

    @jsii.member(jsii_name="resetVpcId")
    def reset_vpc_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVpcId", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="hostname")
    def hostname(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "hostname"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="password")
    def password(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "password"))

    @builtins.property
    @jsii.member(jsii_name="poolerHostname")
    def pooler_hostname(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "poolerHostname"))

    @builtins.property
    @jsii.member(jsii_name="poolerPort")
    def pooler_port(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "poolerPort"))

    @builtins.property
    @jsii.member(jsii_name="port")
    def port(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "port"))

    @builtins.property
    @jsii.member(jsii_name="timeouts")
    def timeouts(self) -> "ServiceTimeoutsOutputReference":
        return typing.cast("ServiceTimeoutsOutputReference", jsii.get(self, "timeouts"))

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @builtins.property
    @jsii.member(jsii_name="connectionPoolerEnabledInput")
    def connection_pooler_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "connectionPoolerEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="enableHaReplicaInput")
    def enable_ha_replica_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "enableHaReplicaInput"))

    @builtins.property
    @jsii.member(jsii_name="environmentTagInput")
    def environment_tag_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "environmentTagInput"))

    @builtins.property
    @jsii.member(jsii_name="memoryGbInput")
    def memory_gb_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "memoryGbInput"))

    @builtins.property
    @jsii.member(jsii_name="milliCpuInput")
    def milli_cpu_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "milliCpuInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pausedInput")
    def paused_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pausedInput"))

    @builtins.property
    @jsii.member(jsii_name="readReplicaSourceInput")
    def read_replica_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "readReplicaSourceInput"))

    @builtins.property
    @jsii.member(jsii_name="regionCodeInput")
    def region_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "regionCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="storageGbInput")
    def storage_gb_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "storageGbInput"))

    @builtins.property
    @jsii.member(jsii_name="timeoutsInput")
    def timeouts_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ServiceTimeouts"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ServiceTimeouts"]], jsii.get(self, "timeoutsInput"))

    @builtins.property
    @jsii.member(jsii_name="vpcIdInput")
    def vpc_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "vpcIdInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionPoolerEnabled")
    def connection_pooler_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "connectionPoolerEnabled"))

    @connection_pooler_enabled.setter
    def connection_pooler_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c12a7126d25ecc2856e1bdcc22986fc7d902634e37d4035af4b2bde6aaa2d494)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionPoolerEnabled", value)

    @builtins.property
    @jsii.member(jsii_name="enableHaReplica")
    def enable_ha_replica(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "enableHaReplica"))

    @enable_ha_replica.setter
    def enable_ha_replica(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ceb952162ef1b4930c5c2e4fce4fc942a7614965bcd7fa924f195ff9914129e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableHaReplica", value)

    @builtins.property
    @jsii.member(jsii_name="environmentTag")
    def environment_tag(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "environmentTag"))

    @environment_tag.setter
    def environment_tag(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9eeb4efbdcce714127a18ad82e1f986b34afa351dd391d7bfe80c868903099d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "environmentTag", value)

    @builtins.property
    @jsii.member(jsii_name="memoryGb")
    def memory_gb(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "memoryGb"))

    @memory_gb.setter
    def memory_gb(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a338e1f06ad0892edcae945a1708c28ba4a663344e9d9e8c3b280475c11846aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "memoryGb", value)

    @builtins.property
    @jsii.member(jsii_name="milliCpu")
    def milli_cpu(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "milliCpu"))

    @milli_cpu.setter
    def milli_cpu(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29bba2c9ab59f00fb32991f04c15c3d8c6aa97fb8bee66970907bd10dfbe3c68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "milliCpu", value)

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ba949bbc4d20cdb087316eb9fecf74fe1c6149dc9e1eed07ab6308406efdaab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value)

    @builtins.property
    @jsii.member(jsii_name="paused")
    def paused(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "paused"))

    @paused.setter
    def paused(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9a356f58eae670d73860e8f0fe19c6cdece33a1390509903fce05e09311234c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "paused", value)

    @builtins.property
    @jsii.member(jsii_name="readReplicaSource")
    def read_replica_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readReplicaSource"))

    @read_replica_source.setter
    def read_replica_source(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__891746a6dbac7ccfbf8c4c897854d1301402a60d4403b6da98597cfe4c3149c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "readReplicaSource", value)

    @builtins.property
    @jsii.member(jsii_name="regionCode")
    def region_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "regionCode"))

    @region_code.setter
    def region_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0ee168cf95f4dfd8582f5202253a9b400fe388229bd7cbbc5290326d8c1e539)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "regionCode", value)

    @builtins.property
    @jsii.member(jsii_name="storageGb")
    def storage_gb(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "storageGb"))

    @storage_gb.setter
    def storage_gb(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11aefffe9de0cc52f219048b7e5b38123d7cd594e1a94025b5e0e6ecdd464ba2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "storageGb", value)

    @builtins.property
    @jsii.member(jsii_name="vpcId")
    def vpc_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "vpcId"))

    @vpc_id.setter
    def vpc_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6af22b0441565c2cc780a3c74d6941657d2b223770f2a6cda81266da8711dad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "vpcId", value)


@jsii.data_type(
    jsii_type="timescale.service.ServiceConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "connection_pooler_enabled": "connectionPoolerEnabled",
        "enable_ha_replica": "enableHaReplica",
        "environment_tag": "environmentTag",
        "memory_gb": "memoryGb",
        "milli_cpu": "milliCpu",
        "name": "name",
        "paused": "paused",
        "read_replica_source": "readReplicaSource",
        "region_code": "regionCode",
        "storage_gb": "storageGb",
        "timeouts": "timeouts",
        "vpc_id": "vpcId",
    },
)
class ServiceConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        connection_pooler_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        enable_ha_replica: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        environment_tag: typing.Optional[builtins.str] = None,
        memory_gb: typing.Optional[jsii.Number] = None,
        milli_cpu: typing.Optional[jsii.Number] = None,
        name: typing.Optional[builtins.str] = None,
        paused: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        read_replica_source: typing.Optional[builtins.str] = None,
        region_code: typing.Optional[builtins.str] = None,
        storage_gb: typing.Optional[jsii.Number] = None,
        timeouts: typing.Optional[typing.Union["ServiceTimeouts", typing.Dict[builtins.str, typing.Any]]] = None,
        vpc_id: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param connection_pooler_enabled: Set connection pooler status for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#connection_pooler_enabled Service#connection_pooler_enabled}
        :param enable_ha_replica: Enable HA Replica. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#enable_ha_replica Service#enable_ha_replica}
        :param environment_tag: Set environment tag for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#environment_tag Service#environment_tag}
        :param memory_gb: Memory GB. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#memory_gb Service#memory_gb}
        :param milli_cpu: Milli CPU. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#milli_cpu Service#milli_cpu}
        :param name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#name Service#name}
        :param paused: Paused status of the service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#paused Service#paused}
        :param read_replica_source: If set, this database will be a read replica of the provided source database. The region must be the same as the source, or if omitted will be handled by the provider Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#read_replica_source Service#read_replica_source}
        :param region_code: The region for this service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#region_code Service#region_code}
        :param storage_gb: Deprecated: Storage GB. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#storage_gb Service#storage_gb}
        :param timeouts: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#timeouts Service#timeouts}.
        :param vpc_id: The VpcID this service is tied to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#vpc_id Service#vpc_id}
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if isinstance(timeouts, dict):
            timeouts = ServiceTimeouts(**timeouts)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee56336d001f18951c88c42e011ce5677d0d9647575a2bb10e9432ccdf22c635)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument connection_pooler_enabled", value=connection_pooler_enabled, expected_type=type_hints["connection_pooler_enabled"])
            check_type(argname="argument enable_ha_replica", value=enable_ha_replica, expected_type=type_hints["enable_ha_replica"])
            check_type(argname="argument environment_tag", value=environment_tag, expected_type=type_hints["environment_tag"])
            check_type(argname="argument memory_gb", value=memory_gb, expected_type=type_hints["memory_gb"])
            check_type(argname="argument milli_cpu", value=milli_cpu, expected_type=type_hints["milli_cpu"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument paused", value=paused, expected_type=type_hints["paused"])
            check_type(argname="argument read_replica_source", value=read_replica_source, expected_type=type_hints["read_replica_source"])
            check_type(argname="argument region_code", value=region_code, expected_type=type_hints["region_code"])
            check_type(argname="argument storage_gb", value=storage_gb, expected_type=type_hints["storage_gb"])
            check_type(argname="argument timeouts", value=timeouts, expected_type=type_hints["timeouts"])
            check_type(argname="argument vpc_id", value=vpc_id, expected_type=type_hints["vpc_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if connection_pooler_enabled is not None:
            self._values["connection_pooler_enabled"] = connection_pooler_enabled
        if enable_ha_replica is not None:
            self._values["enable_ha_replica"] = enable_ha_replica
        if environment_tag is not None:
            self._values["environment_tag"] = environment_tag
        if memory_gb is not None:
            self._values["memory_gb"] = memory_gb
        if milli_cpu is not None:
            self._values["milli_cpu"] = milli_cpu
        if name is not None:
            self._values["name"] = name
        if paused is not None:
            self._values["paused"] = paused
        if read_replica_source is not None:
            self._values["read_replica_source"] = read_replica_source
        if region_code is not None:
            self._values["region_code"] = region_code
        if storage_gb is not None:
            self._values["storage_gb"] = storage_gb
        if timeouts is not None:
            self._values["timeouts"] = timeouts
        if vpc_id is not None:
            self._values["vpc_id"] = vpc_id

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def connection_pooler_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Set connection pooler status for this service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#connection_pooler_enabled Service#connection_pooler_enabled}
        '''
        result = self._values.get("connection_pooler_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def enable_ha_replica(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enable HA Replica.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#enable_ha_replica Service#enable_ha_replica}
        '''
        result = self._values.get("enable_ha_replica")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def environment_tag(self) -> typing.Optional[builtins.str]:
        '''Set environment tag for this service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#environment_tag Service#environment_tag}
        '''
        result = self._values.get("environment_tag")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def memory_gb(self) -> typing.Optional[jsii.Number]:
        '''Memory GB.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#memory_gb Service#memory_gb}
        '''
        result = self._values.get("memory_gb")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def milli_cpu(self) -> typing.Optional[jsii.Number]:
        '''Milli CPU.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#milli_cpu Service#milli_cpu}
        '''
        result = self._values.get("milli_cpu")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Service Name is the configurable name assigned to this resource.

        If none is provided, a default will be generated by the provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#name Service#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def paused(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Paused status of the service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#paused Service#paused}
        '''
        result = self._values.get("paused")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def read_replica_source(self) -> typing.Optional[builtins.str]:
        '''If set, this database will be a read replica of the provided source database.

        The region must be the same as the source, or if omitted will be handled by the provider

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#read_replica_source Service#read_replica_source}
        '''
        result = self._values.get("read_replica_source")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def region_code(self) -> typing.Optional[builtins.str]:
        '''The region for this service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#region_code Service#region_code}
        '''
        result = self._values.get("region_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def storage_gb(self) -> typing.Optional[jsii.Number]:
        '''Deprecated: Storage GB.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#storage_gb Service#storage_gb}
        '''
        result = self._values.get("storage_gb")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timeouts(self) -> typing.Optional["ServiceTimeouts"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#timeouts Service#timeouts}.'''
        result = self._values.get("timeouts")
        return typing.cast(typing.Optional["ServiceTimeouts"], result)

    @builtins.property
    def vpc_id(self) -> typing.Optional[jsii.Number]:
        '''The VpcID this service is tied to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#vpc_id Service#vpc_id}
        '''
        result = self._values.get("vpc_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ServiceConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="timescale.service.ServiceTimeouts",
    jsii_struct_bases=[],
    name_mapping={"create": "create"},
)
class ServiceTimeouts:
    def __init__(self, *, create: typing.Optional[builtins.str] = None) -> None:
        '''
        :param create: A string that can be `parsed as a duration <https://pkg.go.dev/time#ParseDuration>`_ consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#create Service#create}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__373c806a2de7838534776bb56008fca9ff6d23f40bca1a3d608d9530f0d09fcf)
            check_type(argname="argument create", value=create, expected_type=type_hints["create"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if create is not None:
            self._values["create"] = create

    @builtins.property
    def create(self) -> typing.Optional[builtins.str]:
        '''A string that can be `parsed as a duration <https://pkg.go.dev/time#ParseDuration>`_ consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/timescale/timescale/1.11.0/docs/resources/service#create Service#create}
        '''
        result = self._values.get("create")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ServiceTimeouts(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ServiceTimeoutsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="timescale.service.ServiceTimeoutsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d90ee278cf41c18c3efad53c2289fed96126b9fc31d41639063ec08b5a268cbc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCreate")
    def reset_create(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCreate", []))

    @builtins.property
    @jsii.member(jsii_name="createInput")
    def create_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "createInput"))

    @builtins.property
    @jsii.member(jsii_name="create")
    def create(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "create"))

    @create.setter
    def create(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa61fdd01da4f95ea423ed6a8034a819728c4230a1ee53429a9f9663f991f655)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "create", value)

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ServiceTimeouts]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ServiceTimeouts]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ServiceTimeouts]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88a33bca30f10c49365d31dd91c554cd8c58f4849cd16f933595349a561f9cc6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value)


__all__ = [
    "Service",
    "ServiceConfig",
    "ServiceTimeouts",
    "ServiceTimeoutsOutputReference",
]

publication.publish()

def _typecheckingstub__dd65820db58fb5fd0f36694cece1fcfb08b4c3d28de4b4b3d26d02adcc0d160e(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    connection_pooler_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    enable_ha_replica: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    environment_tag: typing.Optional[builtins.str] = None,
    memory_gb: typing.Optional[jsii.Number] = None,
    milli_cpu: typing.Optional[jsii.Number] = None,
    name: typing.Optional[builtins.str] = None,
    paused: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    read_replica_source: typing.Optional[builtins.str] = None,
    region_code: typing.Optional[builtins.str] = None,
    storage_gb: typing.Optional[jsii.Number] = None,
    timeouts: typing.Optional[typing.Union[ServiceTimeouts, typing.Dict[builtins.str, typing.Any]]] = None,
    vpc_id: typing.Optional[jsii.Number] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee62bfb537e989e3341da5f599566f2a943ccb0e8a23e746042b6e7189dd80b9(
    scope: _constructs_77d1e7e8.Construct,
    import_to_id: builtins.str,
    import_from_id: builtins.str,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c12a7126d25ecc2856e1bdcc22986fc7d902634e37d4035af4b2bde6aaa2d494(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ceb952162ef1b4930c5c2e4fce4fc942a7614965bcd7fa924f195ff9914129e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9eeb4efbdcce714127a18ad82e1f986b34afa351dd391d7bfe80c868903099d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a338e1f06ad0892edcae945a1708c28ba4a663344e9d9e8c3b280475c11846aa(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29bba2c9ab59f00fb32991f04c15c3d8c6aa97fb8bee66970907bd10dfbe3c68(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ba949bbc4d20cdb087316eb9fecf74fe1c6149dc9e1eed07ab6308406efdaab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9a356f58eae670d73860e8f0fe19c6cdece33a1390509903fce05e09311234c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__891746a6dbac7ccfbf8c4c897854d1301402a60d4403b6da98597cfe4c3149c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0ee168cf95f4dfd8582f5202253a9b400fe388229bd7cbbc5290326d8c1e539(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11aefffe9de0cc52f219048b7e5b38123d7cd594e1a94025b5e0e6ecdd464ba2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6af22b0441565c2cc780a3c74d6941657d2b223770f2a6cda81266da8711dad(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee56336d001f18951c88c42e011ce5677d0d9647575a2bb10e9432ccdf22c635(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    connection_pooler_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    enable_ha_replica: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    environment_tag: typing.Optional[builtins.str] = None,
    memory_gb: typing.Optional[jsii.Number] = None,
    milli_cpu: typing.Optional[jsii.Number] = None,
    name: typing.Optional[builtins.str] = None,
    paused: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    read_replica_source: typing.Optional[builtins.str] = None,
    region_code: typing.Optional[builtins.str] = None,
    storage_gb: typing.Optional[jsii.Number] = None,
    timeouts: typing.Optional[typing.Union[ServiceTimeouts, typing.Dict[builtins.str, typing.Any]]] = None,
    vpc_id: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__373c806a2de7838534776bb56008fca9ff6d23f40bca1a3d608d9530f0d09fcf(
    *,
    create: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d90ee278cf41c18c3efad53c2289fed96126b9fc31d41639063ec08b5a268cbc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa61fdd01da4f95ea423ed6a8034a819728c4230a1ee53429a9f9663f991f655(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88a33bca30f10c49365d31dd91c554cd8c58f4849cd16f933595349a561f9cc6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ServiceTimeouts]],
) -> None:
    """Type checking stubs"""
    pass
