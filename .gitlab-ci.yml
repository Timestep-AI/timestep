# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# build-job:       # This job runs in the build stage, which runs first.
#   image: $CI_REGISTRY/group/project/docker:20.10.16
#   script:
#     - echo "Compiling the code..."
#     # - curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | bash
#     # - ./bin/act -l
#     # - ./bin/act pull_request -l
#     # - ./bin/act push -l
#     # - ./bin/arkade get docker-compose
#     # - export PATH=$PATH:$HOME/.arkade/bin/
#     # - docker-compose build
#     # - docker-compose push
#     # - docker build -t my-docker-image .
#     - docker compose build
#     - echo "Compile complete."
#   services:
#     - alias: docker
#       name: $CI_REGISTRY/group/project/docker:20.10.16-dind
#   stage: build

# build:
#   before_script:
#     - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
#   script:
#     # - docker build -t my-docker-image .
#     - docker compose build
#     # - docker run my-docker-image /script/to/run/tests
#   stage: build

# build:
#   # before_script:
#   #   - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
#   # script:
#     # - docker build -t my-docker-image .
#     # - docker run my-docker-image /script/to/run/tests
#   script:
#     # - ./bin/act -s DOCKER_REGISTRY_PASSWORD="$(cat secrets/docker_registry_password)"
#     # - ./bin/act -s DOCKER_REGISTRY_PASSWORD="$DOCKER_REGISTRY_PASS"
#     # - ./bin/act -s DOCKER_REGISTRY_PASSWORD="$CI_REGISTRY_PASSWORD"
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker compose build
#     - docker compose push
#   stage: build

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform.gitlab-ci.yml

build:
  script:
    - docker compose pull || true
    - docker compose build
    - docker compose push
    - pwd
    - ls -al
    - python --version
    - which python
    - poetry install
  stage: build

default:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind

deploy:
  before_script:
    - poetry run cdktf get
  dependencies:
    - build
  environment:
    name: $TF_STATE_NAME
  script:
    - poetry run cdktf plan
  stage: deploy

# include:
#   - template: Terraform/Base.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
#   - template: Jobs/SAST-IaC.gitlab-ci.yml   # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml

# deploy-job:      # This job runs in the deploy stage.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.

# lint-test-job:   # This job also runs in the test stage.
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."
#   stage: test    # It can run at the same time as unit-test-job (in parallel).

# stages:          # List of stages for jobs, and their order of execution
#   - build
#   - test
#   - deploy

# unit-test-job:   # This job runs in the test stage.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"
#   stage: test    # It only starts when the job in the build stage completes successfully.

# variables:
#   PROJECT1_PIPELINE_NAME: 'Default pipeline name'  # A default is not required.

# workflow:
#   name: '$PROJECT1_PIPELINE_NAME'
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       variables:
#         PROJECT1_PIPELINE_NAME: 'MR pipeline: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME'
#     - if: '$CI_MERGE_REQUEST_LABELS =~ /pipeline:run-in-ruby3/'
#       variables:
#         PROJECT1_PIPELINE_NAME: 'Ruby 3 pipeline'

stages:
  # - validate
  # - test
  - build
  - deploy
  # - cleanup

# fmt:
#   extends: .terraform:fmt
#   needs: []

# validate:
#   extends: .terraform:validate
#   needs: []

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  TF_STATE_NAME: timestep.ai

# build:
#   extends: .terraform:build
#   environment:
#     name: $TF_STATE_NAME
#     action: prepare

# deploy:
#   extends: .terraform:deploy
#   dependencies:
#     - build
#   environment:
#     name: $TF_STATE_NAME
#     action: start

workflow:
  rules:
    # - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      - if: $CI_PIPELINE_SOURCE == "push"
  # script:
  #   - ./bin/act -s DOCKER_REGISTRY_PASSWORD="$(cat secrets/docker_registry_password)"
