---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: bitnami-postgresql
  name: bitnami-postgresql
  namespace: default
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: bitnami-postgresql
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: hasura-graphql-engine
  name: hasura-graphql-engine
  namespace: default
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: hasura-graphql-engine
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.image-pull-secret: regcred
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: www
  name: www
  namespace: default
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 80
    - name: "8443"
      port: 8443
      targetPort: 443
    - name: 8443-udp
      port: 8443
      protocol: UDP
      targetPort: 443
  selector:
    io.kompose.service: www
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: bitnami-postgresql
  name: bitnami-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: bitnami-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/timestep-default: "true"
        io.kompose.service: bitnami-postgresql
    spec:
      containers:
        - env:
            - name: POSTGRESQL_PASSWORD
              value: secret-pg-password-never-use-this-value
          image: docker.io/bitnami/postgresql:15
          name: bitnami-postgresql
          ports:
            - containerPort: 5432
              hostPort: 5432
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: postgresql-data
      restartPolicy: Always
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: postgresql-data
  name: postgresql-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: hasura-graphql-engine
  name: hasura-graphql-engine
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: hasura-graphql-engine
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/timestep-default: "true"
        io.kompose.service: hasura-graphql-engine
    spec:
      containers:
        - env:
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              value: nhost-admin-secret
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: postgres://postgres:secretpgpassword@bitnami-postgresql:5432/postgres
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            - name: HASURA_GRAPHQL_JWT_SECRET
              value: '{"type":"HS256", "key":"5152fa850c02dc222631cca898ed1485821a70912a6e3649c49076912daa3b62182ba013315915d64f40cddfbb8b58eb5bd11ba225336a6af45bbae07ca873f3","issuer":"hasura-auth"}'
            - name: HASURA_GRAPHQL_LOG_LEVEL
              value: debug
            - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
              value: public
          image: hasura/graphql-engine:v2.31.0
          name: hasura-graphql-engine
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
    kompose.image-pull-secret: regcred
    kompose.version: 1.30.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: www
  name: www
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: www
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert --build local --build-command docker build -t registry.gitlab.com/timestep-ai/timestep/www . --file docker-compose.yml --push-image --push-command docker push registry.gitlab.com/timestep-ai/timestep/www --push-image-registry registry.gitlab.com --out deploy/www.yaml --secrets-as-files --verbose
        kompose.image-pull-secret: regcred
        kompose.version: 1.30.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/timestep-default: "true"
        io.kompose.service: www
    spec:
      containers:
        - image: registry.gitlab.com/timestep-ai/timestep/www:latest
          name: www
          ports:
            - containerPort: 80
              hostPort: 8080
              protocol: TCP
            - containerPort: 443
              hostPort: 8443
              protocol: TCP
            - containerPort: 443
              hostPort: 8443
              protocol: UDP
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: caddy-data
            - mountPath: /config
              name: caddy-conf
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
      volumes:
        - name: caddy-data
          persistentVolumeClaim:
            claimName: caddy-data
        - name: caddy-conf
          persistentVolumeClaim:
            claimName: caddy-conf
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: caddy-data
  name: caddy-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: caddy-conf
  name: caddy-conf
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

