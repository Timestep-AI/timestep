services:
  api:
    build:
      context: src/timestep/services/api
      dockerfile: Dockerfile
    expose:
      - 5000
    image: registry.gitlab.com/timestep-ai/timestep/api:latest
    labels:
      kompose.image-pull-secret: "regcred"
      kompose.service.healthcheck.readiness.http_get_path: /ready
      kompose.service.healthcheck.readiness.http_get_port: 5000
    # ports:
    #   - '80:5000'
  auth:
    depends_on:
      - postgres
      - graphql-engine
    environment:
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL:-http://localhost:3000}
      AUTH_HOST: '0.0.0.0'
      AUTH_PORT: 4000
      AUTH_SMTP_HOST: mailhog
      AUTH_SMTP_PASS: password
      AUTH_SMTP_PORT: 1025
      AUTH_SMTP_SENDER: mail@example.com
      AUTH_SMTP_USER: user
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql-engine:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
    expose:
      - 4000
    # volumes:
      # - ./emails:/app/email-templates
      # - auth:/app
    image: nhost/hasura-auth:0.16.2
    restart: always
  caddy:
    build:
      context: src/timestep/services/caddy
      dockerfile: Dockerfile
    depends_on:
      - "graphql-engine"
    image: registry.gitlab.com/timestep-ai/timestep/caddy:latest
    labels:
      kompose.image-pull-secret: "regcred"
      kompose.service.expose: "timestep.local,www.timestep.local"
      kompose.service.expose.ingress-class-name: "caddy"
      # kompose.service.expose.tls-secret: "example-secret"
      kubernetes.io/ingress.class: "caddy"
    ports:
      - "2019:80"
      # - "8443:443"
      # - "8443:443/udp"
    restart: always
    volumes:
      - caddy_certs:/root/.caddy
  # dashboard:
  #   image: nhost/dashboard:0.7.4
  #   ports:
  #     - "3030:3000"
  # functions:
  #   expose: 
  #     - 3000
  #   image: nhost/functions:0.1.8
  #   restart: always
  #   volumes:
  #     # - .:/opt/project
  #     # - functions_node_modules:/opt/project/node_modules
  #     # - /opt/project/data/
  #     # - /opt/project/initdb.d/
  #     - functions:/opt/project
  graphql-engine:
    depends_on:
      - 'postgres'
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
    expose:
      - 8080
    image: hasura/graphql-engine:v2.15.2
    restart: always
  # mailhog:
  #   environment:
  #     SMTP_HOST: ${AUTH_SMTP_HOST:-mailhog}
  #     SMTP_PASS: ${AUTH_SMTP_PASS:-password}
  #     SMTP_PORT: ${AUTH_SMTP_PORT:-1025}
  #     SMTP_SECURE: "${AUTH_SMTP_SECURE:-false}"
  #     SMTP_SENDER: ${AUTH_SMTP_SENDER:-hbp@hbp.com}
  #     SMTP_USER: ${AUTH_SMTP_USER:-user}
  #   image: mailhog/mailhog
  #   ports:
  #     - ${AUTH_SMTP_PORT:-1025}:1025 
  #     - 8025:8025
  #   volumes:
  #     # - ./data/mailhog:/maildir
  #     - mailhog:/maildir
  minio:
    command: -c 'mkdir -p /data/nhost && /opt/bin/minio server --address :8484 /data'
    entrypoint: sh
    environment:
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
    image: minio/minio:RELEASE.2021-09-24T00-24-24Z
    ports:
      - ${MINIO_PORT:-8484}:8484
    volumes:
      # - ./data/minio:/data
      - minio:/data
  # postgres:
  #   image: postgres
  #   restart: always
  #   volumes:
  #     # - ./data/db:/var/lib/postgresql/data
  #     # - ./initdb.d:/docker-entrypoint-initdb.d:ro
  #     - postgres:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
  #   ports:
  #     - '5432:5432'
  postgres:
    build:
      context: src/timestep/services/postgres
      dockerfile: Dockerfile
    # ports:
    #   - '5432:5432'
    environment:
      # - 'ALLOW_EMPTY_PASSWORD=yes'
      # POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
      # POSTGRESQL_PASSWORD_FILE: /run/secrets/postgres_password
      # - POSTGRESQL_USERNAME=agent
      # - POSTGRESQL_PASSWORD=password123
      # - POSTGRESQL_DATABASE=timestep_ai
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
    # expose:
    #   - 5432
    # image: docker.io/bitnami/postgresql:15.3.0
    image: registry.gitlab.com/timestep-ai/timestep/postgres:latest
    labels:
      kompose.image-pull-secret: "regcred"
    ports:
      - '5432:5432'
    volumes:
      - 'postgres:/bitnami/postgresql'
  prefect-agent:
    # build: .
    command: ["prefect", "agent", "start", "--pool", "default-agent-pool", "--work-queue", "default"]
    depends_on:
      - prefect-server
    entrypoint: ["/usr/bin/tini", "-g", "--", "/opt/prefect/entrypoint.sh"]
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
    image: prefecthq/prefect:2.11.0-python3.11
  prefect-server:
    command: ["prefect", "server", "start", "--host", "0.0.0.0", "--log-level", "WARNING"]
    entrypoint: ["/usr/bin/tini", "-g", "--", "/opt/prefect/entrypoint.sh"]
    environment:
      # - HOME=/home/prefect
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/prefect
    expose:
      - 4200
    image: prefecthq/prefect:2.11.0-python3.11
    labels:
      kompose.service.healthcheck.liveness.http_get_path: /api/health
      kompose.service.healthcheck.liveness.http_get_port: 4200
      kompose.service.healthcheck.readiness.http_get_path: /api/ready
      kompose.service.healthcheck.readiness.http_get_port: 4200
  #   ports:
  #     - '4200:4200'
  storage:
    command: serve
    depends_on:
      - postgres
      - graphql-engine
      - minio
    environment:
      HASURA_ENDPOINT: http://graphql-engine:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_METADATA: 1
      POSTGRES_MIGRATIONS: 1
      POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres?sslmode=disable
      PUBLIC_URL: http://localhost:${PROXY_PORT:-1337}
      S3_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      S3_BUCKET: nhost
      S3_ENDPOINT: http://minio:8484
      S3_SECRET_KEY: ${STORAGE_SECRET_KEY}
    expose:
      - 8000
    image: nhost/hasura-storage:0.3.1
    restart: always
  web:
    build:
      context: src/timestep/services/web
      dockerfile: Dockerfile
    environment:
      VITE_CLIENT_PORT: '5735'
    expose:
      - 3000
      - 5735
    image: registry.gitlab.com/timestep-ai/timestep/web:latest
    labels:
      kompose.image-pull-secret: "regcred"
  www:
    build:
      context: src/timestep/services/www
      dockerfile: Dockerfile
    # environment:
      # VITE_CLIENT_PORT: '5735'
    # expose:
    #   - 9000
      # - 5735
    image: registry.gitlab.com/timestep-ai/timestep/www:latest
    labels:
      kompose.image-pull-secret: "regcred"
version: '3.6'
volumes:
  # auth:
  caddy_certs:
  # functions_node_modules:
  # functions:
  # mailhog:
  minio:
  postgres:
